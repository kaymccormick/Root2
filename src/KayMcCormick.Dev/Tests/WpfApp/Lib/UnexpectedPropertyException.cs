using System ;
using System.Reflection ;
using System.Runtime.Serialization;
using JetBrains.Annotations ;

namespace Tests.Lib
{
    /// <summary></summary>
    /// <seealso cref="System.Exception" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for UnexpectedPropertyException
    [Serializable]
    public class UnexpectedPropertyException : Exception
    {
        public UnexpectedPropertyException ( ) {
        }

        public UnexpectedPropertyException ( string message ) : base ( message )
        {
        }

        public UnexpectedPropertyException ( string message , Exception innerException ) : base ( message , innerException )
        {
        }

        protected UnexpectedPropertyException ( [ NotNull ] SerializationInfo info , StreamingContext context ) : base ( info , context )
        {
        }

        /// <summary>Gets a message that describes the current exception.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Message
        public override string Message { get ; }

        /// <summary>Gets the member information.</summary>
        /// <value>The member information.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for MemberInfo
        // ReSharper disable once UnusedAutoPropertyAccessor.Global
        public MemberInfo MemberInfo { get ; }

        /// <summary>Initializes a new instance of the <see cref="UnexpectedPropertyException"/> class.</summary>
        /// <param name="message">The message.</param>
        /// <param name="memberInfo">The member information.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public UnexpectedPropertyException ( string message , MemberInfo memberInfo )
        {
            Message   = message ;
            MemberInfo = memberInfo ;
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData ( info , context ) ;
            info.AddValue ( "MemberInfo" , MemberInfo ) ;
        }
    }
}