using System ;
using System.Runtime.Serialization ;
using Autofac.Core ;
using JetBrains.Annotations ;
using KayMcCormick.Dev ;
using KayMcCormick.Dev.Interfaces ;
using KayMcCormick.Dev.TestLib ;
using KayMcCormick.Dev.TestLib.Fixtures ;
using Moq ;
using Xunit ;
using Xunit.Abstractions ;

namespace ClassLibTests
{
    /// <summary>Test for the default configured service for the <seealso cref="IObjectIdProvider"/> service.</summary>
    /// <seealso cref="LoggingFixture" />
    [ BeforeAfterLogger ] [ LogTestMethod ] [ UsedImplicitly ] [ Collection ( "GeneralPurpose" ) ]
    public sealed class DefaultObjectIdProviderTests : IClassFixture < LoggingFixture >
      , IDisposable
    {
        private readonly LoggingFixture _loggingFixture ;

        /// <summary>Initializes a new instance of the <see cref="System.Object" /> class.</summary>
        public DefaultObjectIdProviderTests (
            LoggingFixture    loggingFixture
          , ITestOutputHelper helper
        )
        {
            _loggingFixture = loggingFixture ;
            loggingFixture?.SetOutputHelper ( helper ) ;
        }

        /// <summary>Gets the instance by component registration test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetInstanceByComponentRegistrationTest
        [ Fact ]
        public void GetInstanceByComponentRegistrationTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            var list = x.GetInstanceByComponentRegistration ( reg.Object ) ;
            Assert.NotNull ( list ) ;
        }

        [ Fact ]
        public void GetInstanceByComponentRegistrationNullTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            Assert.Throws < ArgumentNullException > (
                                                     ( ) => x.GetInstanceByComponentRegistration (
                                                                                                  null
                                                                                                 )
                                                    ) ;
        }

        [ Fact ]
        public void GetInstanceByComponentRegistrationWithResultTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            var instance = new object ( ) ;
            x.ProvideObjectInstanceIdentifier (
                                               instance
                                             , reg.Object
                                             , Array.Empty < Parameter > ( )
                                              ) ;
            var info = x.GetInstanceByComponentRegistration ( reg.Object ) ;

            Assert.NotNull ( info ) ;
            Assert.Collection (
                               info
                             , instanceInfo => {
                                   Assert.Same ( instanceInfo.Instance , instance ) ;
                                   Assert.Empty ( instanceInfo.Parameters ) ;
                               }
                              ) ;
        }

        /// <summary>Gets the instance count test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetInstanceCountTest
        [ Fact ]
        public void GetInstanceCountTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            var instanceCount = x.GetInstanceCount ( reg.Object ) ;
            Assert.Equal ( 0 , instanceCount ) ;
        }

        /// <summary>Gets the object instances test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetObjectInstancesTest
        [ Fact ]
        public void GetObjectInstancesTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var instances = x.GetObjectInstances ( ) ;
            Assert.NotNull ( instances ) ;
        }

        /// <summary>Gets the root nodes test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for GetRootNodesTest
        [ Fact ]
        public void GetRootNodesTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var rootNodes = x.GetRootNodes ( ) ;
            Assert.Empty ( rootNodes ) ;
        }

        /// <summary>Provides the object instance identifier test.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for ProvideObjectInstanceIdentifierTest
        [ Fact ]
        public void ProvideObjectInstanceIdentifierTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            var instance = new object ( ) ;
            var id = x.ProvideObjectInstanceIdentifier (
                                                        instance
                                                      , reg.Object
                                                      , Array.Empty < Parameter > ( )
                                                       ) ;
            Assert.NotNull ( id ) ;
        }

        [ Fact ]
        public void GetObjectByIdTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            long id = 0 ;
            var obj = x.GetObjectById ( id ) ;
            Assert.Null ( obj ) ;
        }

        [ Fact ]
        public void GetObjectInstanceIdentifierTest ( )
        {
            var x = new DefaultObjectIdProvider ( new ObjectIDGenerator ( ) ) ;
            var reg = new Mock < IComponentRegistration > ( ) ;
            var instance = new object ( ) ;
            var id = x.GetObjectInstanceIdentifier ( instance ) ;
            Assert.NotNull ( id ) ;
        }

        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose ( )
        {
            _loggingFixture.SetOutputHelper ( null ) ;
            // _loggingFixture?.Dispose ( ) ;
        }
    }
}