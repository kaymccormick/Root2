#region header
// Kay McCormick (mccor)
// 
// WpfApp2
// WpfApp2
// LogEntry.cs
// 
// 2020-02-10-6:23 PM
// 
// ---
#endregion
using System ;
using System.Collections ;
using System.Collections.Generic ;

namespace WpfApp2
{
    /// <summary>Basic LogEntry</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LogEntry
    public class LogEntry : IDictionary < string , object >
    {
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once InconsistentNaming

        /// <summary>Gets or sets the logger.</summary>
        /// <value>The logger.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Logger
        // ReSharper disable once Un
        // usedMember.Global

        public string Logger => ( string ) GetField( "logger" ) ;

        /// <summary>The logged time</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for loggedTime
        public object LoggedTime => DateTime.Parse ( ( string ) GetField ( "@t" ) ) ;


        private readonly IDictionary < string , object > _dictionaryImplementation ;


        public LogEntry ( )
        {

            var dict = new Dictionary < string , object > ( ) ;
            #if PROXY
            _dictionaryImplementation = _proxyGenerator.CreateInterfaceProxyWithTarget < IDictionary < string , object > > (
                                                                                                                            dict
                                                                                                                          , new DictInterceptor()
                                                                                                                           ) ;
#else
            _dictionaryImplementation = dict ;
            #endif
        }

        public string MessageTemplate => ( string ) GetField ( "@mt" ) ;

        private object GetField ( string fieldName )
        {
            if ( ! ContainsKey ( fieldName ) )
            {
                return null ;
            }

            return this[ fieldName ] ;
        }

        /// <summary>Returns an enumerator that iterates through the collection.</summary>
        /// <returns>An enumerator that can be used to iterate through the collection.</returns>
        public IEnumerator < KeyValuePair < string , object > > GetEnumerator ( )
        {
            return _dictionaryImplementation.GetEnumerator ( ) ;
        }

        /// <summary>Returns an enumerator that iterates through a collection.</summary>
        /// <returns>An <see cref="System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        IEnumerator IEnumerable.GetEnumerator ( )
        {
            return ( ( IEnumerable ) _dictionaryImplementation ).GetEnumerator ( ) ;
        }

        public void Add ( KeyValuePair < string , object > item )
        {
            _dictionaryImplementation.Add ( item ) ;
        }

        public void Clear ( ) { _dictionaryImplementation.Clear ( ) ; }

        public bool Contains ( KeyValuePair < string , object > item )
        {
            return _dictionaryImplementation.Contains ( item ) ;
        }
        public void CopyTo ( KeyValuePair < string , object >[] array , int arrayIndex )
        {
            _dictionaryImplementation.CopyTo ( array , arrayIndex ) ;
        }

    
        public bool Remove ( KeyValuePair < string , object > item )
        {
            return _dictionaryImplementation.Remove ( item ) ;
        }

        public int Count => _dictionaryImplementation.Count ;

        public bool IsReadOnly => _dictionaryImplementation.IsReadOnly ;

        public bool ContainsKey ( string key )
        {
            return _dictionaryImplementation.ContainsKey ( key ) ;
        }

        public void Add ( string key , object value )
        {
            _dictionaryImplementation.Add ( key , value ) ;
        }
        public bool Remove ( string key ) { return _dictionaryImplementation.Remove ( key ) ; }

        public bool TryGetValue ( string key , out object value )
        {
            return _dictionaryImplementation.TryGetValue ( key , out value ) ;
        }

        public object this [ string key ]
        {
            get => _dictionaryImplementation.ContainsKey(key) ? _dictionaryImplementation[ key ]  : null;
            set => _dictionaryImplementation[ key ] = value ;
        }

        public ICollection < string > Keys => _dictionaryImplementation.Keys ;

        public ICollection < object > Values => _dictionaryImplementation.Values ;
    }
}