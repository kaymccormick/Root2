using System ;
using System.Collections ;
using System.Collections.Generic ;
using System.Collections.ObjectModel ;
using System.Collections.Specialized ;
using System.Diagnostics ;
using System.IO ;
using System.Linq ;
using System.Text.Json ;
using System.Threading.Tasks ;
using System.Windows ;
using System.Windows.Controls ;
using System.Windows.Data ;
using System.Windows.Input ;
using Microsoft.Win32 ;
using NLog ;

namespace WpfApp2
{
    /// <summary>Main Window</summary>
    /// <seealso cref="System.Windows.Window" />
    /// <seealso cref="System.Windows.Markup.IComponentConnector" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MainWindow
    // ReSharper disable once RedundantExtendsListEntry
    public partial class MainWindow : Window
    {
        private static          string Path   = @"c:\data\logs\test2.json" ;
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        private static readonly LogProperty _loggedTimeLogProperty = new LogProperty (
                                                                                      "LoggedTime"
                                                                                    , "Logged Time"
                                                                                    , "Time of log event."
                                                                                    , typeof (
                                                                                          DateTime )
                                                                                     ) ;

        private static readonly LogProperty _loggerLogProperty = new LogProperty (
                                                                                  "Logger"
                                                                                , "Logger"
                                                                                , "Name of logger."
                                                                                , typeof ( string )
                                                                                 ) ;

        private static readonly LogProperty _callerLineNumberLogProperty = new LogProperty (
                                                                                            "callerLineNumber"
                                                                                          , "Line number"
                                                                                          , "Line number of caller."
                                                                                          , typeof (
                                                                                                int
                                                                                            )
                                                                                           ) ;

        private readonly ISet < string > _propertiesSet = new HashSet < string > ( ) ;

        public MainWindow ( )
        {
            InitializeComponent ( ) ;

            InitializeProperties ( ) ;
            SetupTraceSources ( ) ;

            Entries.CollectionChanged += ( sender , args ) => {
                var gridView = ( GridView ) mainListView.View ;
                if ( args.Action == NotifyCollectionChangedAction.Add )
                {
                    foreach ( LogEntry item in args.NewItems )
                    {
                        foreach ( var itemKey in item.Keys )
                        {
                            MakePropertyColumn ( PropertyInfos[ itemKey ] , gridView ) ;
                        }
                    }
                }
            } ;

            Logger.Info ( "Number of props {numProps}" , PropInfos.Count ) ;
            // var propsWindow = new PropertiesWindow ( ) ;
            // Binding b =
            //     new Binding ( ) { Source = this , Path = new PropertyPath ( "PropertyInfos")} ;
            // propsWindow.SetBinding ( PropertiesCollectionProperty , b ) ;
            //
            // propsWindow.Show ( ) ;
        }

        public Dictionary < string , PropInfo > PropertyInfos { get ; } =
            new Dictionary < string , PropInfo > ( ) ;

        // ReSharper disable once CollectionNeverQueried.Global
        // ReSharper disable once CollectionNeverQueried.Local
        private readonly Dictionary < string , GridViewColumn > gridViewColumns =
            new Dictionary < string , GridViewColumn > ( ) ;

        public ObservablePropertyCollection PropInfos { get ; } =
            new ObservablePropertyCollection (
                                              new[]
                                              {
                                                  new PropInfo ( _loggedTimeLogProperty )
                                                , new PropInfo ( _loggerLogProperty )
                                                , new PropInfo ( _callerLineNumberLogProperty )
                                              }
                                             ) ;

        /// <summary>Gets the entries.</summary>
        /// <value>The entries.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Entries
        public ObservableCollection < LogEntry > Entries { get ; } =
            new ObservableCollection < LogEntry > ( ) ;

        public List < LogProperty > AllProps { get ; set ; }

        public Dictionary < string , LogProperty > PropertiesDict { get ; } =
            new Dictionary < string , LogProperty > ( ) ;

        private StreamReader LogFileReader { get ; set ; }

        public Dictionary<string, GridViewColumn> GridViewColumns => gridViewColumns;

        private static void SetupTraceSources ( )
        {
            PresentationTraceSources.Refresh ( ) ;
            // PresentationTraceSources.DataBindingSource.Switch.Level = SourceLevels.All ;
            PresentationTraceSources.DataBindingSource.Listeners.Add ( new NLogTraceListener ( ) ) ;
        }

        private async Task LoadLogFileAsync ( )
        {
            await Task.Run (
                            ( ) => {
                                LogFileReader = File.OpenText ( Path ) ;
                                while ( ! LogFileReader.EndOfStream )
                                {
                                    var readLine = LogFileReader.ReadLine ( ) ;
                                    if ( readLine != null )
                                    {
                                        var logEntry =
                                            JsonSerializer.Deserialize < LogEntry > ( readLine ) ;
                                        if ( logEntry != null )
                                        {
                                            foreach ( var logEntryKey in logEntry.Keys )
                                            {
                                                if ( PropertyInfos.TryGetValue (
                                                                                logEntryKey
                                                                              , out var propInfo
                                                                               ) )
                                                {
#pragma warning disable RCS1089 // Use --/++ operator instead of assignment.
                                                    propInfo.Count += 1 ;
#pragma warning restore RCS1089 // Use --/++ operator instead of assignment.
                                                }
                                                else
                                                {
                                                    var newProp =
                                                        new PropInfo
                                                        {
                                                            Name = logEntryKey , Count = 1
                                                        } ;
                                                    if ( PropertiesDict.ContainsKey ( logEntryKey )
                                                    )
                                                    {
                                                        Logger.Debug (
                                                                      "adding new Prop Info for existing property with key {key}"
                                                                    , logEntryKey
                                                                     ) ;
                                                        newProp.LogProperty =
                                                            PropertiesDict[ logEntryKey ] ;
                                                    }

                                                    PropertyInfos[ logEntryKey ] = newProp ;
                                                }
                                            }

                                            _propertiesSet.UnionWith ( logEntry.Keys ) ;
                                            Dispatcher?.Invoke (
                                                                ( ) => {
                                                                    Entries.Add ( logEntry ) ;
                                                                }
                                                               ) ;
                                        }
                                    }
                                }
                            }
                           ) ;
        }

        public async Task OnLogLoadedAsync ( )
        {
            foreach ( var keyValuePair in PropertyInfos )
            {
                if ( PropertiesDict.ContainsKey ( keyValuePair.Key ) )
                {
                    continue ;
                }

                var prop = new LogProperty (
                                            keyValuePair.Key
                                          , keyValuePair.Key
                                          , "autogenerated"
                                          , typeof ( object )
                                           ) ;
                Dispatcher?.Invoke (
                                    ( ) => {
                                        PropertiesDict[ keyValuePair.Key ] = prop ;
                                    }
                                   ) ;
            }

            AllProps = PropertiesDict.Values.ToList ( ) ;

            try
            {
                var stream = File.OpenWrite ( "props.json" ) ;
                await JsonSerializer.SerializeAsync ( stream , PropertiesDict.Values ) ;
                stream.Close ( ) ;
                stream.Dispose ( ) ;
            }
            catch ( Exception ex )
            {
                Logger.Warn ( ex , "Unable to serialize: {message}" , ex.Message ) ;
            }

            File.WriteAllText (
                               @"c:\data\logs\parsed.json"
                             , JsonSerializer.Serialize ( Entries )
                              ) ;
        }

        private void MakePropertyColumn ( PropInfo logProperty , GridView gridView )
        {
            var column = new GridViewColumn { Header = logProperty.Name } ;

            var key = $"{logProperty.Name}PropertyValueTemplate" ;
            var maybeTemplate = TryFindResource ( key ) ;
            if ( maybeTemplate == null )
            {
                column.DisplayMemberBinding = new Binding ( "[" + logProperty.Name + "]" ) ;
                // Logger.Error (
                // "Cant find template {templateName} for property {logProperty}"
                // , key
                // , logProperty
                // ) ;
                // return true ;
            }
            else
            {
                column.CellTemplate = ( DataTemplate ) maybeTemplate ;
            }


            gridView.Columns.Add ( column ) ;
            GridViewColumns[ logProperty.Name ] = column ;
        }

        private void InitializeProperties ( )
        {
            // Properties.Add ( _loggedTimeLogProperty ) ;
            //
            // Properties.Add ( _loggerLogProperty ) ;
            //
            // Properties.Add (
            //                 _callerLineNumberLogProperty
            //                ) ;
            // foreach ( var logProperty in Properties )
            // {
            //     PropInfos.Add ( new PropInfo ( ) { LogProperty = logProperty } ) ;
            // }
        }

        private void ButtonBase_OnClick ( object sender , RoutedEventArgs e )
        {
            ( ( CollectionViewSource ) Resources[ "EntriesSource" ] ).View.Refresh ( ) ;
        }

        private void TemplatesButton_OnClick ( object sender , RoutedEventArgs e )
        {
            var dataTemplateList = new ObservableCollection < TemplateInfo > ( ) ;
            foreach ( DictionaryEntry resource in Resources )
            {
                if ( ! ( resource.Value is DataTemplate ) )
                {
                    continue ;
                }

                var template = ( DataTemplate ) resource.Value ;
                var t = new TemplateInfo ( resource.Key , template ) ;
                dataTemplateList.Add ( t ) ;
            }

            var window = new TemplatesWindow ( dataTemplateList ) ;
            window.ShowDialog ( ) ;
        }

        private async void LoadLogFileButton_OnClick ( object sender , RoutedEventArgs e )
        {
            var openFileDialog = new OpenFileDialog
                                 {
                                     DefaultExt = ".json" , InitialDirectory = @"C:\data\logs"
                                 } ;

            var result = openFileDialog.ShowDialog ( ) ;
            if ( !result.HasValue || !result.Value)
            {
                return ;
            }

            Path = openFileDialog.FileName ;

            if ( ! File.Exists ( Path ) )
            {
                return ;
            }

            var origCursor = mainWindow.Cursor ;
            mainWindow.SetCurrentValue ( CursorProperty , Cursors.Wait ) ;
            await LoadLogFileAsync ( ) ;
            await OnLogLoadedAsync ( ) ;
            mainWindow.SetCurrentValue ( CursorProperty , origCursor ) ;
        }
    }
}