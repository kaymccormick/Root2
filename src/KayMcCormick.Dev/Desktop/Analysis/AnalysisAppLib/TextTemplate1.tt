<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@assembly name="PresentationFramework.dll"#>
<#@assembly name="System.Xaml.dll"#>
<#@assembly name="System.Xml.dll"#>
<#@assembly name="System.Memory.dll"#>
<#@assembly name="netstandard.dll"#>
<#@assembly name="C:\Users\mccor.LAPTOP-T6T0BN1K\.nuget\packages\system.text.json\4.7.1\lib\net461\System.Text.Json.dll"#>
<#@assembly name="C:\Users\mccor.LAPTOP-T6T0BN1K\.nuget\packages\system.text.encodings.web\4.7.0\lib\netstandard2.0\System.Text.Encodings.Web.dll"#>
<#@assembly name="C:\Users\mccor.LAPTOP-T6T0BN1K\.nuget\packages\system.numerics.vectors\4.5.0\lib\net46\System.Numerics.Vectors.dll"#>

<#@ output extension=".cs" #>
<#@import namespace="System.Windows.Markup" #>
<#@import namespace="System.IO" #>
<#@import namespace="System.Xml" #>
<#@import namespace="System.Text.Json" #>
using System ;

using System.Linq;
using Microsoft.CodeAnalysis.CSharp ;
using JetBrains.Annotations ;
using Microsoft.CodeAnalysis.CSharp.Syntax ;
using PocoSyntax ;


/// <summary/>
public static class GenTransforms {
<#
            const string typePropertyName = "Type" ;
            const string fullNamePropertyName = "FullName" ;
            const string titlePropertyName = "Title" ;
            const string elementNamePropertyName = "ElementName" ;
            const string abstractnode = "AbstractNode" ;
            const string predefinednode = "PredefinedNode" ;
            const string subtypenamesPropertyName = "SubTypeNames";

            // ReSharper disable once StringLiteralTypo
            var cDataLogsTypesJson = @"C:\data\logs\types.json" ;
            var types =
                JsonSerializer.Deserialize < List < JsonElement > > (
                                                                     File.ReadAllText (
                                                                                       cDataLogsTypesJson
                                                                                      )
                                                                    ) ;
            var dict = new Dictionary < string , string > ( ) ;
            var dict2 = new Dictionary < string , JsonElement > ( ) ;


            foreach ( var typ in types )
            {
                var k = typ.GetProperty ( typePropertyName )
                           .GetProperty ( fullNamePropertyName )
                           .GetString ( ) ;
                k = k.Substring ( k.LastIndexOf ( '.' ) + 1 ) ;

                dict[ k ] = typ.GetProperty ( titlePropertyName )
                               .GetString ( )
                               .Replace ( " " , "_" ) ;
                dict2[ k ] = typ ;
            }

            foreach ( var typ in types )
            {
                var typeElement = typ.GetProperty ( typePropertyName ) ;
                var typeFullName = typeElement.GetProperty ( fullNamePropertyName ).GetString ( ) ;
                var typeShortName =
                    typeFullName.Substring ( typeFullName.LastIndexOf ( '.' ) + 1 ) ;
                var pocoClassName = "Poco" + typeShortName ;
				string body = "";

                if ( typ.GetProperty ( elementNamePropertyName ).GetString ( ) == abstractnode
                     || typ.GetProperty ( elementNamePropertyName ).GetString ( )
                     == predefinednode )
                {
                    IEnumerable < string > nodes ( string cname )
                    {
                        if ( dict2[ cname ].GetProperty ( elementNamePropertyName ).GetString ( )
                             == abstractnode
                             || dict2[ cname ].GetProperty ( elementNamePropertyName ).GetString ( )
                             == predefinednode )
                        {

                            return dict2[ cname ]
                                  .GetProperty ( subtypenamesPropertyName )
                                  .EnumerateArray ( )
                                  .SelectMany ( xx => nodes ( xx.GetString ( ) ) ) ;
                        }
                        else
                        {
                            return new[] { cname } ;
                        }
                    }

                    var cases = string.Join (
                                             ""
                                           , nodes ( typeShortName )
                                                .Select (
                                                         sn
                                                             => $"case {sn} _: return Transform_{dict[ sn ]}(({sn})node); \n"
                                                        )
                                            ) ;
					body = $"switch(node) {{\n{cases}\n}}\nreturn null;\n";
                }
                else
                {
                    var props = "" ;
                    foreach ( var f in typ.GetProperty ( "Fields" ).EnumerateArray ( ) )
                    {
                        var name = f.GetProperty ( "Name" ).GetString ( ) ;
                        if ( ( typeFullName.EndsWith ( "StatementSyntax" )
                               || pocoClassName == "PocoBlockSyntax" )
                             && name == "AttributeLists" )
                        {
                            continue ;
                        }

                        var t1 = f.GetProperty ( typePropertyName ) ;
                        var value = "" ;
                        var transform = "" ;
                        string msg = null ;
                        var typeName = f.GetProperty ( "TypeName" ).GetString ( ) ;
                        if ( typeName == "bool" )
                        {
                            value = $"node.{name}" ;
                            msg   = "bool" ;
                        }
                        else if ( t1.ValueKind == JsonValueKind.Object )
                        {
                            var k = t1.GetProperty ( fullNamePropertyName ).GetString ( ) ;
                            k = k.Substring ( k.LastIndexOf ( '.' ) + 1 ) ;

                            if ( dict.TryGetValue ( k , out var method ) )
                            {
                                value = $"Transform_{method}(node.{name})" ;
                            }
                            else
                            {
                                msg = "not found" ;
                                if ( f.GetProperty ( "TypeName" ).GetString ( ) == "SyntaxToken" )
                                {
                                    value =
                                        $"new PocoSyntaxToken {{RawKind = node.{name}.RawKind, Kind = node.{name}.Kind().ToString(), Value = node.{name}.Value, ValueText = node.{name}.ValueText }}" ;
                                }
                                else if ( typeName.StartsWith ( "SyntaxList<" ) )
                                {
                                    var t2 = typeName.Substring ( 11 , typeName.Length - 12 ) ;
                                    if ( dict.TryGetValue ( t2 , out var m2 ) )
                                    {
                                    }

                                    transform = $".Select(Transform_{m2}).ToList()" ;
                                }
                                else if ( typeName.StartsWith ( "SeparatedSyntaxList<" ) )
                                {
                                    var t2 = typeName.Substring ( 20 , typeName.Length - 21 ) ;
                                    if ( dict.TryGetValue ( t2 , out var m2 ) )
                                    {
                                    }
                                    else
                                    {
                                    }

                                    transform = $".Select(Transform_{m2}).ToList()" ;
                                }
                                else if ( k == "SyntaxTokenList" )
                                {
                                    transform =
                                        ".Select(v => new PocoSyntaxToken {RawKind = v.RawKind, Kind = v.Kind().ToString(), Value = v.Value, ValueText = v.ValueText }).ToList()" ;
                                }
                            }
                        }

                        if ( transform != "" )
                        {
                            value = $"node.{name}{transform}" ;
                        }

                        if ( value == "" )
                        {
                            value = msg ;
                        }

                        var code = $"    {name} = {value}, " ;
                        props = props + "\n" + code ;
                    }

                    body = $"return new {pocoClassName}() {{ {props} }};" ;
					}
#>

        /// <summary></summary>
        [NotNull]
        public static <#=pocoClassName#> Transform_<#=typ.GetProperty("Title").GetString().Replace(" ", "_")#> ([NotNull] <#=typeShortName#> node) {
            if ( node == null )
            {
                throw new ArgumentNullException ( nameof ( node ) ) ;
            }
            <#= body.Replace("\n", "\n            ") #>

        }

<#	
    }
#>
}
