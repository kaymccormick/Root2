<RibbonWindow x:Class="ProjInterface.Window1"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:local="clr-namespace:ProjInterface"
                 xmlns:kmWpf="http://kaymccormick.com/xaml/kmwpf"
                 xmlns:avalondock="https://github.com/Dirkster99/AvalonDock"
                 xmlns:xaml="clr-namespace:KayMcCormick.Lib.Wpf.Xaml;assembly=KayMcCormick.Lib.Wpf"
                 xmlns:anal="http://kaymccormick.com/xaml/analysis"
                 DataContext="{Binding RelativeSource={RelativeSource Self},Path=ViewModel}"
                 Foreground="DarkOrange"
                 mc:Ignorable="d"
                 FontSize="14.0"
                 Background="#121212"
                 Title="Window1" Height="800" Width="1100">
  <RibbonWindow.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
          Source="pack://application:,,,/KayMcCormick.Lib.Wpf;component/SharedResources.xaml" />
        <ResourceDictionary>
          <Style TargetType="Window">
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="AllowsTransparency"
                    Value="True" />
            <Setter Property="Background" Value="Olive" />
          </Style>
          <DataTemplate x:Key="Template1">
            <TextBlock
              Text="{Binding Metadata,Mode=OneWay,Converter={StaticResource DictionaryConverter},ConverterParameter=Title}" />

          </DataTemplate>
          <ContextMenu x:Key="itemContextMenu">
            <MenuItem Header="Open"
                      IsEnabled="{Binding CanOpen}" />
            <MenuItem Header="Delete"
                      IsEnabled="{Binding CanDelete}" />
            <MenuItem Header="Rename"
                      IsEnabled="{Binding CanRename}" />
          </ContextMenu>
          <ContextMenu x:Key="listContextMenu">
            <MenuItem Header="New Folder"
                      IsEnabled="{Binding CanCreateFolder}" />
            <MenuItem Header="New Link"
                      IsEnabled="{Binding CanCreateLink}" />
          </ContextMenu>


          <ControlTemplate x:Key="ControlTemplate1">
            <Border BorderThickness="50" BorderBrush="Red">
              <ContentPresenter />
            </Border>
          </ControlTemplate>
          <DataTemplate x:Key="DataTemplate1">
            <Image
              AutomationProperties.AutomationId="IconContent"
              AutomationProperties.Name="IconContent"
              Stretch="Uniform">
              <Image.Effect>
                <BlurEffect Radius="3" />
              </Image.Effect>
              <Image.Source>
                <Binding Path="IconSource">
                  <Binding.Converter>
                    <avalondock:NullToDoNothingConverter />
                  </Binding.Converter>
                </Binding>
              </Image.Source>
            </Image>
          </DataTemplate>
          <DataTemplate x:Key="DataTemplate2">
            <TextBlock
              AutomationProperties.AutomationId="DocumentTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
          <DataTemplate x:Key="DataTemplate3">
            <TextBlock
              AutomationProperties.AutomationId="DocumentHeaderTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
          <ControlTemplate
            x:Key="LayoutAnchorControlControlTemplate1"
            TargetType="{x:Type avalondock:LayoutAnchorControl}">
            <Border
              CornerRadius="3"
              BorderBrush="#FF59C873"
              BorderThickness="5" Margin="8" Padding="2">
              <ContentPresenter
                ContentTemplate="{Binding Model.Root.Manager.AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
          </ControlTemplate>
          <ControlTemplate
            x:Key="LayoutAnchorGroupControlControlTemplate1"
            TargetType="{x:Type avalondock:LayoutAnchorGroupControl}">
            <ItemsControl>
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel IsItemsHost="True"
                              Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.LayoutTransform>
                <RotateTransform>
                  <RotateTransform.Angle>
                    <Binding Path="Model.Parent.Side"
                             RelativeSource="{RelativeSource TemplatedParent}">
                      <Binding.Converter>
                        <avalondock:AnchorSideToAngleConverter />
                      </Binding.Converter>
                    </Binding>
                  </RotateTransform.Angle>
                </RotateTransform>
              </ItemsControl.LayoutTransform>
            </ItemsControl>
          </ControlTemplate>
          <Style x:Key="A1"
                 TargetType="avalondock:LayoutAnchorablePaneControl" />
          <xaml:AppCommandConverter
            x:Key="AppCommandConverter" />
        </ResourceDictionary>
      </ResourceDictionary.MergedDictionaries>
      <Style x:Key="DockingManagerStyle1" TargetType="{x:Type avalondock:DockingManager}">
        <Setter Property="DocumentPaneControlStyle">
          <Setter.Value>
            <Style TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type avalondock:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                      </Grid.RowDefinitions>
                      <Border Background="Transparent" Grid.RowSpan="2"/>
                      <Grid Panel.ZIndex="1">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition/>
                          <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.Visibility>
                          <Binding Path="Model.ShowHeader" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalondock:LayoutDocumentPaneControl}}">
                            <Binding.Converter>
                              <avalondock:BoolToVisibilityConverter/>
                            </Binding.Converter>
                          </Binding>
                        </Grid.Visibility>
                        <avalondock:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" FlowDirection="LeftToRight" IsItemsHost="True" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                        <avalondock:DropDownButton x:Name="MenuDropDownButton" Grid.Column="1" Focusable="False">
                          <avalondock:DropDownButton.DropDownContextMenu>
                            <avalondock:ContextMenuEx>
                              <avalondock:ContextMenuEx.ItemContainerStyle>
                                <Style TargetType="{x:Type avalondock:MenuItemEx}">
                                  <Setter Property="HeaderTemplate" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                  <Setter Property="HeaderTemplateSelector" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                  <Setter Property="IconTemplate" Value="{Binding Root.Manager.IconContentTemplate}"/>
                                  <Setter Property="IconTemplateSelector" Value="{Binding Root.Manager.IconContentTemplateSelector}"/>
                                  <Setter Property="Command">
                                    <Setter.Value>
                                      <Binding Path=".">
                                        <Binding.Converter>
                                          <avalondock:ActivateCommandLayoutItemFromLayoutModelConverter/>
                                        </Binding.Converter>
                                      </Binding>
                                    </Setter.Value>
                                  </Setter>
                                  <Style.BasedOn>
                                    <Style TargetType="{x:Type MenuItem}">
                                      <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                      <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                      <Setter Property="Background" Value="Transparent"/>
                                      <Setter Property="BorderBrush" Value="Transparent"/>
                                      <Setter Property="BorderThickness" Value="1"/>
                                      <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                      <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                      <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                      <Style.Triggers>
                                        <Trigger Property="Role" Value="TopLevelHeader">
                                          <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                          <Setter Property="Padding" Value="6,0"/>
                                        </Trigger>
                                        <Trigger Property="Role" Value="TopLevelItem">
                                          <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                          <Setter Property="Padding" Value="6,0"/>
                                        </Trigger>
                                        <Trigger Property="Role" Value="SubmenuHeader">
                                          <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                        </Trigger>
                                      </Style.Triggers>
                                    </Style>
                                  </Style.BasedOn>
                                </Style>
                              </avalondock:ContextMenuEx.ItemContainerStyle>
                            </avalondock:ContextMenuEx>
                          </avalondock:DropDownButton.DropDownContextMenu>
                          <avalondock:DropDownButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                              <Setter Property="Padding" Value="2"/>
                              <Setter Property="BorderThickness" Value="1"/>
                              <Setter Property="Background" Value="Transparent"/>
                              <Setter Property="BorderBrush" Value="Transparent"/>
                              <Setter Property="HorizontalAlignment" Value="Center"/>
                              <Setter Property="VerticalAlignment" Value="Center"/>
                              <Setter Property="HorizontalContentAlignment" Value="Center"/>
                              <Setter Property="VerticalContentAlignment" Value="Center"/>
                              <Setter Property="Template">
                                <Setter.Value>
                                  <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                      <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                      <Trigger Property="IsChecked" Value="True">
                                        <Setter Property="BorderBrush" Value="#80DADADA"/>
                                        <Setter Property="Background" Value="#400080FF"/>
                                      </Trigger>
                                      <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush" Value="#80DADADA"/>
                                        <Setter Property="Background" Value="#210080FF"/>
                                      </Trigger>
                                      <Trigger Property="IsKeyboardFocused" Value="True">
                                        <Setter Property="BorderBrush" Value="#80DADADA"/>
                                        <Setter Property="Background" Value="#210080FF"/>
                                      </Trigger>
                                      <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                          <Condition Property="IsMouseOver" Value="True"/>
                                          <Condition Property="IsChecked" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        <Setter Property="Background" Value="#400080FF"/>
                                      </MultiTrigger>
                                      <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                          <Condition Property="IsKeyboardFocused" Value="True"/>
                                          <Condition Property="IsChecked" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        <Setter Property="Background" Value="#400080FF"/>
                                      </MultiTrigger>
                                      <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="BorderBrush" Value="#90006CD9"/>
                                        <Setter Property="Background" Value="#400080FF"/>
                                      </Trigger>
                                      <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                      </Trigger>
                                    </ControlTemplate.Triggers>
                                  </ControlTemplate>
                                </Setter.Value>
                              </Setter>
                            </Style>
                          </avalondock:DropDownButton.Style>
                          <Border Background="White">
                            <Image>
                              <Image.Source>
                                <BitmapImage UriSource="pack://application:,,,/AvalonDock;component/Themes/Generic/Images/PinDocMenu.png"/>
                              </Image.Source>
                            </Image>
                          </Border>
                        </avalondock:DropDownButton>
                      </Grid>
                      <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" HorizontalAlignment="Stretch" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle" VerticalAlignment="Stretch">
                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                      </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                      </Trigger>
                      <DataTrigger Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}" Value="0">
                        <Setter Property="Visibility" TargetName="MenuDropDownButton" Value="Collapsed"/>
                      </DataTrigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="ItemContainerStyle">
                <Setter.Value>
                  <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Visibility">
                      <Setter.Value>
                        <Binding Path="IsVisible">
                          <Binding.Converter>
                            <avalondock:BoolToVisibilityConverter/>
                          </Binding.Converter>
                        </Binding>
                      </Setter.Value>
                    </Setter>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Padding" Value="2,0"/>
                    <Setter Property="Margin" Value="0,2,0,0"/>
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                          <Grid SnapsToDevicePixels="True">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                              <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                            </Border>
                          </Grid>
                          <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                              <Setter Property="Background" Value="White"/>
                              <Setter Property="Panel.ZIndex" Value="1"/>
                              <Setter Property="Margin" Value="0,0,0,-2"/>
                              <Setter Property="Margin" TargetName="Content" Value="0,0,0,3"/>
                            </Trigger>
                            <MultiTrigger>
                              <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                              </MultiTrigger.Conditions>
                              <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}"/>
                              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                              <Setter Property="Panel.ZIndex" Value="0"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                          </ControlTemplate.Triggers>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Setter.Value>
              </Setter>
              <Setter Property="ItemTemplate">
                <Setter.Value>
                  <DataTemplate>
                    <avalondock:LayoutDocumentTabItem Model="{Binding}"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="ContentTemplate">
                <Setter.Value>
                  <DataTemplate>
                    <avalondock:LayoutDocumentControl Model="{Binding}"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorablePaneControlStyle">
          <Setter.Value>
            <Style TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
              <Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="TabStripPlacement" Value="Bottom"/>
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
                    <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                      </Grid.RowDefinitions>
                      <Border Background="Transparent" Grid.RowSpan="2"/>
                      <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle">
                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                      </Border>
                      <avalondock:AnchorablePaneTabPanel x:Name="HeaderPanel" FlowDirection="LeftToRight" IsItemsHost="True" Margin="2,0,2,2" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="ItemContainerStyle">
                <Setter.Value>
                  <Style TargetType="{x:Type TabItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                          <Grid SnapsToDevicePixels="True">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,0,1,1" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                              <ContentPresenter x:Name="Content" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                            </Border>
                          </Grid>
                          <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                              <Setter Property="Background" Value="White"/>
                              <Setter Property="Panel.ZIndex" Value="1"/>
                              <Setter Property="Margin" Value="0,-1,-1,-2"/>
                            </Trigger>
                            <MultiTrigger>
                              <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                              </MultiTrigger.Conditions>
                              <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}"/>
                              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                              <Setter Property="Panel.ZIndex" Value="0"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                          </ControlTemplate.Triggers>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding Items.Count, FallbackValue=1, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="1">
                        <Setter Property="Visibility" Value="Collapsed"/>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </Setter.Value>
              </Setter>
              <Setter Property="ItemTemplate">
                <Setter.Value>
                  <DataTemplate>
                    <avalondock:LayoutAnchorableTabItem Model="{Binding}"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
              <Setter Property="ContentTemplate">
                <Setter.Value>
                  <DataTemplate>
                    <avalondock:LayoutAnchorableControl Model="{Binding}"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorSideTemplate">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorSideControl}">
              <ItemsControl Background="{TemplateBinding Background}">
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel IsItemsHost="True">
                      <StackPanel.Orientation>
                        <Binding Path="Model.Side" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalondock:LayoutAnchorSideControl}}">
                          <Binding.Converter>
                            <avalondock:AnchorSideToOrientationConverter/>
                          </Binding.Converter>
                        </Binding>
                      </StackPanel.Orientation>
                    </StackPanel>
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorGroupTemplate">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorGroupControl}">
              <ItemsControl>
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.LayoutTransform>
                  <RotateTransform>
                    <RotateTransform.Angle>
                      <Binding Path="Model.Parent.Side" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                          <avalondock:AnchorSideToAngleConverter/>
                        </Binding.Converter>
                      </Binding>
                    </RotateTransform.Angle>
                  </RotateTransform>
                </ItemsControl.LayoutTransform>
              </ItemsControl>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorTemplate">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorControl}">
              <Border BorderBrush="Firebrick" BorderThickness="10" Margin="25" Padding="25">
                <ContentPresenter ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalondock:DockingManager}}}" Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="DocumentHeaderTemplate">
          <Setter.Value>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorableHeaderTemplate">
          <Setter.Value>
            <DataTemplate>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image x:Name="icon" Stretch="Uniform">
                  <Image.Source>
                    <Binding Path="IconSource">
                      <Binding.Converter>
                        <avalondock:NullToDoNothingConverter/>
                      </Binding.Converter>
                    </Binding>
                  </Image.Source>
                </Image>
                <TextBlock x:Name="title" Grid.Column="1" Margin="4,0,0,0" Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
              </Grid>
              <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                  <Setter Property="Margin" TargetName="title" Value="0"/>
                </DataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="DocumentTitleTemplate">
          <Setter.Value>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorableTitleTemplate">
          <Setter.Value>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="AnchorableContextMenu">
          <Setter.Value>
            <ContextMenu>
              <MenuItem Command="{Binding FloatCommand}" Header="Float"/>
              <MenuItem Command="{Binding DockCommand}" Header="Dock"/>
              <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document"/>
              <MenuItem Command="{Binding AutoHideCommand}" Header="Auto Hide"/>
              <MenuItem Command="{Binding CloseCommand}" Header="Close">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
              <MenuItem Command="{Binding HideCommand}" Header="Hide">
                <MenuItem.Visibility>
                  <MultiBinding UpdateSourceTrigger="Default">
                    <MultiBinding.Converter>
                      <avalondock:AnchorableContextMenuHideVisibilityConverter/>
                    </MultiBinding.Converter>
                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                      <Binding.Converter>
                        <avalondock:BoolToVisibilityConverter/>
                      </Binding.Converter>
                    </Binding>
                    <Binding Path="CanClose"/>
                  </MultiBinding>
                </MenuItem.Visibility>
              </MenuItem>
            </ContextMenu>
          </Setter.Value>
        </Setter>
        <Setter Property="DocumentContextMenu">
          <Setter.Value>
            <ContextMenu>
              <MenuItem Command="{Binding CloseCommand}" Header="Close">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
              <MenuItem Command="{Binding CloseAllButThisCommand}" Header="Close All But This"/>
              <MenuItem Command="{Binding CloseAllCommand}" Header="Close All"/>
              <MenuItem Command="{Binding FloatCommand}" Header="Float"/>
              <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document"/>
              <MenuItem Command="{Binding NewHorizontalTabGroupCommand}" Header="New Horizontal Tab Group">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
              <MenuItem Command="{Binding NewVerticalTabGroupCommand}" Header="New Vertical Tab Group">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
              <MenuItem Command="{Binding MoveToNextTabGroupCommand}" Header="Move To Next Tab Group">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
              <MenuItem Command="{Binding MoveToPreviousTabGroupCommand}" Header="Move To Previous Tab Group">
                <MenuItem.Visibility>
                  <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <avalondock:BoolToVisibilityConverter/>
                    </Binding.Converter>
                  </Binding>
                </MenuItem.Visibility>
              </MenuItem>
            </ContextMenu>
          </Setter.Value>
        </Setter>
        <Setter Property="DocumentPaneMenuItemHeaderTemplate">
          <Setter.Value>
            <DataTemplate>
              <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="IconContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <Image Stretch="Uniform">
                <Image.Source>
                  <Binding Path="IconSource">
                    <Binding.Converter>
                      <avalondock:NullToDoNothingConverter/>
                    </Binding.Converter>
                  </Binding>
                </Image.Source>
              </Image>
            </DataTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type avalondock:DockingManager}">
              <Border BorderBrush="{TemplateBinding BorderBrush}" 
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}">
                <Grid FlowDirection="LeftToRight">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
                  <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="0" Grid.RowSpan="3"/>
                  <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="0" Grid.RowSpan="3"/>
                  <ContentPresenter Grid.ColumnSpan="3" Content="{TemplateBinding TopSidePanel}" Grid.Column="0" Grid.Row="0"/>
                  <ContentPresenter Grid.ColumnSpan="3" Content="{TemplateBinding BottomSidePanel}" Grid.Column="0" Grid.Row="2"/>
                  <ContentPresenter x:Name="PART_AutoHideArea" Content="{TemplateBinding AutoHideWindow}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Grid.Row="1" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                </Grid>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </RibbonWindow.Resources>
  <RibbonWindow.CommandBindings>
    <CommandBinding Command="Open"
                    Executed="CommandBinding_OnExecuted" />
    <CommandBinding
      Command="kmWpf:WpfAppCommands.QuitApplication"
      Executed="CommandBinding_OnExecuted2" />
  </RibbonWindow.CommandBindings>
  <Border BorderBrush="CadetBlue" BorderThickness="0"
          CornerRadius="0">
    <Grid x:Name="Test1">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="10" />
        <RowDefinition />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>

      <Ribbon x:Name="Ribbon"  Background="#76406A"  >
        <Ribbon.ApplicationMenu>
          <RibbonApplicationMenu SmallImageSource="{StaticResource BrowserIcon}" Background="#ECC8EC" >
            <RibbonApplicationMenuItem Header="Hello _Ribbon"
                                                      x:Name="MenuItem1"
                                                      />
          </RibbonApplicationMenu>
        </Ribbon.ApplicationMenu>
        <RibbonTab Header="Home">
          <RibbonGroup Header="Group1" QuickAccessToolBarId="{Binding Label}">
            <RibbonButton 

                                         Label="Button1" />

            <RibbonButton 
              
                                         Command="Close"
                                         Label="Close" />
            <RibbonSplitButton 
              
                                         Command="FirstPage"
                                         Label="Page Home" >
              <RibbonMenuItem Header="Next Page" 
                                        ImageSource="{x:Null}"

                                        Command="NextPage"/>
              <RibbonMenuItem Header="Previous Page" 
                                        
                                        
                                        Command="PreviousPage"/>

            </RibbonSplitButton>
            <RibbonButton 
                                         
                                         Label="Button4" />

          </RibbonGroup>

          <RibbonGroup  
                                    Header="Group1">
            <RibbonSplitButton 
                                        Label="SplitButton with ToolTip"
                                        ToolTipDescription="SplitButton having all Tooltip properties Set. Ribbon is awesome!!!"
                                        ToolTipFooterTitle="More Details"
                       
                                        ToolTipFooterDescription="Press F1 for No Help."

                        
                                        
                                         />

            <RibbonButton 
                                         

                                          Label="Button"
                       
                                         />

            <RibbonToggleButton 
                                         Label="ToggleButton" />

            <RibbonMenuButton 
                              
                                         
                                         Label="MenuButton" >
            </RibbonMenuButton>



          </RibbonGroup>

        </RibbonTab>

      </Ribbon>

      <avalondock:DockingManager BorderBrush="Black" BorderThickness="1" Grid.Row="2"
                                 Grid.Column="0"

                                 AllowMixedOrientation="True"
                                 AnchorablePaneTemplate="{DynamicResource ControlTemplate1}"
                                 IconContentTemplate="{DynamicResource DataTemplate1}"
                                 DocumentTitleTemplate="{DynamicResource DataTemplate2}"
                                 DocumentPaneMenuItemHeaderTemplate="{DynamicResource DataTemplate3}"
                                 AnchorTemplate="{DynamicResource LayoutAnchorControlControlTemplate1}">
        <avalondock:DockingManager.DocumentHeaderTemplate>
          <DataTemplate
            DataType="{x:Type avalondock:LayoutDocument}">
            <StackPanel Opacity="1.0"
                        Orientation="Horizontal">
              <Image Source="{Binding IconSource}"
                     Margin="6,4,4,0" />
              <TextBlock Text="{Binding Title}"
                         VerticalAlignment="Center" />
            </StackPanel>
          </DataTemplate>
        </avalondock:DockingManager.DocumentHeaderTemplate>
        <avalondock:LayoutRoot>
          <avalondock:LayoutPanel Orientation="Horizontal">
            <avalondock:LayoutAnchorablePane
              x:Name="leftAnchorablePane"
              DockWidth="200" />
            <avalondock:LayoutDocumentPaneGroup>
              <avalondock:LayoutDocumentPane
                x:Name="docpane">

                <avalondock:LayoutDocument Title="Browsex"
                                           IconSource="{StaticResource BrowserIcon}"
                                           x:Name="FrameDxocument">
                </avalondock:LayoutDocument>

<avalondock:LayoutDocument Title="Browser"
                                           IconSource="{StaticResource BrowserIcon}"
                                           x:Name="FrameDocument">
                  <Frame Background="{x:Null}"
                         Navigating="BrowserFrame_OnNavigating"
                         x:Name="BrowserFrame"
                         Source="Home.xaml" />
                </avalondock:LayoutDocument>
                <avalondock:LayoutDocument>
                  <Grid>
                    <Grid.CommandBindings>
                      <CommandBinding
                        Command="kmWpf:WpfAppCommands.Execute"
                        Executed="ExecutePythonCode" />
                    </Grid.CommandBindings>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ToolBarTray>
                      <ToolBar Band="1" BandIndex="1">
                        <Button Content="Run"
                                Command="kmWpf:WpfAppCommands.Execute" />
                      </ToolBar>
                    </ToolBarTray>
                    <avalonEdit:TextEditor Grid.Row="1"
                                           Grid.Column="1"
                                           xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                                           Name="textEditor"
                                           SyntaxHighlighting="C#"
                                           FontFamily="Consolas"
                                           FontSize="10pt" />
                  </Grid>
                </avalondock:LayoutDocument>
                <avalondock:LayoutAnchorable Title="Files"
                                             IconSource="{StaticResource FilesIcon}"
                                             ContentId="fileBrowser">
                  <Grid Opacity="1.0">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <TextBox Grid.Row="0"
                             x:Name="pathTextBox"
                             Margin="3"
                             Text="{Binding ElementName=explorer, Path=SelectedPath, Mode=TwoWay, UpdateSourceTrigger=Explicit}"
                             anal:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text" />
                    <Explorer
                      ItemsSource="{Binding RootCollection}"
                      Grid.Row="1" x:Name="explorer"
                      Margin="3,0,3,0"
                      ItemContextMenu="{StaticResource itemContextMenu}"
                      ListContextMenu="{StaticResource listContextMenu}" />
                  </Grid>
                </avalondock:LayoutAnchorable>
              </avalondock:LayoutDocumentPane>
            </avalondock:LayoutDocumentPaneGroup>
          </avalondock:LayoutPanel>
          <avalondock:LayoutRoot.LeftSide>
            <avalondock:LayoutAnchorSide>
              <avalondock:LayoutAnchorGroup>
                <avalondock:LayoutAnchorable
                  Title="Components">
                  <ListBox Name="viewList"
                           ItemsSource="{Binding Path=Views}"
                           ItemTemplate="{StaticResource Template1}">
                    <ListBox.InputBindings>
                      <KeyBinding Key="Enter"
                                  Command="Open"
                                  CommandParameter="{Binding ElementName=viewList,Path=SelectedItem}" />
                    </ListBox.InputBindings>
                  </ListBox>
                </avalondock:LayoutAnchorable>
              </avalondock:LayoutAnchorGroup>
            </avalondock:LayoutAnchorSide>
          </avalondock:LayoutRoot.LeftSide>
        </avalondock:LayoutRoot>
      </avalondock:DockingManager>
      <StatusBar Grid.Row="3" Grid.Column="0" />
      <RibbonTwoLineText HorizontalAlignment="Left" Margin="461,60.4,0,0" Grid.Row="2" VerticalAlignment="Top" Width="100"/>
    </Grid>
  </Border>
</RibbonWindow>