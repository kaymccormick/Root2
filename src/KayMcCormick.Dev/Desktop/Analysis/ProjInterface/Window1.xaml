<kmWpf:AppWindow x:Class="ProjInterface.Window1"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:local="clr-namespace:ProjInterface"
                 xmlns:kmWpf="http://kaymccormick.com/xaml/kmwpf"
                 xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
                 xmlns:io="clr-namespace:System.IO;assembly=mscorlib"
                 xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib"
                 DataContext="{Binding RelativeSource={RelativeSource Self},Path=ViewModel}"
                 mc:Ignorable="d"
                 FontSize="14.0"
                 Title="Window1" Height="450" Width="800">
  <kmWpf:AppWindow.Resources>
    <Style x:Key="DockingManagerStyle1"
           TargetType="{x:Type xcad:DockingManager}">
      <Setter Property="DocumentPaneControlStyle">
        <Setter.Value>
          <Style
            TargetType="{x:Type xcad:LayoutDocumentPaneControl}">
            <Setter Property="CacheTabItems"
                    Value="{Binding Model.Root.Manager.CacheDocumentTabItems, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate
                  TargetType="{x:Type xcad:LayoutDocumentPaneControl}">
                  <Grid ClipToBounds="True"
                        SnapsToDevicePixels="True"
                        KeyboardNavigation.TabNavigation="Local">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Border Background="Transparent"
                            Grid.RowSpan="2" />
                    <Grid Panel.ZIndex="1">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>
                      <Grid.Visibility>
                        <Binding Path="Model.ShowHeader"
                                 RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutDocumentPaneControl}}">
                          <Binding.Converter>
                            <xcad:BoolToVisibilityConverter />
                          </Binding.Converter>
                        </Binding>
                      </Grid.Visibility>
                      <xcad:DocumentPaneTabPanel
                        x:Name="HeaderPanel"
                        Grid.Column="0"
                        KeyboardNavigation.DirectionalNavigation="Cycle"
                        FlowDirection="LeftToRight"
                        IsItemsHost="True" Grid.Row="0"
                        KeyboardNavigation.TabIndex="1" />
                      <xcad:DropDownButton
                        x:Name="MenuDropDownButton"
                        Grid.Column="1" Focusable="False"
                        AutomationProperties.Name="MenuDropDownButton">
                        <xcad:DropDownButton.DropDownContextMenu>
                          <xcad:ContextMenuEx>
                            <xcad:ContextMenuEx.ItemContainerStyle>
                              <Style
                                TargetType="{x:Type xcad:MenuItemEx}">
                                <Setter
                                  Property="HeaderTemplate"
                                  Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
                                <Setter
                                  Property="HeaderTemplateSelector"
                                  Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
                                <Setter
                                  Property="IconTemplate"
                                  Value="{Binding Root.Manager.IconContentTemplate}" />
                                <Setter
                                  Property="IconTemplateSelector"
                                  Value="{Binding Root.Manager.IconContentTemplateSelector}" />
                                <Setter Property="Command">
                                  <Setter.Value>
                                    <Binding Path=".">
                                      <Binding.Converter>
                                        <xcad:ActivateCommandLayoutItemFromLayoutModelConverter />
                                      </Binding.Converter>
                                    </Binding>
                                  </Setter.Value>
                                </Setter>
                                <Style.BasedOn>
                                  <Style
                                    TargetType="{x:Type MenuItem}">
                                    <Setter
                                      Property="HorizontalContentAlignment"
                                      Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                    <Setter
                                      Property="VerticalContentAlignment"
                                      Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                    <Setter
                                      Property="Background"
                                      Value="Transparent" />
                                    <Setter
                                      Property="BorderBrush"
                                      Value="Transparent" />
                                    <Setter
                                      Property="BorderThickness"
                                      Value="1" />
                                    <Setter
                                      Property="ScrollViewer.PanningMode"
                                      Value="Both" />
                                    <Setter
                                      Property="Stylus.IsFlicksEnabled"
                                      Value="False" />
                                    <Setter
                                      Property="Template"
                                      Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                    <Style.Triggers>
                                      <Trigger
                                        Property="Role"
                                        Value="TopLevelHeader">
                                        <Setter
                                          Property="Template"
                                          Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                        <Setter
                                          Property="Padding"
                                          Value="6,0" />
                                      </Trigger>
                                      <Trigger
                                        Property="Role"
                                        Value="TopLevelItem">
                                        <Setter
                                          Property="Template"
                                          Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                        <Setter
                                          Property="Padding"
                                          Value="6,0" />
                                      </Trigger>
                                      <Trigger
                                        Property="Role"
                                        Value="SubmenuHeader">
                                        <Setter
                                          Property="Template"
                                          Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}" />
                                      </Trigger>
                                    </Style.Triggers>
                                  </Style>
                                </Style.BasedOn>
                              </Style>
                            </xcad:ContextMenuEx.ItemContainerStyle>
                          </xcad:ContextMenuEx>
                        </xcad:DropDownButton.DropDownContextMenu>
                        <xcad:DropDownButton.Style>
                          <Style
                            TargetType="{x:Type ToggleButton}">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter Property="Padding"
                                    Value="2" />
                            <Setter
                              Property="BorderThickness"
                              Value="1" />
                            <Setter Property="Background"
                                    Value="Transparent" />
                            <Setter Property="BorderBrush"
                                    Value="Transparent" />
                            <Setter
                              Property="HorizontalAlignment"
                              Value="Center" />
                            <Setter
                              Property="VerticalAlignment"
                              Value="Center" />
                            <Setter
                              Property="HorizontalContentAlignment"
                              Value="Center" />
                            <Setter
                              Property="VerticalContentAlignment"
                              Value="Center" />
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate
                                  TargetType="{x:Type ToggleButton}">
                                  <Border
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="True">
                                    <ContentPresenter
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      Content="{TemplateBinding Content}"
                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                  </Border>
                                  <ControlTemplate.Triggers>
                                    <Trigger
                                      Property="IsChecked"
                                      Value="True">
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#80DADADA" />
                                      <Setter
                                        Property="Background"
                                        Value="#400080FF" />
                                    </Trigger>
                                    <Trigger
                                      Property="IsMouseOver"
                                      Value="True">
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#80DADADA" />
                                      <Setter
                                        Property="Background"
                                        Value="#210080FF" />
                                    </Trigger>
                                    <Trigger
                                      Property="IsKeyboardFocused"
                                      Value="True">
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#80DADADA" />
                                      <Setter
                                        Property="Background"
                                        Value="#210080FF" />
                                    </Trigger>
                                    <MultiTrigger>
                                      <MultiTrigger.Conditions>
                                        <Condition
                                          Property="IsMouseOver"
                                          Value="True" />
                                        <Condition
                                          Property="IsChecked"
                                          Value="True" />
                                      </MultiTrigger.Conditions>
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#90006CD9" />
                                      <Setter
                                        Property="Background"
                                        Value="#400080FF" />
                                    </MultiTrigger>
                                    <MultiTrigger>
                                      <MultiTrigger.Conditions>
                                        <Condition
                                          Property="IsKeyboardFocused"
                                          Value="True" />
                                        <Condition
                                          Property="IsChecked"
                                          Value="True" />
                                      </MultiTrigger.Conditions>
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#90006CD9" />
                                      <Setter
                                        Property="Background"
                                        Value="#400080FF" />
                                    </MultiTrigger>
                                    <Trigger
                                      Property="IsPressed"
                                      Value="True">
                                      <Setter
                                        Property="BorderBrush"
                                        Value="#90006CD9" />
                                      <Setter
                                        Property="Background"
                                        Value="#400080FF" />
                                    </Trigger>
                                    <Trigger
                                      Property="IsEnabled"
                                      Value="False">
                                      <Setter
                                        Property="Foreground"
                                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                    </Trigger>
                                  </ControlTemplate.Triggers>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </xcad:DropDownButton.Style>
                        <Border Background="White">
                          <Image
                            AutomationProperties.AutomationId="MenuDropDownButtonImage"
                            AutomationProperties.Name="MenuDropDownButtonImage">
                            <Image.Source>
                              <BitmapImage
                                UriSource="pack://application:,,,/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinDocMenu.png"
                                UriCachePolicy="{x:Null}" />
                            </Image.Source>
                          </Image>
                        </Border>
                      </xcad:DropDownButton>
                    </Grid>
                    <Border x:Name="ContentPanel"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Grid.Column="0"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            HorizontalAlignment="Stretch"
                            Grid.Row="1"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Cycle"
                            VerticalAlignment="Stretch">
                      <ContentPresenter
                        x:Name="PART_SelectedContentHost"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Content="{TemplateBinding SelectedContent}"
                        ContentSource="SelectedContent"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled"
                             Value="False">
                      <Setter Property="Foreground"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                    <DataTrigger
                      Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}"
                      Value="0">
                      <Setter Property="Visibility"
                              TargetName="MenuDropDownButton"
                              Value="Collapsed" />
                    </DataTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
              <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                  <Setter Property="Visibility">
                    <Setter.Value>
                      <Binding Path="IsVisible">
                        <Binding.Converter>
                          <xcad:BoolToVisibilityConverter />
                        </Binding.Converter>
                      </Binding>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="IsSelected"
                          Value="{Binding IsSelected, Mode=TwoWay}" />
                  <Setter Property="IsEnabled"
                          Value="{Binding IsEnabled}" />
                  <Setter Property="ToolTip"
                          Value="{Binding ToolTip}" />
                  <Setter
                    Property="AutomationProperties.Name"
                    Value="{Binding DataContext.(AutomationProperties.Name), RelativeSource={RelativeSource Self}}" />
                  <Setter
                    Property="AutomationProperties.AutomationId"
                    Value="{Binding DataContext.(AutomationProperties.AutomationId), RelativeSource={RelativeSource Self}}" />
                  <Setter
                    Property="AutomationProperties.HelpText"
                    Value="{Binding DataContext.(AutomationProperties.HelpText), RelativeSource={RelativeSource Self}}" />
                  <Setter Property="Padding" Value="2,0" />
                  <Setter Property="Margin" Value="0,2,0,0" />
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate
                        TargetType="{x:Type TabItem}">
                        <Grid SnapsToDevicePixels="True">
                          <Border x:Name="Bd"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="1,1,1,0"
                                  Background="{TemplateBinding Background}">
                            <ContentPresenter
                              x:Name="Content"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                              ContentSource="Header"
                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                          </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger Property="IsSelected"
                                   Value="True">
                            <Setter Property="Background"
                                    Value="White" />
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="0,0,0,-2" />
                            <Setter Property="Margin"
                                    TargetName="Content"
                                    Value="0,0,0,3" />
                          </Trigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Panel.ZIndex"
                                    Value="0" />
                          </MultiTrigger>
                          <Trigger Property="IsEnabled"
                                   Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Setter.Value>
            </Setter>
            <Setter Property="ItemTemplate">
              <Setter.Value>
                <DataTemplate>
                  <xcad:LayoutDocumentTabItem
                    Model="{Binding}" />
                </DataTemplate>
              </Setter.Value>
            </Setter>
            <Setter Property="ContentTemplate">
              <Setter.Value>
                <DataTemplate>
                  <xcad:LayoutDocumentControl
                    Model="{Binding}" />
                </DataTemplate>
              </Setter.Value>
            </Setter>
            <Style.Triggers>
              <Trigger Property="CacheTabItems"
                       Value="True">
                <Setter Property="CachedContentTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <xcad:LayoutDocumentControl
                        Model="{Binding}" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
                <Setter Property="ContentTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <Decorator
                        xcad:LayoutCachePaneControl.InternalTabControl="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutDocumentPaneControl}}}" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </Style.Triggers>
          </Style>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorablePaneControlStyle">
        <Setter.Value>
          <Style
            TargetType="{x:Type xcad:LayoutAnchorablePaneControl}">
            <Setter Property="CacheTabItems"
                    Value="{Binding Model.Root.Manager.CacheAnchorableTabItems, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Foreground"
                    Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
            <Setter Property="Background"
                    Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
            <Setter Property="TabStripPlacement"
                    Value="Bottom" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate
                  TargetType="{x:Type xcad:LayoutAnchorablePaneControl}">
                  <Grid ClipToBounds="True"
                        SnapsToDevicePixels="True"
                        KeyboardNavigation.TabNavigation="Local">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border Background="Transparent"
                            Grid.RowSpan="2" />
                    <Border x:Name="ContentPanel"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Grid.Column="0"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            Grid.Row="0"
                            KeyboardNavigation.TabIndex="2"
                            KeyboardNavigation.TabNavigation="Cycle">
                      <ContentPresenter
                        x:Name="PART_SelectedContentHost"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Content="{TemplateBinding SelectedContent}"
                        ContentSource="SelectedContent"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <xcad:AnchorablePaneTabPanel
                      x:Name="HeaderPanel"
                      KeyboardNavigation.DirectionalNavigation="Cycle"
                      FlowDirection="LeftToRight"
                      IsItemsHost="True" Margin="2,0,2,2"
                      Grid.Row="1"
                      KeyboardNavigation.TabIndex="1"
                      Panel.ZIndex="1" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled"
                             Value="False">
                      <Setter Property="Foreground"
                              Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
              <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                  <Setter Property="IsSelected"
                          Value="{Binding IsSelected, Mode=TwoWay}" />
                  <Setter Property="IsEnabled"
                          Value="{Binding IsEnabled}" />
                  <Setter Property="ToolTip"
                          Value="{Binding ToolTip}" />
                  <Setter
                    Property="AutomationProperties.Name"
                    Value="{Binding DataContext.(AutomationProperties.Name), RelativeSource={RelativeSource Self}}" />
                  <Setter
                    Property="AutomationProperties.AutomationId"
                    Value="{Binding DataContext.(AutomationProperties.AutomationId), RelativeSource={RelativeSource Self}}" />
                  <Setter
                    Property="AutomationProperties.HelpText"
                    Value="{Binding DataContext.(AutomationProperties.HelpText), RelativeSource={RelativeSource Self}}" />
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate
                        TargetType="{x:Type TabItem}">
                        <Grid SnapsToDevicePixels="True">
                          <Border x:Name="Bd"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="1,0,1,1"
                                  Background="{TemplateBinding Background}">
                            <ContentPresenter
                              x:Name="Content"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              Content="{TemplateBinding Header}"
                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                              ContentSource="Header"
                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                          </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <Trigger Property="IsSelected"
                                   Value="True">
                            <Setter Property="Background"
                                    Value="White" />
                            <Setter Property="Panel.ZIndex"
                                    Value="1" />
                            <Setter Property="Margin"
                                    Value="0,-1,-1,-2" />
                          </Trigger>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition
                                Property="IsMouseOver"
                                Value="True" />
                              <Condition
                                Property="IsSelected"
                                Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Panel.ZIndex"
                                    Value="0" />
                          </MultiTrigger>
                          <Trigger Property="IsEnabled"
                                   Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                  <Style.Triggers>
                    <DataTrigger
                      Binding="{Binding Items.Count, FallbackValue=1, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}"
                      Value="1">
                      <Setter Property="Visibility"
                              Value="Collapsed" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </Setter.Value>
            </Setter>
            <Setter Property="ItemTemplate">
              <Setter.Value>
                <DataTemplate>
                  <xcad:LayoutAnchorableTabItem
                    Model="{Binding}" />
                </DataTemplate>
              </Setter.Value>
            </Setter>
            <Setter Property="ContentTemplate">
              <Setter.Value>
                <DataTemplate>
                  <xcad:LayoutAnchorableControl
                    Model="{Binding}" />
                </DataTemplate>
              </Setter.Value>
            </Setter>
            <Style.Triggers>
              <Trigger Property="CacheTabItems"
                       Value="True">
                <Setter Property="CachedContentTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <xcad:LayoutAnchorableControl
                        Model="{Binding}" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
                <Setter Property="ContentTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <Decorator
                        xcad:LayoutCachePaneControl.InternalTabControl="{Binding RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutAnchorablePaneControl}}}" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </Style.Triggers>
          </Style>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorSideTemplate">
        <Setter.Value>
          <ControlTemplate
            TargetType="{x:Type xcad:LayoutAnchorSideControl}">
            <ItemsControl
              Background="{TemplateBinding Background}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel IsItemsHost="True">
                    <StackPanel.Orientation>
                      <Binding Path="Model.Side"
                               RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xcad:LayoutAnchorSideControl}}">
                        <Binding.Converter>
                          <xcad:AnchorSideToOrientationConverter />
                        </Binding.Converter>
                      </Binding>
                    </StackPanel.Orientation>
                  </StackPanel>
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorGroupTemplate">
        <Setter.Value>
          <ControlTemplate
            TargetType="{x:Type xcad:LayoutAnchorGroupControl}">
            <ItemsControl>
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel IsItemsHost="True"
                              Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.LayoutTransform>
                <RotateTransform>
                  <RotateTransform.Angle>
                    <Binding Path="Model.Parent.Side"
                             RelativeSource="{RelativeSource TemplatedParent}">
                      <Binding.Converter>
                        <xcad:AnchorSideToAngleConverter />
                      </Binding.Converter>
                    </Binding>
                  </RotateTransform.Angle>
                </RotateTransform>
              </ItemsControl.LayoutTransform>
            </ItemsControl>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorTemplate">
        <Setter.Value>
          <ControlTemplate
            TargetType="{x:Type xcad:LayoutAnchorControl}">
            <Border
              BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
              BorderThickness="1" Margin="2" Padding="2">
              <ContentPresenter
                ContentTemplate="{Binding Model.Root.Manager.AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="DocumentHeaderTemplate">
        <Setter.Value>
          <DataTemplate>
            <TextBlock
              AutomationProperties.AutomationId="DocumentHeaderTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorableHeaderTemplate">
        <Setter.Value>
          <DataTemplate>
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
              </Grid.ColumnDefinitions>
              <Image x:Name="icon"
                     AutomationProperties.AutomationId="AnchorableHeaderIcon"
                     AutomationProperties.Name="AnchorableHeaderIcon"
                     Stretch="Uniform">
                <Image.Source>
                  <Binding Path="IconSource">
                    <Binding.Converter>
                      <xcad:NullToDoNothingConverter />
                    </Binding.Converter>
                  </Binding>
                </Image.Source>
              </Image>
              <TextBlock x:Name="title"
                         AutomationProperties.AutomationId="AnchorableHeaderTitle"
                         Grid.Column="1" Margin="4,0,0,0"
                         Text="{Binding Title}"
                         TextTrimming="CharacterEllipsis" />
            </Grid>
            <DataTemplate.Triggers>
              <DataTrigger Binding="{Binding IconSource}"
                           Value="{x:Null}">
                <Setter Property="Margin"
                        TargetName="title" Value="0" />
              </DataTrigger>
            </DataTemplate.Triggers>
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="DocumentTitleTemplate">
        <Setter.Value>
          <DataTemplate>
            <TextBlock
              AutomationProperties.AutomationId="DocumentTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorableTitleTemplate">
        <Setter.Value>
          <DataTemplate>
            <TextBlock
              AutomationProperties.AutomationId="AnchorableTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="AnchorableContextMenu">
        <Setter.Value>
          <ContextMenu>
            <MenuItem Command="{Binding FloatCommand}"
                      Header="Float" />
            <MenuItem Command="{Binding DockCommand}"
                      Header="Dock" />
            <MenuItem
              Command="{Binding DockAsDocumentCommand}"
              Header="Dock as Tabbed Document" />
            <MenuItem Command="{Binding AutoHideCommand}"
                      Header="Auto Hide" />
            <MenuItem Command="{Binding CloseCommand}"
                      Header="Close">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
            <MenuItem Command="{Binding HideCommand}"
                      Header="Hide">
              <MenuItem.Visibility>
                <MultiBinding UpdateSourceTrigger="Default">
                  <MultiBinding.Converter>
                    <xcad:AnchorableContextMenuHideVisibilityConverter />
                  </MultiBinding.Converter>
                  <Binding Mode="OneWay" Path="IsEnabled"
                           RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                      <xcad:BoolToVisibilityConverter />
                    </Binding.Converter>
                  </Binding>
                  <Binding Path="CanClose" />
                </MultiBinding>
              </MenuItem.Visibility>
            </MenuItem>
          </ContextMenu>
        </Setter.Value>
      </Setter>
      <Setter Property="DocumentContextMenu">
        <Setter.Value>
          <ContextMenu>
            <MenuItem Command="{Binding CloseCommand}"
                      Header="Close">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
            <MenuItem
              Command="{Binding CloseAllButThisCommand}"
              Header="Close All But This" />
            <MenuItem Command="{Binding CloseAllCommand}"
                      Header="Close All" />
            <MenuItem Command="{Binding FloatCommand}"
                      Header="Float" />
            <MenuItem
              Command="{Binding DockAsDocumentCommand}"
              Header="Dock as Tabbed Document" />
            <MenuItem
              Command="{Binding NewHorizontalTabGroupCommand}"
              Header="New Horizontal Tab Group">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
            <MenuItem
              Command="{Binding NewVerticalTabGroupCommand}"
              Header="New Vertical Tab Group">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
            <MenuItem
              Command="{Binding MoveToNextTabGroupCommand}"
              Header="Move To Next Tab Group">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
            <MenuItem
              Command="{Binding MoveToPreviousTabGroupCommand}"
              Header="Move To Previous Tab Group">
              <MenuItem.Visibility>
                <Binding Mode="OneWay" Path="IsEnabled"
                         RelativeSource="{RelativeSource Self}">
                  <Binding.Converter>
                    <xcad:BoolToVisibilityConverter />
                  </Binding.Converter>
                </Binding>
              </MenuItem.Visibility>
            </MenuItem>
          </ContextMenu>
        </Setter.Value>
      </Setter>
      <Setter Property="DocumentPaneMenuItemHeaderTemplate">
        <Setter.Value>
          <DataTemplate>
            <TextBlock
              AutomationProperties.AutomationId="DocumentHeaderTitle"
              Text="{Binding Title}"
              TextTrimming="CharacterEllipsis" />
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="IconContentTemplate">
        <Setter.Value>
          <DataTemplate>
            <Image
              AutomationProperties.AutomationId="IconContent"
              AutomationProperties.Name="IconContent"
              Stretch="Uniform">
              <Image.Source>
                <Binding Path="IconSource">
                  <Binding.Converter>
                    <xcad:NullToDoNothingConverter />
                  </Binding.Converter>
                </Binding>
              </Image.Source>
            </Image>
          </DataTemplate>
        </Setter.Value>
      </Setter>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate
            TargetType="{x:Type xcad:DockingManager}">
            <Border
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}">
              <Grid FlowDirection="LeftToRight">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ContentPresenter
                  Content="{TemplateBinding LayoutRootPanel}"
                  Grid.Column="1" Grid.Row="1" />
                <ContentPresenter
                  Content="{TemplateBinding RightSidePanel}"
                  Grid.Column="2" Grid.Row="0"
                  Grid.RowSpan="3" />
                <ContentPresenter
                  Content="{TemplateBinding LeftSidePanel}"
                  Grid.Column="0" Grid.Row="0"
                  Grid.RowSpan="3" />
                <ContentPresenter Grid.ColumnSpan="3"
                                  Content="{TemplateBinding TopSidePanel}"
                                  Grid.Column="0"
                                  Grid.Row="0" />
                <ContentPresenter Grid.ColumnSpan="3"
                                  Content="{TemplateBinding BottomSidePanel}"
                                  Grid.Column="0"
                                  Grid.Row="2" />
                <ContentPresenter
                  x:Name="PART_AutoHideArea"
                  Content="{TemplateBinding AutoHideWindow}"
                  Grid.Column="1"
                  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                  Grid.Row="1"
                  VerticalAlignment="{TemplateBinding VerticalAlignment}" />
              </Grid>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <ControlTemplate x:Key="ControlTemplate1">
      <Border BorderThickness="5" BorderBrush="Red">
        <ContentPresenter/>
      </Border>
    </ControlTemplate>
    <DataTemplate x:Key="DataTemplate1">
      <Image
        AutomationProperties.AutomationId="IconContent"
        AutomationProperties.Name="IconContent"
        Stretch="Uniform">
        <Image.Effect>
          <BlurEffect Radius="3" />
        </Image.Effect>
        <Image.Source>
          <Binding Path="IconSource">
            <Binding.Converter>
              <xcad:NullToDoNothingConverter />
            </Binding.Converter>
          </Binding>
        </Image.Source>
      </Image>
    </DataTemplate>
    <DataTemplate x:Key="DataTemplate2">
      <TextBlock
        AutomationProperties.AutomationId="DocumentTitle"
        Text="{Binding Title}"
        TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <DataTemplate x:Key="DataTemplate3">
      <TextBlock
        AutomationProperties.AutomationId="DocumentHeaderTitle"
        Text="{Binding Title}"
        TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    <ControlTemplate
      x:Key="LayoutAnchorControlControlTemplate1"
      TargetType="{x:Type xcad:LayoutAnchorControl}">
      <Border
        BorderBrush="#FF59C873"
        BorderThickness="5" Margin="2" Padding="2">
        <ContentPresenter
          ContentTemplate="{Binding Model.Root.Manager.AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
          Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
      </Border>
    </ControlTemplate>
  </kmWpf:AppWindow.Resources>
  <kmWpf:AppWindow.CommandBindings>
    <CommandBinding Command="Open"
                    Executed="CommandBinding_OnExecuted" />
    <CommandBinding
      Command="kmWpf:WpfAppCommands.QuitApplication"
      Executed="CommandBinding_OnExecuted2" />
  </kmWpf:AppWindow.CommandBindings>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="Auto" />
      <RowDefinition Height="15" />
      <RowDefinition Height="*" />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Menu Grid.Row="0" Grid.Column="0" FontSize="18.0">
      <MenuItem Header="File">
        <MenuItem.Effect>
          <BlurEffect Radius="3" RenderingBias="Quality" />
        </MenuItem.Effect>
        <MenuItem Header="_Open" Command="Open" />
        <MenuItem Header="_Quit"
                  Command="kmWpf:WpfAppCommands.QuitApplication" />
      </MenuItem>
    </Menu>
    <ToolBarTray Grid.Row="1" Grid.Column="0">
      <ToolBar Band="1" BandIndex="1">
        <Button Padding="0"
                Command="kmWpf:WpfAppCommands.QuitApplication">
          <Image Source="{StaticResource PowerOffImage}">
            <Image.Clip>
              <RectangleGeometry Rect="6,6,28,28" />
            </Image.Clip>
            <Image.RenderTransform>
              <ScaleTransform ScaleX="1.2" ScaleY="1.2"
                              CenterX="16" CenterY="16" />
            </Image.RenderTransform>

          </Image>

        </Button>
        <Canvas Width="60" VerticalAlignment="Stretch"
                Background="{x:Null}" />
      </ToolBar>
    </ToolBarTray>
    <xcad:DockingManager Grid.Row="3" Grid.Column="0"
                         AllowMixedOrientation="True"
                         
                         AnchorablePaneTemplate="{DynamicResource ControlTemplate1}"
                         IconContentTemplate="{DynamicResource DataTemplate1}"
                         DocumentTitleTemplate="{DynamicResource DataTemplate2}"
                         DocumentPaneMenuItemHeaderTemplate="{DynamicResource DataTemplate3}"
                         AnchorTemplate="{DynamicResource LayoutAnchorControlControlTemplate1}">
      <xcad:DockingManager.DocumentHeaderTemplate>
        <DataTemplate
          DataType="{x:Type xcad:LayoutDocument}">
          <StackPanel Opacity="1.0"
                      Orientation="Horizontal">
            <Image Source="{Binding IconSource}"
                   Margin="6,4,4,0" />
            <TextBlock Text="{Binding Title}"
                       VerticalAlignment="Center" />
          </StackPanel>
        </DataTemplate>
      </xcad:DockingManager.DocumentHeaderTemplate>
      <xcad:LayoutRoot>
        <xcad:LayoutPanel Orientation="Horizontal">
          <xcad:LayoutAnchorablePane DockWidth="300" />
          <xcad:LayoutDocumentPaneGroup>
            <xcad:LayoutDocumentPane x:Name="docpane">
              <xcad:LayoutAnchorable Title="Files"
                                     IconSource="{StaticResource FilesIcon}"
                                     ContentId="fileBrowser">
                <Grid Opacity="1.0">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <TextBox Grid.Row="0"
                           x:Name="pathTextBox"
                           Margin="3"
                           Text="{Binding ElementName=explorer, Path=SelectedPath, Mode=TwoWay, UpdateSourceTrigger=Explicit}"
                           local:InputBindingsManager.UpdatePropertySourceWhenEnterPressed="TextBox.Text" />
                  <Explorer
                    ItemsSource="{Binding RootCollection}"
                    Grid.Row="1" x:Name="explorer"
                    Margin="3,0,3,0"
                    ItemContextMenu="{StaticResource itemContextMenu}"
                    ListContextMenu="{StaticResource listContextMenu}" />
                </Grid>
              </xcad:LayoutAnchorable>
            </xcad:LayoutDocumentPane>
          </xcad:LayoutDocumentPaneGroup>
        </xcad:LayoutPanel>
        <xcad:LayoutRoot.LeftSide>
          <xcad:LayoutAnchorSide>
            <xcad:LayoutAnchorGroup>
              <xcad:LayoutAnchorable Title="Components">
                <ListBox Name="viewList"
                         ItemsSource="{Binding Path=Views}"
                         ItemTemplate="{StaticResource Template1}">
                  <ListBox.InputBindings>
                    <KeyBinding Key="Enter" Command="Open"
                                CommandParameter="{Binding ElementName=viewList,Path=SelectedItem}" />
                  </ListBox.InputBindings>
                </ListBox>
              </xcad:LayoutAnchorable>
            </xcad:LayoutAnchorGroup>
          </xcad:LayoutAnchorSide>
        </xcad:LayoutRoot.LeftSide>
      </xcad:LayoutRoot>
    </xcad:DockingManager>
    <StatusBar Grid.Row="4" Grid.Column="0">
      <StatusBarItem Content="Ready" />
    </StatusBar>
  </Grid>
</kmWpf:AppWindow>