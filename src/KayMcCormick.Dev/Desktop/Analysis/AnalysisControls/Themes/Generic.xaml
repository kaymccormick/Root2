<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:AnalysisControls"
  xmlns:syntax="clr-namespace:AnalysisAppLib.Syntax;assembly=AnalysisAppLibCore"
  xmlns:converters="clr-namespace:AnalysisControls.Converters"
  xmlns:avalondock="https://github.com/Dirkster99/AvalonDock"
  xmlns:codeAnalysis="clr-namespace:Microsoft.CodeAnalysis;assembly=Microsoft.CodeAnalysis"
  xmlns:cSharp="clr-namespace:Microsoft.CodeAnalysis.CSharp;assembly=Microsoft.CodeAnalysis.CSharp"
  xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
  xmlns:primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives;assembly=System.Windows.Controls.Ribbon"
  xmlns:controls="clr-namespace:AnalysisControls.Controls"
  xmlns:typeDescriptors="clr-namespace:AnalysisControls.TypeDescriptors"
  xmlns:kmDevWpfControls="clr-namespace:KmDevWpfControls;assembly=KmDevWpfControlsCore"
  xmlns:wpf="clr-namespace:KayMcCormick.Lib.Wpf;assembly=WpfLibCore"
  xmlns:wpfTerminalControlLib="clr-namespace:WpfTerminalControlLib;assembly=WpfTerminalControlLib"
  xmlns:syntax1="clr-namespace:AnalysisAppLib.Syntax;assembly=AnalysisAppLibCore"
  xmlns:system="clr-namespace:System;assembly=System.Runtime"
  xmlns:reflection="clr-namespace:System.Reflection;assembly=System.Runtime">
  <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
  <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>
  <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
  <system:Double x:Key="ą">20.0</system:Double>
  <SolidColorBrush x:Key="Ĉ" Color="#90B1BBC6" />
  <Geometry x:Key="ï">
    M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z
  </Geometry>
  <Geometry x:Key="ð">
    M 0,0 L 4,3.5 L 0,7 Z
  </Geometry>
  <Geometry x:Key="ñ">
    M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z
  </Geometry>

  <LinearGradientBrush x:Key="Ù" StartPoint="0.5,0.0" EndPoint="0.5,1.0">
    <GradientStop Color="#EEFFFFFF" Offset="0.0" />
    <GradientStop Color="#BBFFFFFF" Offset="0.1" />
    <GradientStop Color="#05FFFFFF" Offset="0.5" />
    <GradientStop Color="#20FFFFFF" Offset="1.0" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ĉ" Color="#EEFFFFFF" />

  <Style TargetType="{x:Type local:Main1}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:Main1}">
          <ControlTemplate.Resources>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" VerticalAlignment="Stretch">
            <Grid AllowDrop="True" x:Name="Grid" VerticalAlignment="Stretch">
              <Grid.Resources>
                <local:TestConverter2 x:Key="TestConverter" />
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ToolBarTray Grid.Row="0" Grid.Column="0">
                <ToolBar Band="1" BandIndex="1">
                  <TextBlock Text="{Binding CurrentOperation.Desc}" />
                  <Button Content="Create workspace" Command="wpf:WpfAppCommands.CreateWorkspace" />
                  <Button Content="Create solution" Command="wpf:WpfAppCommands.CreateSolution" />
                  <Button Content="Create project" Command="wpf:WpfAppCommands.CreateProject" />
                  <Button Content="Create document" Command="wpf:WpfAppCommands.CreateDocument" />
                  <Button Content="Create Class" Command="wpf:WpfAppCommands.CreateClass" />

                </ToolBar>
              </ToolBarTray>
              <Border Grid.Row="1" Grid.Column="0" BorderBrush="Aquamarine" BorderThickness="2">
                <avalondock:DockingManager
                  DocumentsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ViewModel.Documents,Mode=TwoWay}"
                  x:Name="DockingManager" AnchorablesSource="{Binding Anchorables}"
                  VerticalAlignment="Stretch"
                  ActiveContent="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ViewModel.ActiveContent,Mode=TwoWay}">
                  <avalondock:DockingManager.DocumentHeaderTemplate>
                    <DataTemplate
                      DataType="{x:Type avalondock:LayoutDocument}">
                      <StackPanel Opacity="1.0"
                                  Orientation="Horizontal">
                        <Image Source="{Binding IconSource}"
                               Margin="6,4,4,0" />
                        <TextBlock Text="{Binding Content.Title,Converter={StaticResource TestConverter}}"
                                   VerticalAlignment="Center" />
                      </StackPanel>
                    </DataTemplate>
                  </avalondock:DockingManager.DocumentHeaderTemplate>
                  <avalondock:DockingManager.AnchorableHeaderTemplate>
                    <DataTemplate
                      DataType="{x:Type avalondock:LayoutAnchorable}">
                      <StackPanel Opacity="1.0"
                                  Orientation="Horizontal">
                        <Image Source="{Binding IconSource}"
                               Margin="6,4,4,0" />
                        <TextBlock Text="{Binding Content.Title}"
                                   VerticalAlignment="Center" />
                      </StackPanel>
                    </DataTemplate>
                  </avalondock:DockingManager.AnchorableHeaderTemplate>
                </avalondock:DockingManager>
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- ReSharper disable once InconsistentNaming -->
  <BooleanToVisibilityConverter x:Key="à" />
  <!-- ReSharper disable once InconsistentNaming -->
  <SolidColorBrush x:Key="ė" Color="#50FFFFFF" />
  <system:Double x:Key="ß">91.0</system:Double>
  <LinearGradientBrush x:Key="Ğ" StartPoint="0.0,0.5" EndPoint="1.0,0.5">
    <GradientStop Color="#01FFFFFF" Offset="0.0" />
    <GradientStop Color="#80FFFFFF" Offset="0.5" />
    <GradientStop Color="#01FFFFFF" Offset="1.0" />
  </LinearGradientBrush>

  <!-- ReSharper disable once InconsistentNaming -->
  <SolidColorBrush x:Key="ī" Color="#88FFFFFF" />
  <SolidColorBrush x:Key="Ě" Color="#40FFFFFF" />
  <SolidColorBrush x:Key="Ĝ" Color="#AEBECF" />
  <!-- ReSharper disable once InconsistentNaming -->
  <!-- ReSharper disable once InconsistentNaming -->
  <!-- ReSharper disable once InconsistentNaming -->
  <SolidColorBrush x:Key="ĝ" Color="#FCFCFC" />
  <RadialGradientBrush x:Key="Ę" GradientOrigin="0.5,1" Center="0.5,0.5" RadiusX="1" RadiusY="0.5">
    <GradientStop Offset="0" Color="#30FFFFFF" />
    <GradientStop Offset="1" Color="#08808080" />
  </RadialGradientBrush>
  <RadialGradientBrush x:Key="ę" GradientOrigin="0.5,0.95" Center="0.5,1" RadiusX="0.9" RadiusY="0.5">
    <GradientStop Offset="0" Color="#AAFFFFFF" />
    <GradientStop Offset="1" Color="#40BBBBBB" />
  </RadialGradientBrush>

  <Geometry x:Key="Ð">
    M 0 0 L 2.5 3 L 5 0 Z
  </Geometry>
  <SolidColorBrush x:Key="Ø" Color="#60FFFFFF" />
  <LinearGradientBrush x:Key="ě" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#88FFFFFF" Offset="0.0" />
    <GradientStop Color="#88DBE7F4" Offset="1.0" />
  </LinearGradientBrush>
  <system:Int32 x:Key="Í">900</system:Int32>
  <system:Int32 x:Key="Î">20000</system:Int32>
  <system:Int32 x:Key="Ï">0</system:Int32>
  <Color x:Key="Ö">#71000000</Color>
  <!-- ReSharper disable once InconsistentNaming -->
  <LinearGradientBrush x:Key="ì" StartPoint="0,0" EndPoint="1,0">
    <GradientStop Offset="0" Color="#A0FFFFFF" />
    <GradientStop Offset="0.4" Color="#80FFFFFF" />
    <GradientStop Offset="0.8" Color="#0AFFFFFF" />
    <GradientStop Offset="1" Color="#08FFFFFF" />
  </LinearGradientBrush>

  <SolidColorBrush x:Key="Ñ" Color="#F0FFFFFF" />
  <LinearGradientBrush x:Key="Ă" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFE7CBAD" />
    <GradientStop Offset="0.1" Color="#FFF7D7B5" />
    <GradientStop Offset="0.36" Color="#FFFFD38C" />
    <GradientStop Offset="0.36" Color="#FFFFC75A" />
    <GradientStop Offset="1" Color="#FFFFEFA5" />
  </LinearGradientBrush>
  <!-- ReSharper disable once InconsistentNaming -->
  <LinearGradientBrush x:Key="ď" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#40FFFEFE" />
    <GradientStop Offset="0.39" Color="#40FFFEFE" />
    <GradientStop Offset="0.39" Color="#20FFCE68" />
    <GradientStop Offset="0.69" Color="#20FFCE68" />
    <GradientStop Offset="1" Color="#10FFFFFF" />
  </LinearGradientBrush>
  <system:Double x:Key="Ć">22.0</system:Double>
  <!-- ReSharper disable once InconsistentNaming -->
  <SolidColorBrush x:Key="ë" Color="#80FFFFFF" />
  <SolidColorBrush x:Key="Ë" Color="#FF9E9E9E" />
  <!-- ReSharper disable once InconsistentNaming -->
  <SolidColorBrush x:Key="ħ" Color="#FF6C747D" />
  <SolidColorBrush x:Key="Ò" Color="#FFE5EFF9" />
  <DrawingBrush x:Key="Ĩ" Viewbox="0,0,3,3" Viewport="0,0,3,3" TileMode="Tile" ViewportUnits="Absolute"
                ViewboxUnits="Absolute">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="{StaticResource ħ}" Geometry="M 0,0 L 2,0 2,2 0,2 Z" />
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <LinearGradientBrush x:Key="Ĭ" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#AAFFFFFF" Offset="0" />
    <GradientStop Color="#FFFFFF" Offset="1.0" />
  </LinearGradientBrush>

  <Style TargetType="{x:Type local:MyRibbonTabHeader}">
    <Setter Property="FrameworkElement.Margin" Value="0,1,0,0" />
    <Setter Property="Control.Padding" Value="9,1,9,0" />
    <Setter Property="FrameworkElement.MinHeight" Value="22" />
    <Setter Property="Control.Background"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background,FallbackValue=#ff0000}" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="RibbonTabHeader.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="RibbonTabHeader.CheckedBackground" Value="{StaticResource Ĭ}" />
    <Setter Property="RibbonTabHeader.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonTabHeader.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonTabHeader}">
          <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="PART_OuterBorder" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,0"
                    CornerRadius="3,3,0,0" Margin="2,-1,2.5,0">
              <Border x:Name="InnerBorder" RenderOptions.ClearTypeHint="Enabled" BorderThickness="1,1,1,0"
                      CornerRadius="3,3,0,0" Padding="{TemplateBinding Control.Padding}">
                <ContentPresenter ContentSource="Content" VerticalAlignment="Center" HorizontalAlignment="Center" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="PART_OuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="PART_OuterBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{x:Null}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ī}" Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder" Property="Border.Background" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}"
                           Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="RibbonTabHeader.IsRibbonTabSelected" Value="true">
        <Setter Property="Control.TabIndex" Value="-1" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="Ħ" TargetType="{x:Type RibbonToggleButton}">

    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
      <Border x:Name="OuterBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}" />
      <Border x:Name="MiddleBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="Transparent" BorderBrush="Transparent"
              BorderThickness="{TemplateBinding Control.BorderThickness}">
        <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Padding="{TemplateBinding Control.Padding}"
                CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}">
          <StackPanel x:Name="StackPanel"
                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
            <Image x:Name="PART_Image" Source="{TemplateBinding RibbonToggleButton.LargeImageSource}"
                   Width="32" Height="32" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                   HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=LargeImageMargin}}" />
            <Grid x:Name="Grid" VerticalAlignment="Center" HorizontalAlignment="Center">
              <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonToggleButton.Label}"
                                 TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center"
                                 LineHeight="13px"
                                 LineStackingStrategy="BlockLineHeight"
                                 HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                 PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                                 PathFill="{TemplateBinding Control.Foreground}" Margin="1,1,1,0" />
            </Grid>
          </StackPanel>
        </Border>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Value="Large"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Property="FrameworkElement.MinWidth" Value="44" />
        <Setter Property="FrameworkElement.Height" Value="66" />
        <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26" />
        <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true" />
      </DataTrigger>
      <DataTrigger Value="Small"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height" />
        <Setter TargetName="PART_Image" Property="FrameworkElement.Margin" Value="1,0,1,0" />
        <Setter TargetName="PART_Image"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                Property="Image.Source" />
        <Setter TargetName="PART_Image" Property="FrameworkElement.Width" Value="16" />
        <Setter TargetName="PART_Image" Property="FrameworkElement.Height" Value="16" />
        <Setter TargetName="TwoLineText" Property="FrameworkElement.HorizontalAlignment" Value="Left" />
        <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="1" />
        <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                     Value="Small" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="FrameworkElement.Height" Value="Auto" />
      </MultiDataTrigger>
      <DataTrigger Value="False"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
        <Setter TargetName="TwoLineText" Value="{x:Null}" Property="RibbonTwoLineText.Text" />
        <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="0" />
      </DataTrigger>
      <DataTrigger Value="Collapsed"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter TargetName="PART_Image" Property="UIElement.Visibility" Value="Collapsed" />
      </DataTrigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground,FallbackValue=#ff0000}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground,FallbackValue=#ff0000}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Image" Property="UIElement.Opacity" Value="0.5" />
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText" Value="{StaticResource Ë}"
                Property="RibbonTwoLineText.PathFill" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground,FallbackValue=#ff0000}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground,FallbackValue=#ff0000}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True" />
          <Condition Property="UIElement.IsMouseOver" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True" />
          <Condition Property="UIElement.IsKeyboardFocused" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonBase.IsPressed" Value="true" />
          <Condition Property="UIElement.IsKeyboardFocused" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background" />
      </MultiTrigger>
      <Trigger Property="RibbonToggleButton.IsInControlGroup" Value="true">
        <Setter TargetName="OuterBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0" />
        <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
        <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
        <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
        <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
        <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition
            Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}"
            Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
                     Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent" />
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="TwoLineText"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="RibbonTwoLineText.PathFill" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type RibbonToggleButton}">
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="RibbonToggleButton.CornerRadius" Value="2" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonToggleButton.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground,FallbackValue=#ff0000}" />
    <Setter Property="RibbonToggleButton.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonToggleButton.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonToggleButton.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="RibbonToggleButton.CheckedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
    <Setter Property="RibbonToggleButton.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="RibbonToggleButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Setter Property="Control.Template" Value="{StaticResource Ħ}" />
    <Setter Property="RibbonToggleButton.QuickAccessToolBarControlSizeDefinition">
      <Setter.Value>
        <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false" />
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <Thickness Left="1" Top="1" Right="1" Bottom="2"
                 x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}" />
    </Style.Resources>
  </Style>

  <!-- ReSharper disable once InconsistentNaming -->
  <Style x:Key="ĭ" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Background"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).Background,FallbackValue=#ff0000}" />
    <Setter Property="BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).BorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="OuterBorder" CornerRadius="3,0,0,3" BorderThickness="1"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}">
            <Border Name="InnerBorder" CornerRadius="3,0,0,3" Background="#80FFFFFF">
              <Path Name="GlyphPath" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#808080"
                    Data="M 4,0 L 0,3.5 4,7 " />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Control.HorizontalContentAlignment" Value="Right">
              <Setter TargetName="GlyphPath" Property="Path.Data" Value="M 0,0 L 4,3.5 0,7 " />
              <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0,3,3,0" />
              <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0,3,3,0" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).MouseOverBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).PressedBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="GlyphPath"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                      Property="Shape.Fill" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <primitives:RibbonScrollButtonVisibilityConverter x:Key="Į" />
  <!-- ReSharper disable once InconsistentNaming -->
  <ControlTemplate x:Key="į" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Control.Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Control.Padding}"
                              Grid.ColumnSpan="3" Content="{TemplateBinding ContentControl.Content}"
                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                              CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" />
      <RepeatButton Style="{StaticResource ĭ}" HorizontalContentAlignment="Left" Grid.Column="0"
                    Command="{x:Static ScrollBar.LineLeftCommand}" Focusable="false"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
        <UIElement.Visibility>
          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource Į}" ConverterParameter="0">
            <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </UIElement.Visibility>
      </RepeatButton>
      <RepeatButton Style="{StaticResource ĭ}" HorizontalContentAlignment="Right" Grid.Column="2"
                    Command="{x:Static ScrollBar.LineRightCommand}" Focusable="false"
                    CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
        <UIElement.Visibility>
          <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource Į}"
                        ConverterParameter="100">
            <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </UIElement.Visibility>
      </RepeatButton>
    </Grid>
  </ControlTemplate>

  <Style x:Key="Ī" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="CanContentScroll" Value="true" />
    <Setter Property="Template" Value="{StaticResource į}" />
  </Style>

  <SolidColorBrush x:Key="Ú" Color="#FFFFB700" />
  <LinearGradientBrush x:Key="Û" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFEFBF4" />
    <GradientStop Offset="0.19" Color="#FFFDE7CE" />
    <GradientStop Offset="0.39" Color="#FFFDDEB8" />
    <GradientStop Offset="0.39" Color="#FFFFCE6B" />
    <GradientStop Offset="0.79" Color="#FFFFDE9A" />
    <GradientStop Offset="1" Color="#FFFFEBAA" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Ý" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFE3C085" />
    <GradientStop Offset="0.19" Color="#FFF4CC89" />
    <GradientStop Offset="0.36" Color="#FFF5C777" />
    <GradientStop Offset="0.36" Color="#FFF5BB56" />
    <GradientStop Offset="0.79" Color="#FFF4CE9A" />
    <GradientStop Offset="1" Color="#FFF3E28D" />
  </LinearGradientBrush>
  <Style x:Key="ó" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Width" Value="11" />
    <Setter Property="FrameworkElement.Height" Value="11" />
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom" />
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Left" />
    <Setter Property="FrameworkElement.Cursor" Value="SizeNESW" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="2,0,0,2" Data="M 0,0 L 2,0 2,3 5,3 5,6 8,6 8,9 11,9 11,11 0,11 Z"
                  Fill="{StaticResource Ĩ}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
        <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="Õ" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="11" />
    <Setter Property="Height" Value="11" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Cursor" Value="SizeNESW" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="0,2,2,0" Data="M 0,0 L 0,3 3,3 3,6 6,6 6,9 9,9 9,11 11,11 11,0 Z"
                  Fill="{StaticResource Ĩ}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
        <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Ó" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="11" />
    <Setter Property="Height" Value="11" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Cursor" Value="SizeNWSE" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="0,0,2,2" Data="M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z"
                  Fill="{StaticResource Ĩ}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
        <Setter Property="FrameworkElement.Cursor" Value="SizeNESW" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:MyRibbonGallery}">
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="Control.Background"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background,FallbackValue=#ff0000}" />
    <Setter Property="Control.BorderThickness" Value="0,1" />
    <Setter Property="UIElement.Focusable" Value="false" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="RibbonGallery.CommandParameter"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" />
    <Setter Property="RibbonGallery.PreviewCommandParameter"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=HighlightedItem}" />
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <primitives:RibbonGalleryCategoriesPanel Name="ItemsHostPanel" IsItemsHost="true" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonGallery}">
          <Border x:Name="Border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
            <Border x:Name="InnerBorder" Background="{StaticResource Ñ}">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Grid x:Name="FilterHost">
                  <ContentPresenter x:Name="PART_FilterContentPane" ContentSource="FilterPaneContent" />
                  <RibbonFilterMenuButton x:Name="PART_FilterMenuButton"
                                          Style="{TemplateBinding RibbonGallery.FilterMenuButtonStyle}"
                                          ItemContainerStyleSelector="{TemplateBinding RibbonGallery.FilterItemContainerStyleSelector}"
                                          ItemTemplateSelector="{TemplateBinding RibbonGallery.FilterItemTemplateSelector}"
                                          HorizontalContentAlignment="Left" Visibility="Collapsed" />
                </Grid>
                <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" Padding="{TemplateBinding Control.Padding}"
                              Focusable="false">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left"
                            VerticalAlignment="Top">
                      <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=Border, Path=ActualHeight}"
                                 Width="{Binding ElementName=Border, Path=ActualWidth}"
                                 Fill="{Binding ElementName=Border, Path=Background}" />
                      <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}"
                                 Height="{Binding ElementName=Border, Path=ActualHeight}"
                                 Width="{Binding ElementName=Border, Path=ActualWidth}" />
                    </Canvas>
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Continue"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" />
                  </Grid>
                </ScrollViewer>
              </Grid>
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_ScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
              <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
              <Setter TargetName="OverlayRect" Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OverlayRect" Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                      Property="Border.Background" />
            </Trigger>
            <Trigger Property="RibbonGallery.CanUserFilter" Value="false">
              <Setter TargetName="FilterHost" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Value="{x:Null}" Property="RibbonGallery.FilterPaneContent" />
                <Condition Value="{x:Null}" Property="RibbonGallery.FilterPaneContentTemplate" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_FilterMenuButton" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="PART_FilterContentPane" Property="UIElement.Visibility" Value="Collapsed" />
            </MultiTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="Ĕ" Color="#0C000000" />
  <Style TargetType="{x:Type local:MyRibbonQuickAccessToolBar}">
    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="true" />
    <Setter Property="FrameworkElement.Height"
            Value="{DynamicResource {x:Static SystemParameters.CaptionHeightKey}}" />
    <Setter Property="FrameworkElement.Margin" Value="3,-0.5,3,-1.4" />
    <Setter Property="Control.Background"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background,FallbackValue=#ff0000}" />
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonQuickAccessToolBar}">
          <Grid SnapsToDevicePixels="true" Margin="{TemplateBinding FrameworkElement.Margin}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="1" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <UIElement.Effect>
              <DropShadowEffect Color="White" BlurRadius="15.0" ShadowDepth="0" />
            </UIElement.Effect>
            <primitives:RibbonQuickAccessToolBarPanel Name="PART_MainPanel" IsItemsHost="true" Grid.Column="0" />
            <ContentPresenter Name="MainCustomizeMenuHost" Grid.Column="2"
                              Content="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent},NotifyOnTargetUpdated=True,NotifyOnSourceUpdated=True}" />
            <Grid x:Name="OverflowButtonHost" Column="2" Visibility="Collapsed">
              <RibbonToggleButton x:Name="PART_OverflowButton" Style="{StaticResource {x:Type RibbonToggleButton}}"
                                  Width="12" ClickMode="Press" KeyTip="00"
                                  IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <RibbonToggleButton.ControlSizeDefinition>
                  <RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="true" />
                </RibbonToggleButton.ControlSizeDefinition>
              </RibbonToggleButton>
              <Path HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,0,0,0" IsHitTestVisible="false"
                    Width="7" Height="5" Fill="{TemplateBinding Control.Foreground}" Stretch="Fill"
                    Stroke="{TemplateBinding Control.Foreground}" Data="M 0,0 L 2,2 0,4 M 4,0 L 6,2 4,4 " />
              <Popup x:Name="PART_OverflowPopup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent"
                                                UIElement.Focusable="true"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                FrameworkElement.FocusVisualStyle="{x:Null}">
                  <Border x:Name="PopupBorder" Background="{TemplateBinding Control.Background}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2" BorderThickness="1"
                          Padding="2">
                    <DockPanel>
                      <primitives:RibbonQuickAccessToolBarOverflowPanel Name="PART_OverflowPanel"
                                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                      <ContentPresenter Name="OverflowCustomizeMenuHost" DockPanel.Dock="Right" />
                    </DockPanel>
                  </Border>
                </classic:SystemDropShadowChrome>
              </Popup>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Value="false"
                         Binding="{Binding RelativeSource={RelativeSource AncestorType=local:MyRibbon}, Path=ShowQuickAccessToolBarOnTop}">
              <Setter TargetName="PART_MainPanel" Property="FrameworkElement.Margin" Value="2,0,2,0" />
            </DataTrigger>
            <Trigger Property="RibbonQuickAccessToolBar.HasOverflowItems" Value="true">
              <Setter TargetName="OverflowButtonHost" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="MainCustomizeMenuHost" Value="{x:Null}" Property="ContentPresenter.Content" />
              <Setter TargetName="OverflowCustomizeMenuHost"
                      Value="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="ContentPresenter.Content" />
            </Trigger>
            <Trigger SourceName="PART_OverflowPopup" Property="Popup.IsOpen" Value="false">
              <Setter TargetName="PART_OverflowPopup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="PART_OverflowPopup" Property="Popup.PopupAnimation" Value="None" />
              <Setter TargetName="PopupBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PopupBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="PopupBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="Shdw" Property="classic:SystemDropShadowChrome.CornerRadius" Value="0" />
            </DataTrigger>
            <Trigger SourceName="PART_OverflowPopup" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
              <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                      Property="classic:SystemDropShadowChrome.Color" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
        <Setter Property="FrameworkElement.Margin" Value="4,0,6,0" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:MyRibbonGalleryCategory}">
    <Setter Property="Control.Background" Value="{StaticResource Ĕ}" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="ItemsControl.ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <primitives:RibbonGalleryItemsPanel Name="ItemsHostPanel" IsItemsHost="true" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonGalleryCategory}">
          <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Border x:Name="HeaderBorder" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}"
                    Visibility="{TemplateBinding RibbonGalleryCategory.HeaderVisibility}">
              <ContentPresenter x:Name="PART_Header" ContentSource="Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="HeaderBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="HeaderBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="HeaderBorder" Property="Border.CornerRadius" Value="0" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ĕ" Color="#30FFFFFF" />
  <SolidColorBrush x:Key="Ė" Color="#FF3F3F3F" />
  <Style TargetType="{x:Type local:MyRibbonGalleryItem}">
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="RibbonGalleryItem.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonGalleryItem.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="RibbonGalleryItem.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonGalleryItem.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonGalleryItem.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="RibbonGalleryItem.CheckedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Setter Property="UIElement.Focusable" Value="true" />
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.Padding" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonGalleryItem}">
          <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="OuterBorder" CornerRadius="2" Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Padding="{TemplateBinding Control.Padding}">
              <Border x:Name="InnerBorder" CornerRadius="2" Background="Transparent" BorderBrush="Transparent"
                      BorderThickness="{TemplateBinding Control.BorderThickness}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="2"
                                  RecognizesAccessKey="true" />
              </Border>
            </Border>
            <Border x:Name="PressedStateOverlay" CornerRadius="2" HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="MainGrid" Value="{StaticResource Ė}" Property="TextElement.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="PressedStateOverlay" Property="Border.CornerRadius" Value="0" />
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonGalleryItem.IsHighlighted" Value="true" />
                <Condition Property="RibbonGalleryItem.IsPressed" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
            </MultiTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <Trigger Property="RibbonGalleryItem.IsPressed" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground,FallbackValue=#ff0000}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PressedStateOverlay" Value="{StaticResource ĕ}" Property="Border.Background" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PressedStateOverlay" Value="{StaticResource ĕ}" Property="Border.Background" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <Trigger Property="RibbonGalleryItem.IsSelected" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonGalleryItem.IsHighlighted" Value="true" />
                <Condition Property="RibbonGalleryItem.IsSelected" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="InnerBorder" Value="{StaticResource ď}" Property="Border.Background" />
            </MultiTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="InnerBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="Ĥ" TargetType="{x:Type local:MyRibbonGroup}">
    <Border Name="GroupBorder" Background="{TemplateBinding Control.Background}" Margin="1,2,0,0">
      <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" MinHeight="16" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Border Name="PART_HotBackground"
                Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                Grid.RowSpan="3" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true" />
        <Border Name="SeparatorBorder" Background="{TemplateBinding Control.BorderBrush}" Grid.Column="1"
                Grid.RowSpan="3" Height="75" Width="1" VerticalAlignment="Center" SnapsToDevicePixels="true" />
        <Border Margin="2,1,2,0" Padding="3,0,3,0">
          <Grid>
            <ItemsPresenter Name="ItemsPresenter" />
            <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false" />
          </Grid>
        </Border>
        <Border Name="LabelSeparatorBorder" Grid.Row="1" Height="1" Margin="5,1,5,-1" />
        <Grid Margin="2,0,2,0" Row="2">
          <ContentPresenter Name="PART_Header" TextElement.Foreground="{StaticResource Ë}" ContentSource="Header"
                            Margin="2,0,2,0" MaxHeight="16" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="SeparatorBorder" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="GroupBorder" Property="Border.BorderThickness" Value="1" />
        <Setter TargetName="GroupBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="GroupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="LabelSeparatorBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.Background" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Ģ" TargetType="{x:Type RibbonToggleButton}">
    <Setter Property="UIElement.Focusable" Value="true" />
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:MyRibbonGroup}}, Path=BorderBrush}" />
    <Setter Property="RibbonToggleButton.MouseOverBorderBrush" Value="Transparent" />
    <Setter Property="RibbonToggleButton.MouseOverBackground" Value="{StaticResource Ě}" />
    <Setter Property="RibbonToggleButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="RibbonToggleButton.FocusedBorderBrush" Value="Transparent" />
    <Setter Property="RibbonToggleButton.CheckedBackground" Value="Transparent" />
    <Setter Property="RibbonToggleButton.CheckedBorderBrush" Value="Transparent" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
          <FrameworkTemplate.Resources>
            <DataTemplate DataType="{x:Type system:String}">
              <RibbonTwoLineText Margin="2,4,2,0" TextAlignment="Center" VerticalAlignment="Top" LineHeight="13px"
                                 LineStackingStrategy="BlockLineHeight"
                                 HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                 PathFill="{TemplateBinding TextElement.Foreground}"
                                 PathData="{TemplateBinding RibbonTwoLineText.PathData}" Text="{Binding}" />
            </DataTemplate>
          </FrameworkTemplate.Resources>
          <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="ButtonInnerBorder" CornerRadius="2" BorderThickness="1" Margin="1" BorderBrush="#EAF1FB" />
            <Border x:Name="ButtonOuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}"
                    Background="{TemplateBinding Control.Background}" CornerRadius="2" BorderThickness="1" />
            <Border x:Name="PART_HotBackground" Opacity="0" CornerRadius="2" BorderThickness="1"
                    Background="{TemplateBinding RibbonToggleButton.MouseOverBackground}"
                    BorderBrush="{TemplateBinding RibbonToggleButton.MouseOverBorderBrush}" />
            <Grid Margin="2">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Border x:Name="ImageOuterBorder" Grid.Row="0">
                <Border x:Name="ImageMiddleBorder" Margin="3" VerticalAlignment="Top" HorizontalAlignment="Center"
                        BorderBrush="{StaticResource Ĝ}" BorderThickness="0" Width="32" Height="32"
                        CornerRadius="3">
                  <Grid>
                    <Border x:Name="ImageInnerBorder" BorderBrush="{StaticResource ĝ}" BorderThickness="0"
                            CornerRadius="3" />
                    <Image x:Name="GroupImage" Source="{TemplateBinding RibbonToggleButton.LargeImageSource}"
                           Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center"
                           RenderOptions.BitmapScalingMode="NearestNeighbor" />
                  </Grid>
                </Border>
              </Border>
              <Border x:Name="LabelBorder" Grid.Row="1" Grid.RowSpan="2" Background="{StaticResource Ę}">
                <ContentPresenter RibbonTwoLineText.HasTwoLines="true"
                                  RibbonTwoLineText.PathData="{StaticResource Ð}" />
              </Border>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Value="{x:Null}" Property="RibbonToggleButton.LargeImageSource">
              <Setter TargetName="GroupImage"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                      Property="Image.Source" />
              <Setter TargetName="GroupImage" Property="FrameworkElement.Width" Value="16" />
              <Setter TargetName="GroupImage" Property="FrameworkElement.Height" Value="16" />
              <Setter TargetName="ImageMiddleBorder" Property="Border.BorderThickness" Value="1" />
              <Setter TargetName="ImageMiddleBorder" Value="{StaticResource ě}" Property="Border.Background" />
              <Setter TargetName="ImageInnerBorder" Property="Border.BorderThickness" Value="1" />
              <Setter TargetName="ImageInnerBorder" Value="{StaticResource ė}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="GroupImage" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="ImageMiddleBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="ImageMiddleBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="ImageInnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="ImageInnerBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="LabelBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="ButtonOuterBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="ButtonOuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="ButtonOuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="ButtonInnerBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="0,1,0,0" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ButtonInnerBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="1" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ButtonInnerBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="ButtonInnerBorder" Property="Border.BorderThickness" Value="1" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="ButtonOuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="true" />
                <Condition Property="ToggleButton.IsChecked" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1" />
            </MultiTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="PART_HotBackground"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="PART_HotBackground"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HotBackground" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="PART_HotBackground"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="PART_HotBackground"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="ImageOuterBorder" Property="Border.Background" Value="#20BBBBBB" />
              <Setter TargetName="LabelBorder" Value="{StaticResource ę}" Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ĤMy" TargetType="{x:Type local:CompilationGroup}">
    <Border Name="GroupBorder" Background="{TemplateBinding Control.Background}" Margin="1,2,0,0">
      <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" MinHeight="16" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Border Name="PART_HotBackground"
                Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                Grid.RowSpan="3" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true" />
        <Border Name="SeparatorBorder" Background="{TemplateBinding Control.BorderBrush}" Grid.Column="1"
                Grid.RowSpan="3" Height="75" Width="1" VerticalAlignment="Center" SnapsToDevicePixels="true" />
        <Border Margin="2,1,2,0" Padding="3,0,3,0">
          <Grid>
            <ItemsPresenter Name="ItemsPresenter" />
            <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false" />
          </Grid>
        </Border>
        <Border Name="LabelSeparatorBorder" Grid.Row="1" Height="1" Margin="5,1,5,-1" />
        <Grid Margin="2,0,2,0" Row="2">
          <ContentPresenter Name="PART_Header" TextElement.Foreground="{StaticResource Ë}" ContentSource="Header"
                            Margin="2,0,2,0" MaxHeight="16" HorizontalAlignment="Center" VerticalAlignment="Center" />
        </Grid>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="SeparatorBorder" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="GroupBorder" Property="Border.BorderThickness" Value="1" />
        <Setter TargetName="GroupBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="GroupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="LabelSeparatorBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.Background" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <LinearGradientBrush x:Key="Ġ" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Offset="0" Color="#80FFFFFF" />
    <GradientStop Offset="0.5" Color="#60FFFFFF" />
    <GradientStop Offset="1" Color="#40808080" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ġ" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Offset="0" Color="#80808080" />
    <GradientStop Offset="1" Color="#80FFFFFF" />
  </LinearGradientBrush>
  <!-- ReSharper disable once InconsistentNaming -->
  <Style x:Key="ģ" TargetType="{x:Type RibbonToggleButton}">
    <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor" />
    <Setter Property="UIElement.Focusable" Value="true" />
    <Setter Property="Control.BorderBrush" Value="#80808080" />
    <Setter Property="Control.Background" Value="#AAFFFFFF" />
    <Setter Property="RibbonToggleButton.MouseOverBorderBrush" Value="Transparent" />
    <Setter Property="RibbonToggleButton.MouseOverBackground" Value="{StaticResource Ġ}" />
    <Setter Property="RibbonToggleButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="RibbonToggleButton.FocusedBorderBrush" Value="Transparent" />
    <Setter Property="RibbonToggleButton.CheckedBackground" Value="{StaticResource ġ}" />
    <Setter Property="RibbonToggleButton.CheckedBorderBrush" Value="Transparent" />
    <Setter Property="FrameworkElement.Margin" Value="0,-1,0,0" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
          <Border Name="OuterBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1"
                  CornerRadius="3" Background="{TemplateBinding Control.Background}">
            <Grid>
              <Border Name="InnerBorder" CornerRadius="3"
                      Background="{TemplateBinding RibbonToggleButton.MouseOverBackground}"
                      BorderBrush="{TemplateBinding RibbonToggleButton.MouseOverBorderBrush}" Opacity="0" />
              <Image Name="GroupImage" Margin="3,2"
                     Source="{TemplateBinding RibbonToggleButton.SmallImageSource}" Width="16"
                     Height="16" HorizontalAlignment="Center" VerticalAlignment="Center"
                     RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="GroupImage" Property="UIElement.Opacity" Value="0.5" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}"
                           Value="Transparent" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background,FallbackValue=#ff0000}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="InnerBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="#AA808080" />
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!-- ReSharper disable once InconsistentNaming -->
  <ControlTemplate x:Key="ĥ" TargetType="{x:Type local:MyRibbonGroup}">
    <Grid x:Name="MainGrid">
      <RibbonToggleButton x:Name="PART_ToggleButton" Margin="0,3,0,0" Style="{StaticResource Ģ}"
                          Content="{TemplateBinding HeaderedItemsControl.Header}"
                          ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                          ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                          ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                          Background="{TemplateBinding Control.Background}"
                          LargeImageSource="{TemplateBinding RibbonGroup.LargeImageSource}"
                          SmallImageSource="{TemplateBinding RibbonGroup.SmallImageSource}"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             PlacementTarget="{Binding ElementName=PART_ToggleButton}"
             IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent},NotifyOnTargetUpdated=True}">
        <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent"
                                        UIElement.SnapsToDevicePixels="true"
                                        CornerRadius="2" UIElement.Focusable="true" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled"
                                        FrameworkElement.FocusVisualStyle="{x:Null}">
          <Grid Name="PART_PopupGrid" Height="{TemplateBinding FrameworkElement.ActualHeight}"
                Margin="0,1.5,0,0">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" MinHeight="16" />
            </Grid.RowDefinitions>
            <Border Name="PopupBorder" Grid.RowSpan="2" Background="{TemplateBinding Control.Background}"
                    BorderThickness="1"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
            <Border Name="PART_HotBackground"
                    Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                    BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                    Grid.RowSpan="2" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true" />
            <Border Margin="2,3.5,2,0" Padding="3,0,3,0">
              <Grid>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="true"
                                Grid.IsSharedSizeScope="true" />
                <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false" />
              </Grid>
            </Border>
            <Grid Margin="2,0,2,1" Row="1">
              <ContentPresenter Name="PART_Header" TextElement.Foreground="{StaticResource Ë}" ContentSource="Header"
                                Margin="2,0,2,0" MaxHeight="15" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Grid>
        </classic:SystemDropShadowChrome>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
          <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="PopupBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                Property="Border.Background" />
      </MultiDataTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
        <Setter TargetName="PopupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="PopupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="Shdw" Property="classic:SystemDropShadowChrome.CornerRadius" Value="0" />
      </DataTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                Property="classic:SystemDropShadowChrome.Color" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="RibbonGroup.IsInQuickAccessToolBar" Value="true">
        <Setter TargetName="PART_PopupGrid" Value="{StaticResource ß}"
                Property="FrameworkElement.Height" />
        <Setter TargetName="PART_ToggleButton" Value="{StaticResource ģ}"
                Property="FrameworkElement.Style" />
        <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Margin" Value="0" />
      </Trigger>
      <Trigger Property="RibbonGroup.IsDropDownOpen" Value="true">
        <Setter TargetName="MainGrid" Property="ToolTipService.IsEnabled" Value="false" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ĥMy" TargetType="{x:Type local:CompilationGroup}">
    <Grid x:Name="MainGrid">
      <RibbonToggleButton x:Name="PART_ToggleButton" Margin="0,3,0,0" Style="{StaticResource Ģ}"
                          Content="{TemplateBinding HeaderedItemsControl.Header}"
                          ContentTemplate="{TemplateBinding HeaderedItemsControl.HeaderTemplate}"
                          ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                          ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                          Background="{TemplateBinding Control.Background}"
                          LargeImageSource="{TemplateBinding RibbonGroup.LargeImageSource}"
                          SmallImageSource="{TemplateBinding RibbonGroup.SmallImageSource}"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             PlacementTarget="{Binding ElementName=PART_ToggleButton}"
             IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent},NotifyOnTargetUpdated=True}">
        <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" Color="Transparent"
                                        UIElement.SnapsToDevicePixels="true"
                                        CornerRadius="2" UIElement.Focusable="true" KeyTipService.IsKeyTipScope="true"
                                        RenderOptions.ClearTypeHint="Enabled"
                                        FrameworkElement.FocusVisualStyle="{x:Null}">
          <Grid Name="PART_PopupGrid" Height="{TemplateBinding FrameworkElement.ActualHeight}"
                Margin="0,1.5,0,0">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" MinHeight="16" />
            </Grid.RowDefinitions>
            <Border Name="PopupBorder" Grid.RowSpan="2" Background="{TemplateBinding Control.Background}"
                    BorderThickness="1"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
            <Border Name="PART_HotBackground"
                    Background="{TemplateBinding RibbonGroup.MouseOverBackground}"
                    BorderBrush="{TemplateBinding RibbonGroup.MouseOverBorderBrush}" Opacity="0"
                    Grid.RowSpan="2" CornerRadius="2" BorderThickness="1" SnapsToDevicePixels="true" />
            <Border Margin="2,3.5,2,0" Padding="3,0,3,0">
              <Grid>
                <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="true"
                                Grid.IsSharedSizeScope="true" />
                <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="false" />
              </Grid>
            </Border>
            <Grid Margin="2,0,2,1" Row="1">
              <ContentPresenter Name="PART_Header" TextElement.Foreground="{StaticResource Ë}" ContentSource="Header"
                                Margin="2,0,2,0" MaxHeight="15" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
          </Grid>
        </classic:SystemDropShadowChrome>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
          <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="PopupBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                Property="Border.Background" />
      </MultiDataTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
        <Setter TargetName="PART_HotBackground" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
        <Setter TargetName="PopupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="PopupBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="Shdw" Property="classic:SystemDropShadowChrome.CornerRadius" Value="0" />
      </DataTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                Property="classic:SystemDropShadowChrome.Color" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
      </Trigger>
      <Trigger Property="RibbonGroup.IsInQuickAccessToolBar" Value="true">
        <Setter TargetName="PART_PopupGrid" Value="{StaticResource ß}"
                Property="FrameworkElement.Height" />
        <Setter TargetName="PART_ToggleButton" Value="{StaticResource ģ}"
                Property="FrameworkElement.Style" />
        <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Margin" Value="0" />
      </Trigger>
      <Trigger Property="RibbonGroup.IsDropDownOpen" Value="true">
        <Setter TargetName="MainGrid" Property="ToolTipService.IsEnabled" Value="false" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:MyRibbonGroup}">
    <Setter Property="FrameworkElement.Margin" Value="1" />
    <Setter Property="Control.Padding" Value="3,0,3,0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Template" Value="{StaticResource Ĥ}" />
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="RibbonGroup.MouseOverBackground" Value="{StaticResource Ğ}" />
    <Setter Property="RibbonGroup.MouseOverBorderBrush" Value="Transparent" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Style.Triggers>
      <Trigger Property="RibbonGroup.IsCollapsed" Value="true">
        <Setter Property="Control.Template" Value="{StaticResource ĥ}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:CompilationGroup}">
    <Setter Property="FrameworkElement.Margin" Value="1" />
    <Setter Property="Control.Padding" Value="3,0,3,0" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Template" Value="{StaticResource ĤMy}" />
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="RibbonGroup.MouseOverBackground" Value="{StaticResource Ğ}" />
    <Setter Property="RibbonGroup.MouseOverBorderBrush" Value="Transparent" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Style.Triggers>
      <Trigger Property="RibbonGroup.IsCollapsed" Value="true">
        <Setter Property="Control.Template" Value="{StaticResource ĥMy}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type local:MyRibbonTab}">
    <Setter Property="KeyTipService.IsKeyTipScope" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonTab}">
          <Grid x:Name="MainGrid" ClipToBounds="true"
                Visibility="{TemplateBinding IsSelected, Converter={StaticResource à}}">
            <Line x:Name="OuterLeftLine" StrokeThickness="2" X1="0" Y1="0" Y2="0"
                  Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                  X2="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabHeaderLeft}" />
            <Line x:Name="OuterRightLine" StrokeThickness="2" Y1="0" Y2="0"
                  Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                  X1="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabHeaderRight}"
                  X2="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}" />
            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource Ī}">
              <Grid RenderOptions.ClearTypeHint="Enabled">
                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left"
                        VerticalAlignment="Top"
                        Margin="0,1,0,0">
                  <Rectangle x:Name="OpaqueRect" Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}"
                             Fill="{Binding RelativeSource={RelativeSource Self}, Path=(RibbonControlService.Ribbon).Background}" />
                  <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ù}"
                             Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}" />
                  <Rectangle x:Name="InnerOverlayRect" Fill="{StaticResource Ø}"
                             Height="{Binding ElementName=ScrollViewer, Path=ActualHeight}"
                             Width="{Binding ElementName=ScrollViewer, Path=ActualWidth}" />
                </Canvas>
                <ItemsPresenter x:Name="ItemsPresenter" />
              </Grid>
            </ScrollViewer>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="ScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
              <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OpaqueRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
              <Setter TargetName="OverlayRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OverlayRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
              <Setter TargetName="InnerOverlayRect" Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="InnerOverlayRect" Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextualTabGroup}"
                           Value="{x:Null}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterLeftLine"
                      Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTab}}, Path=Ribbon.BorderBrush}"
                      Property="Shape.Stroke" />
              <Setter TargetName="OuterRightLine"
                      Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonTab}}, Path=Ribbon.BorderBrush}"
                      Property="Shape.Stroke" />
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="OuterLeftLine"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Shape.Stroke" />
              <Setter TargetName="OuterRightLine"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Shape.Stroke" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="Ô" TargetType="{x:Type Thumb}">
    <Setter Property="Height" Value="11" />
    <Setter Property="Cursor" Value="SizeNS" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="0,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                  Fill="{StaticResource Ĩ}">
              <Path.Data>
                <RectangleGeometry Rect="0,0,11,3" />
              </Path.Data>
            </Path>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="×" TargetType="{x:Type local:MyRibbonMenuButton}">
    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <RibbonToggleButton x:Name="PART_ToggleButton" Template="{StaticResource Ħ}"
                          RibbonTwoLineText.PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                          Label="{TemplateBinding RibbonMenuButton.Label}"
                          LargeImageSource="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                          SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                          ControlSizeDefinition="{TemplateBinding RibbonMenuButton.ControlSizeDefinition}"
                          BorderBrush="{TemplateBinding Control.BorderBrush}"
                          BorderThickness="{TemplateBinding Control.BorderThickness}"
                          Background="{TemplateBinding Control.Background}" CornerRadius="2"
                          MouseOverBorderBrush="{TemplateBinding RibbonMenuButton.MouseOverBorderBrush}"
                          MouseOverBackground="{TemplateBinding RibbonMenuButton.MouseOverBackground}"
                          CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                          CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                          FocusedBorderBrush="{TemplateBinding RibbonMenuButton.FocusedBorderBrush}"
                          FocusedBackground="{TemplateBinding RibbonMenuButton.FocusedBackground}"
                          HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                          Padding="{TemplateBinding Control.Padding}" ClickMode="Press" Style="{x:Null}"
                          FocusVisualStyle="{x:Null}"
                          IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, NotifyOnSourceUpdated=True,NotifyOnTargetUpdated=True}">
        <FrameworkElement.Resources>
          <Thickness Left="1" Top="1" Right="1" Bottom="2"
                     x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=LargeImageMargin}" />
        </FrameworkElement.Resources>
      </RibbonToggleButton>
      <Popup x:Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
             Placement="Bottom" Focusable="false"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
             IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}">
        <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent"
                                        KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled">
          <Border x:Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                  CornerRadius="2"
                  BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                  Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
            <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" BorderThickness="0"
                    CornerRadius="2">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" Margin="1"
                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                  <Grid RenderOptions.ClearTypeHint="Enabled">
                    <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left"
                            VerticalAlignment="Top">
                      <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=MenuBorder, Path=Background}" />
                      <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                 Height="{Binding ElementName=SubMenuInnerBorder, Path=ActualHeight}"
                                 Width="{Binding ElementName=SubMenuInnerBorder, Path=ActualWidth}"
                                 Fill="{Binding ElementName=SubMenuInnerBorder, Path=Background}" />
                    </Canvas>
                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" />
                  </Grid>
                </ScrollViewer>
                <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                        BorderThickness="0,1,0,0"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                  <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}" />
                </Border>
              </Grid>
            </Border>
          </Border>
        </classic:SystemDropShadowChrome>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                Property="Canvas.Top" />
        <Setter TargetName="OpaqueRect"
                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                Property="Canvas.Left" />
        <Setter TargetName="OverlayRect"
                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top" />
        <Setter TargetName="OverlayRect"
                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                Property="Canvas.Left" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}">
        <Setter TargetName="PART_ToggleButton" Property="FrameworkElement.Height" Value="Auto" />
      </DataTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
        <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Disabled" />
        <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Disabled" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                Property="FrameworkElement.Style" />
      </MultiTrigger>
      <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
        <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
        <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                Property="FrameworkElement.Style" />
      </MultiTrigger>
      <Trigger Property="ItemsControl.HasItems" Value="false">
        <Setter TargetName="PART_ToggleButton" Value="{x:Null}" Property="RibbonTwoLineText.PathData" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                Property="classic:SystemDropShadowChrome.Color" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent" />
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
        <Setter TargetName="PART_SubMenuScrollViewer"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="Control.Foreground" />
        <Setter TargetName="MenuBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="MenuBorder"
                Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="MenuBorder" Property="Border.CornerRadius" Value="0" />
        <Setter TargetName="ResizeControl"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="ResizeControl"
                Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0" />
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                Property="TextElement.Foreground" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <WindowChrome
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeGeneric}"
    x:Shared="false" />
  <WindowChrome
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeAeroLiteWithGlass}"
    x:Shared="false" NonClientFrameEdges="Bottom" />
  <WindowChrome
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeAeroLiteBasic}"
    x:Shared="false" />
  <WindowChrome
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeAeroWithGlass}"
    x:Shared="false" NonClientFrameEdges="Bottom" />
  <WindowChrome
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeAeroBasic}"
    x:Shared="false" CornerRadius="9,9,0,0" />
  <LinearGradientBrush
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=ActiveCaptionGradient}"
    x:Shared="false" EndPoint="0,0" StartPoint="1,0">
    <GradientStop Color="{DynamicResource {x:Static SystemColors.GradientActiveCaptionColorKey}}"
                  Offset="0" />
    <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush
    x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=InactiveCaptionGradient}"
    x:Shared="false" EndPoint="0,0" StartPoint="1,0">
    <GradientStop Color="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionColorKey}}"
                  Offset="0" />
    <GradientStop Color="{DynamicResource {x:Static SystemColors.InactiveCaptionColorKey}}"
                  Offset="1" />
  </LinearGradientBrush>
  <primitives:RibbonWindowSmallIconConverter x:Key="İ" />
  <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=RibbonWindowStyle}"
         TargetType="{x:Type RibbonWindow}">
    <Setter Property="WindowChrome.WindowChrome"
            Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type local:MyRibbon}, ResourceId=WindowChromeGeneric}}" />
    <Setter Property="Control.Background"
            Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
    <Setter Property="Control.BorderBrush" Value="{x:Null}" />
    <Setter Property="Control.BorderThickness" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RibbonWindow}">
          <FrameworkTemplate.Resources>
            <Style TargetType="{x:Type Button}" x:Key="ı">
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                      <Border x:Name="OuterTopLeftBorder" BorderThickness="1,1,0,0"
                              BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                      <Border x:Name="OuterBottomRightBorder" BorderThickness="0,0,1,1"
                              BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                      <Border x:Name="InnerTopLeftBorder" BorderThickness="1,1,0,0" Margin="1"
                              BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                      <Border x:Name="InnerBottomRightBorder" BorderThickness="0,0,1,1" Margin="1"
                              BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                      <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="ButtonBase.IsPressed" Value="true">
                        <Setter TargetName="OuterTopLeftBorder"
                                Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                                Property="Border.BorderBrush" />
                        <Setter TargetName="OuterBottomRightBorder"
                                Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                Property="Border.BorderBrush" />
                        <Setter TargetName="InnerTopLeftBorder"
                                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                                Property="Border.BorderBrush" />
                        <Setter TargetName="InnerBottomRightBorder"
                                Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                Property="Border.BorderBrush" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </FrameworkTemplate.Resources>
          <Grid>
            <Border Name="NonClientAreaBorder"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                    BorderThickness="{Binding Path=(SystemParameters.WindowNonClientFrameThickness)}">
              <Border Name="PART_ClientAreaBorder" Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" />
            </Border>
            <Border BorderThickness="1,1,0,0"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Border BorderThickness="0,0,1,1"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
            <Border Name="WindowHighlightBorder" BorderThickness="1,1,0,0" Margin="1"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            <Border Name="WindowShadowBorder" BorderThickness="0,0,1,1" Margin="1"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
            <Border Name="MiddleBorder" BorderThickness="1" Margin="2"
                    BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Grid Name="ButtonPanel" VerticalAlignment="Top"
                  Margin="{Binding Path=(WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                  Height="{Binding Path=(WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                  Background="{DynamicResource {ComponentResourceKey ResourceId=ActiveCaptionGradient, TypeInTargetAssembly={x:Type local:MyRibbon}}}">
              <Image Name="PART_Icon" WindowChrome.IsHitTestVisibleInChrome="true" Margin="3,0,0,0"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon, Converter={StaticResource İ}}"
                     Width="{Binding Path=(SystemParameters.SmallIconWidth)}"
                     Height="{Binding Path=(SystemParameters.SmallIconHeight)}" />
              <Grid HorizontalAlignment="Right" Height="{Binding Path=(SystemParameters.WindowCaptionButtonHeight)}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}" />
                  <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}" />
                  <ColumnDefinition Width="2" />
                  <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}" />
                </Grid.ColumnDefinitions>
                <Border Grid.Column="0" Margin="4,2,-4,3" Padding="0,0,2,0">
                  <Button Name="PART_MinimizeWindowButton" WindowChrome.IsHitTestVisibleInChrome="true"
                          Command="SystemCommands.MinimizeWindowCommand" Focusable="false"
                          Style="{StaticResource ı}">
                    <Path x:Name="MinimizeWindowButtonGlyph"
                          Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                          StrokeThickness="2">
                      <Path.Data>
                        <PathGeometry>
                          <PathFigure StartPoint="0,6">
                            <LineSegment Point="6,6" />
                          </PathFigure>
                        </PathGeometry>
                      </Path.Data>
                    </Path>
                  </Button>
                </Border>
                <Border Grid.Column="1" Margin="2,2,-2,3" Padding="0,0,2,0">
                  <Grid>
                    <Button Name="PART_RestoreWindowButton" WindowChrome.IsHitTestVisibleInChrome="true"
                            Command="SystemCommands.RestoreWindowCommand" Focusable="false"
                            Style="{StaticResource ı}" Visibility="Collapsed">
                      <Path x:Name="RestoreWindowButtonGlyph"
                            Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                            StrokeThickness="1">
                        <Path.Data>
                          <PathGeometry>
                            <PathFigure StartPoint="0,3" IsClosed="false">
                              <LineSegment Point="0,8" />
                              <LineSegment Point="5,8" />
                              <LineSegment Point="5,3" />
                              <LineSegment Point="0,3" />
                              <LineSegment Point="0,4" />
                              <LineSegment Point="5,4" />
                              <LineSegment Point="5,5" />
                              <LineSegment Point="7,5" />
                              <LineSegment Point="7,0" />
                              <LineSegment Point="2,0" />
                              <LineSegment Point="2,1" />
                              <LineSegment Point="7,1" />
                            </PathFigure>
                            <PathFigure StartPoint="2,1" IsClosed="false">
                              <LineSegment Point="2,3" />
                            </PathFigure>
                          </PathGeometry>
                        </Path.Data>
                      </Path>
                    </Button>
                    <Button Name="PART_MaximizeWindowButton" WindowChrome.IsHitTestVisibleInChrome="true"
                            Command="SystemCommands.MaximizeWindowCommand" Focusable="false"
                            Style="{StaticResource ı}">
                      <Path x:Name="MaximizeWindowButtonGlyph"
                            Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                            StrokeThickness="1">
                        <Path.Data>
                          <PathGeometry>
                            <PathFigure StartPoint="0,0" IsClosed="false">
                              <LineSegment Point="0,8" />
                              <LineSegment Point="8,8" />
                              <LineSegment Point="8,0" />
                              <LineSegment Point="0,0" />
                            </PathFigure>
                            <PathFigure StartPoint="0.5,1">
                              <LineSegment Point="7.5,1" />
                            </PathFigure>
                          </PathGeometry>
                        </Path.Data>
                      </Path>
                    </Button>
                  </Grid>
                </Border>
                <Border Grid.Column="3" Margin="0,2,0,3" Padding="0,0,2,0">
                  <Button Name="PART_CloseWindowButton" WindowChrome.IsHitTestVisibleInChrome="true"
                          Command="SystemCommands.CloseWindowCommand" Focusable="false"
                          Style="{StaticResource ı}">
                    <Path x:Name="CloseWindowButtonGlyph"
                          Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                          StrokeThickness="1.5">
                      <Path.Data>
                        <PathGeometry>
                          <PathFigure StartPoint="0,0">
                            <LineSegment Point="8,7" />
                          </PathFigure>
                          <PathFigure StartPoint="8,0">
                            <LineSegment Point="0,7" />
                          </PathFigure>
                        </PathGeometry>
                      </Path.Data>
                    </Path>
                  </Button>
                </Border>
              </Grid>
            </Grid>
            <Border
              BorderThickness="{Binding Path=(WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
              <Grid>
                <AdornerDecorator>
                  <ContentPresenter Name="PART_RootContentPresenter" />
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" WindowChrome.ResizeGripDirection="BottomRight"
                            HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed"
                            IsTabStop="false" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Window.IsActive" Value="false">
              <Setter TargetName="ButtonPanel"
                      Value="{DynamicResource {ComponentResourceKey ResourceId=InactiveCaptionGradient, TypeInTargetAssembly={x:Type local:MyRibbon}}}"
                      Property="Panel.Background" />
              <Setter TargetName="MiddleBorder"
                      Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}"
                      Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="Window.WindowState" Value="Maximized">
              <Setter TargetName="PART_MaximizeWindowButton" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="PART_RestoreWindowButton" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="PART_MinimizeWindowButton" Property="FrameworkElement.Width" Value="18" />
              <Setter TargetName="PART_MaximizeWindowButton" Property="FrameworkElement.Width" Value="18" />
              <Setter TargetName="PART_RestoreWindowButton" Property="FrameworkElement.Width" Value="18" />
              <Setter TargetName="PART_CloseWindowButton" Property="FrameworkElement.Width" Value="18" />
            </DataTrigger>
            <Trigger Value="{x:Null}" Property="Window.Icon">
              <Setter TargetName="PART_Icon" Property="Image.Source"
                      Value="/System.Windows.Controls.Ribbon;component/Images/DefaultSystemIcon.png" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="Window.WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="WindowResizeGrip" Property="UIElement.Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:MyRibbonMenuButton}">
    <Style.Resources>
      <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="Control.BorderBrush"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Control.Background"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}" />
        <Setter Property="Control.FontWeight" Value="Bold" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RibbonSeparator}">
              <Border x:Name="MainBorder" SnapsToDevicePixels="true" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                <Border x:Name="Overlay" Background="{StaticResource ì}">
                  <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}" />
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                  <Setter TargetName="Text"
                          Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                          Property="TextBlock.Foreground" />
                  <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                          Property="Border.BorderBrush" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                          Property="Border.Background" />
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                  <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>
                    <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                      <Border x:Name="SideBarOverlay" Background="{StaticResource ì}" />
                    </Border>
                    <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1"
                          Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                      <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent" />
                      <Setter TargetName="SideBarBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush" />
                      <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent" />
                      <Setter TargetName="Line"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Shape.Stroke" />
                    </DataTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="2,0,2,0" />
    <Setter Property="RibbonMenuButton.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonMenuButton.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="RibbonMenuButton.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonMenuButton.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonMenuButton.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="RibbonMenuButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Setter Property="RibbonTwoLineText.PathData" Value="{StaticResource Ð}" />
    <Setter Property="RibbonMenuButton.QuickAccessToolBarControlSizeDefinition">
      <Setter.Value>
        <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false" />
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template" Value="{StaticResource ×}" />
    <Style.Triggers>
      <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
        <Setter Property="ToolTipService.IsEnabled" Value="false" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:MyRibbonContextualTabGroupItemsControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonContextualTabGroupItemsControl}">
          <Border Background="{TemplateBinding Control.Background}">
            <ItemsPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <RadialGradientBrush x:Key="Đ" GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
    <GradientStop Offset="0" Color="#FFFFFFFF" />
    <GradientStop Offset="1" Color="#77FFFFFF" />
  </RadialGradientBrush>

  <Style TargetType="{x:Type local:MyRibbonContextualTabGroup}">
    <Setter Property="FrameworkElement.Height"
            Value="{Binding Path=(SystemParameters.WindowCaptionHeight)}" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.Focusable" Value="false" />
    <Setter Property="TextBlock.TextAlignment" Value="Center" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonContextualTabGroup}">
          <FrameworkTemplate.Resources>
            <DataTemplate DataType="{x:Type system:String}">
              <TextBlock Text="{TemplateBinding ContentPresenter.Content}" TextTrimming="CharacterEllipsis" />
            </DataTemplate>
          </FrameworkTemplate.Resources>
          <Border x:Name="OuterBorder" Padding="{TemplateBinding Control.Padding}"
                  Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,0,0"
                  RenderOptions.ClearTypeHint="Enabled">
            <Border x:Name="InnerBorder" Background="{StaticResource Đ}"
                    BorderBrush="{TemplateBinding Control.Background}" BorderThickness="1,1,1,2"
                    CornerRadius="2,2,0,0">
              <ContentPresenter ContentSource="Header" VerticalAlignment="Center" Margin="2,0,2,0" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="InnerBorder" Property="Border.BorderThickness" Value="2,2,2,3" />
              <Setter TargetName="InnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="È" Color="#DFE9F5" />
  <SolidColorBrush x:Key="É" Color="#B9C9DA" />
  <SolidColorBrush x:Key="Ü" Color="#FFC29B29" />
  <LinearGradientBrush x:Key="Þ" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFFDCA0" />
    <GradientStop Offset="0.18" Color="#FFFFD692" />
    <GradientStop Offset="0.39" Color="#FFFFC45D" />
    <GradientStop Offset="1" Color="#FFFFD178" />
  </LinearGradientBrush>
  <system:Double x:Key="á">94.0</system:Double>
  <LinearGradientBrush x:Key="Ā" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#E4F0FE" Offset="0" />
    <GradientStop Color="#E4F0FE" Offset="0.49" />
    <GradientStop Color="#CFDFF3" Offset="0.5" />
    <GradientStop Color="#E8F1FD" Offset="1.0" />
  </LinearGradientBrush>
  <Style x:Key="ā" TargetType="{x:Type RibbonToggleButton}">
    <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonToggleButton.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="RibbonToggleButton.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonToggleButton.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonToggleButton.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="RibbonToggleButton.CheckedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
    <Setter Property="RibbonToggleButton.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="RibbonToggleButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
          <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
            </Grid.ColumnDefinitions>
            <Border Name="OuterBorder" Grid.Column="1" Width="14"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
              <Border Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="1"
                      SnapsToDevicePixels="true">
                <Path Name="Arrow" Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource Ð}"
                      HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
                           Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ă" TargetType="{x:Type RibbonToggleButton}">
    <Setter Property="RibbonToggleButton.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonToggleButton.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="RibbonToggleButton.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonToggleButton.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonToggleButton.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="RibbonToggleButton.CheckedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
    <Setter Property="RibbonToggleButton.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="RibbonToggleButton.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ButtonBase.ClickMode" Value="Press" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RibbonToggleButton}">
          <Border Name="OuterBorder" Width="14" Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
            <Border Name="InnerBorder" Background="Transparent" BorderBrush="Transparent" BorderThickness="1"
                    SnapsToDevicePixels="true">
              <Path Name="Arrow" Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource Ð}"
                    HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Border>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="OuterBorder"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ć" Color="#90DEDEDE" />

  <ControlTemplate x:Key="Ą" TargetType="{x:Type local:MyRibbonComboBox}">
    <Border x:Name="MainBorder">
      <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition x:Name="OuterTextColumn" Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Image x:Name="Image" Source="{TemplateBinding RibbonMenuButton.LargeImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
               Grid.Column="1" Margin="1" Width="32" Height="32" />
        <Grid Name="Grid" Row="1" Column="1" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition x:Name="TextColumn" Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid x:Name="TwoLineTextPanel" VerticalAlignment="Center" HorizontalAlignment="Center">
            <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonMenuButton.Label}"
                               TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight"
                               Margin="2,0,2,0" />
            <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                       Visibility="Collapsed" />
          </Grid>
          <Border x:Name="Border" Grid.Column="1" Grid.ColumnSpan="2"
                  BorderThickness="{TemplateBinding Control.BorderThickness}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  Background="{TemplateBinding Control.Background}" Height="{StaticResource ą}" />
          <Grid Column="1" Height="{StaticResource ą}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBox Name="PART_EditableTextBox"
                     Width="{TemplateBinding RibbonComboBox.SelectionBoxWidth}"
                     Margin="{TemplateBinding Control.Padding}" Style="{StaticResource ÿ}"
                     IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" />
            <RibbonToggleButton Name="PART_ToggleButton" Grid.Column="1"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" Background="Transparent"
                                BorderBrush="Transparent" Style="{StaticResource ă}"
                                CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                IsTabStop="false"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </Grid>
        <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
               Placement="Bottom" Focusable="false"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               PlacementTarget="{Binding ElementName=Border}"
               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                          KeyTipService.IsKeyTipScope="true" RenderOptions.ClearTypeHint="Enabled"
                                          FrameworkElement.MinWidth="{Binding ElementName=Border, Path=ActualWidth}">
            <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                    CornerRadius="2"
                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
              <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ItemsPresenter x:Name="ItemsPresenter" Grid.Row="1" Grid.IsSharedSizeScope="true" Margin="1"
                                  KeyboardNavigation.TabNavigation="Cycle"
                                  KeyboardNavigation.DirectionalNavigation="Cycle"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                  <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed" Background="{StaticResource Ò}"
                          BorderThickness="0,1,0,0"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}" />
                  </Border>
                </Grid>
              </Border>
            </Border>
          </classic:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <DataTrigger Value="True"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}">
        <Setter TargetName="TextColumn" Property="ColumnDefinition.Width" Value="*" />
        <Setter TargetName="OuterTextColumn" Property="ColumnDefinition.Width" Value="*" />
        <Setter TargetName="PART_EditableTextBox" Property="FrameworkElement.Width" Value="Auto" />
        <Setter TargetName="Grid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
      </DataTrigger>
      <DataTrigger Value="Large"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Property="FrameworkElement.MinWidth" Value="44" />
        <Setter Property="FrameworkElement.Height" Value="66" />
        <Setter TargetName="Image" Property="FrameworkElement.Height" Value="32" />
        <Setter TargetName="Image" Property="FrameworkElement.Width" Value="32" />
        <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26" />
        <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true" />
      </DataTrigger>
      <DataTrigger Value="Small"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height" />
        <Setter TargetName="Image"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                Property="Image.Source" />
        <Setter TargetName="Image" Property="FrameworkElement.Height" Value="16" />
        <Setter TargetName="Image" Property="FrameworkElement.Width" Value="16" />
        <Setter TargetName="Image" Property="FrameworkElement.HorizontalAlignment" Value="Left" />
        <Setter TargetName="Image" Property="FrameworkElement.Margin" Value="2,0,1,0" />
        <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,1,0" />
        <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false" />
        <Setter TargetName="Image" Property="Grid.Column" Value="0" />
        <Setter TargetName="Image" Property="Grid.Row" Value="1" />
      </DataTrigger>
      <DataTrigger Value="Collapsed"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed" />
      </DataTrigger>
      <DataTrigger Value="False"
                   Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
        <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
          <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="False" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                Property="Border.Background" />
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="PART_ToggleButton"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                Property="Control.BorderBrush" />
        <Setter TargetName="PART_ToggleButton" Value="{StaticResource Ā}" Property="Control.Background" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
          <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                Property="Border.Background" />
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
          <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                Property="Border.Background" />
        <Setter TargetName="Border"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="PART_ToggleButton"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBorderBrush}"
                Property="Control.BorderBrush" />
        <Setter TargetName="PART_ToggleButton"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBackground}"
                Property="Control.Background" />
      </MultiDataTrigger>
      <Trigger Property="RibbonComboBox.ShowKeyboardCues" Value="true">
        <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5" />
        <Setter TargetName="Border" Value="{StaticResource ć}" Property="Border.Background" />
        <Setter TargetName="Border" Value="{StaticResource Ĉ}" Property="Border.BorderBrush" />
        <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
      </Trigger>
      <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
        <Setter TargetName="MainBorder"
                Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                Property="Border.BorderBrush" />
        <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
        <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                Property="FrameworkElement.Style" />
      </MultiTrigger>
      <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
        <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
        <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
          <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                Property="FrameworkElement.Style" />
      </MultiTrigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
        <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                Property="classic:SystemDropShadowChrome.Color" />
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent" />
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
        <Setter TargetName="MenuBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="MenuBorder"
                Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="ResizeControl"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="ResizeControl"
                Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                Property="Border.Background" />
        <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent" />
        <Setter Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                Property="Control.Background" />
        <Setter TargetName="Border"
                Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                Property="Border.BorderBrush" />
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent" />
        <Setter TargetName="FocusVisual"
                Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                Property="Shape.Stroke" />
        <Setter TargetName="MainBorder"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                Property="TextElement.Foreground" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainBorder"
                Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                Property="Border.BorderBrush" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
          <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="PART_ToggleButton"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                Property="Control.BorderBrush" />
        <Setter TargetName="PART_ToggleButton"
                Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                Property="Control.Background" />
        <Setter TargetName="PART_ToggleButton"
                Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                Property="Control.Foreground" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainBorder"
                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                Property="TextElement.Foreground" />
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:MyRibbonComboBox}">
    <Style.Resources>
      <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="Control.BorderBrush"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Control.Background"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}" />
        <Setter Property="Control.FontWeight" Value="Bold" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RibbonSeparator}">
              <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                <Border x:Name="Overlay" Background="{StaticResource ì}">
                  <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}" />
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                  <Setter TargetName="Text"
                          Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                          Property="TextBlock.Foreground" />
                  <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                          Property="Border.BorderBrush" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                          Property="Border.Background" />
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type RibbonSeparator}">
                  <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="1">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>
                    <Border x:Name="SideBarBorder" BorderThickness="0,0,1,0" Margin="0,-1,0,-1"
                            Background="{TemplateBinding Control.Background}"
                            BorderBrush="{TemplateBinding Control.BorderBrush}">
                      <Border x:Name="SideBarOverlay" Background="{StaticResource ì}" />
                    </Border>
                    <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" Margin="2,0,0,0" X1="0" Y1="0" X2="1"
                          Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                      <Setter TargetName="SideBarBorder" Property="Border.Background" Value="Transparent" />
                      <Setter TargetName="SideBarBorder"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Border.BorderBrush" />
                      <Setter TargetName="SideBarOverlay" Property="Border.Background" Value="Transparent" />
                      <Setter TargetName="Line"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Shape.Stroke" />
                    </DataTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="Control.Background" Value="{StaticResource ĉ}" />
    <Setter Property="Control.BorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Padding" Value="2,1,2,1" />
    <Setter Property="UIElement.AllowDrop" Value="true" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="RibbonComboBox.SelectionBoxWidth" Value="80" />
    <Setter Property="RibbonMenuButton.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="RibbonMenuButton.MouseOverBackground" Value="White" />
    <Setter Property="RibbonMenuButton.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="RibbonMenuButton.FocusedBackground" Value="White" />
    <Setter Property="RibbonMenuButton.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonMenuButton.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Setter Property="RibbonMenuButton.QuickAccessToolBarControlSizeDefinition">
      <Setter.Value>
        <RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="false" />
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonComboBox}">
          <Border x:Name="MainBorder">
            <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition x:Name="OuterTextColumn" Width="Auto" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Image x:Name="Image" Source="{TemplateBinding RibbonMenuButton.LargeImageSource}"
                     RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                     HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Grid.Row="0"
                     Grid.Column="1" Margin="1" Width="32" Height="32" />
              <Grid Name="Grid" Row="1" Column="1" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="1">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition x:Name="TextColumn" Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid x:Name="TwoLineTextPanel" VerticalAlignment="Center" HorizontalAlignment="Center">
                  <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonMenuButton.Label}"
                                     TextAlignment="Center" LineHeight="13px" LineStackingStrategy="BlockLineHeight"
                                     Margin="2,0,2,0" />
                  <Rectangle x:Name="FocusVisual" Margin="1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2"
                             Visibility="Collapsed" />
                </Grid>
                <Border x:Name="Border" Grid.Column="1" Grid.ColumnSpan="2"
                        Background="{TemplateBinding Control.Background}"
                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Height="{StaticResource ą}" />
                <Grid Column="1" Height="{StaticResource ą}" IsSharedSizeScope="true">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
                  </Grid.ColumnDefinitions>
                  <Grid IsHitTestVisible="false" Margin="{TemplateBinding Control.Padding}"
                        Width="{TemplateBinding RibbonComboBox.SelectionBoxWidth}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                    <ContentPresenter Name="PART_ContentHost"
                                      Content="{TemplateBinding RibbonComboBox.SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding RibbonComboBox.SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding RibbonComboBox.SelectionBoxItemTemplateSelector}"
                                      ContentStringFormat="{TemplateBinding RibbonComboBox.SelectionBoxItemStringFormat}"
                                      Margin="2,0,2,0" />
                  </Grid>
                  <RibbonToggleButton Name="PART_ToggleButton" Grid.ColumnSpan="2"
                                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                                      Background="Transparent"
                                      BorderBrush="Transparent" Style="{StaticResource ā}"
                                      CheckedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                      CheckedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                      PressedBackground="{TemplateBinding RibbonMenuButton.PressedBackground}"
                                      PressedBorderBrush="{TemplateBinding RibbonMenuButton.PressedBorderBrush}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                </Grid>
              </Grid>
              <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="-1" AllowsTransparency="true"
                     Placement="Bottom" Focusable="false"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     PlacementTarget="{Binding ElementName=Border}"
                     IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome FrameworkElement.Name="Shadow" Color="Transparent"
                                                KeyTipService.IsKeyTipScope="true"
                                                RenderOptions.ClearTypeHint="Enabled"
                                                FrameworkElement.MinWidth="{Binding ElementName=Border, Path=ActualWidth}">
                  <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                          CornerRadius="2"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                          Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                    <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                      <Grid>
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition />
                          <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ItemsPresenter x:Name="ItemsPresenter" Grid.Row="1" Grid.IsSharedSizeScope="true" Margin="1"
                                        KeyboardNavigation.TabNavigation="Cycle"
                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed"
                                Background="{StaticResource Ò}"
                                BorderThickness="0,1,0,0"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                          <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}" />
                        </Border>
                      </Grid>
                    </Border>
                  </Border>
                </classic:SystemDropShadowChrome>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Value="True"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}">
              <Setter TargetName="TextColumn" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="OuterTextColumn" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="PART_ContentHost" Property="FrameworkElement.Width" Value="Auto" />
              <Setter TargetName="PART_ContentHost" Property="FrameworkElement.HorizontalAlignment"
                      Value="Stretch" />
              <Setter TargetName="Grid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
            </DataTrigger>
            <DataTrigger Value="Large"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
              <Setter Property="FrameworkElement.MinWidth" Value="44" />
              <Setter Property="FrameworkElement.Height" Value="66" />
              <Setter TargetName="Image" Property="FrameworkElement.Height" Value="32" />
              <Setter TargetName="Image" Property="FrameworkElement.Width" Value="32" />
              <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26" />
              <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true" />
            </DataTrigger>
            <DataTrigger Value="Small"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
              <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height" />
              <Setter TargetName="Image"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                      Property="Image.Source" />
              <Setter TargetName="Image" Property="FrameworkElement.Height" Value="16" />
              <Setter TargetName="Image" Property="FrameworkElement.Width" Value="16" />
              <Setter TargetName="Image" Property="FrameworkElement.HorizontalAlignment" Value="Left" />
              <Setter TargetName="Image" Property="FrameworkElement.Margin" Value="2,0,1,0" />
              <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="2,0,1,0" />
              <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="false" />
              <Setter TargetName="Image" Property="Grid.Column" Value="0" />
              <Setter TargetName="Image" Property="Grid.Row" Value="1" />
            </DataTrigger>
            <DataTrigger Value="Collapsed"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
              <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Value="False"
                         Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
              <Setter TargetName="TwoLineTextPanel" Property="UIElement.Visibility" Value="Collapsed" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                      Property="Border.Background" />
              <Setter TargetName="PART_ToggleButton"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Control.BorderBrush" />
              <Setter TargetName="PART_ToggleButton" Value="{StaticResource Ā}" Property="Control.Background" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False" />
                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <Trigger Property="RibbonComboBox.ShowKeyboardCues" Value="true">
              <Setter TargetName="FocusVisual" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="Border" Value="{StaticResource ć}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{StaticResource Ĉ}" Property="Border.BorderBrush" />
              <Setter TargetName="MainBorder" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
            </Trigger>
            <Trigger Property="RibbonMenuButton.IsInControlGroup" Value="true">
              <Setter TargetName="MainBorder"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MainBorder" Property="Border.BorderThickness" Value="0,0,1,0" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
              <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
              <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
              <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                      Property="classic:SystemDropShadowChrome.Color" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent" />
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
              <Setter TargetName="MenuBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MenuBorder"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                      Property="Control.Background" />
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="FocusVisual"
                      Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                      Property="Shape.Stroke" />
              <Setter TargetName="MainBorder"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                      Property="Border.BorderBrush" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainBorder"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
        <Setter Property="ToolTipService.IsEnabled" Value="false" />
      </Trigger>
      <Trigger Property="RibbonComboBox.IsEditable" Value="true">
        <Setter Property="Control.Template" Value="{StaticResource Ą}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type local:MyRibbonApplicationMenu}">
    <Style.Resources>
      <Style TargetType="{x:Type RibbonSeparator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="Control.BorderBrush"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonApplicationMenu}}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Control.Background"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonApplicationMenu}}, Path=Ribbon.Background}" />
        <Setter Property="Control.FontWeight" Value="Bold" />
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RibbonSeparator}">
              <Border x:Name="MainBorder" BorderThickness="0,1,0,1"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      Background="{TemplateBinding Control.Background}">
                <Border x:Name="Overlay" Background="{StaticResource ì}">
                  <TextBlock x:Name="Text" Margin="2,1,2,1" Text="{TemplateBinding RibbonSeparator.Label}" />
                </Border>
              </Border>
              <ControlTemplate.Triggers>
                <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                  <Setter TargetName="Text"
                          Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                          Property="TextBlock.Foreground" />
                  <Setter TargetName="Overlay" Property="Border.Background" Value="Transparent" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                          Property="Border.BorderBrush" />
                  <Setter TargetName="MainBorder"
                          Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                          Property="Border.Background" />
                </DataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="RibbonSeparator.Label" Value="{x:Null}">
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MyRibbonSeparator}">
                  <Grid x:Name="Grid" Margin="1" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                      <ColumnDefinition Width="*" MinWidth="44" />
                      <ColumnDefinition Width="22" />
                    </Grid.ColumnDefinitions>
                    <Line x:Name="Line" Grid.Column="1" Grid.ColumnSpan="2" X1="0" Y1="0" X2="1" Y2="0"
                          Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="1" Stretch="Fill" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                      <Setter TargetName="Line"
                              Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                              Property="Shape.Stroke" />
                      <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="0" />
                    </DataTrigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
    <Setter Property="Control.BorderBrush" Value="{StaticResource â}" />
    <Setter Property="Control.Background" Value="{StaticResource â}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FrameworkElement.Height" Value="23" />
    <Setter Property="FrameworkElement.Width" Value="56" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonApplicationMenu}">
          <Grid x:Name="OuterGrid" Focusable="false" SnapsToDevicePixels="true">
            <RibbonToggleButton x:Name="PART_ToggleButton" BorderBrush="{TemplateBinding Control.BorderBrush}"
                                Background="{TemplateBinding Control.Background}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                Style="{StaticResource ê}"
                                FocusVisualStyle="{TemplateBinding FrameworkElement.FocusVisualStyle}"
                                ToolTipTitle="{TemplateBinding RibbonMenuButton.ToolTipTitle}"
                                ToolTipDescription="{TemplateBinding RibbonMenuButton.ToolTipDescription}"
                                ToolTipImageSource="{TemplateBinding RibbonMenuButton.ToolTipImageSource}"
                                ToolTipFooterTitle="{TemplateBinding RibbonMenuButton.ToolTipFooterTitle}"
                                ToolTipFooterDescription="{TemplateBinding RibbonMenuButton.ToolTipFooterDescription}"
                                ToolTipFooterImageSource="{TemplateBinding RibbonMenuButton.ToolTipFooterImageSource}"
                                SmallImageSource="{TemplateBinding RibbonMenuButton.SmallImageSource}"
                                Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}" />
            <Border x:Name="CenterBorder" Height="1" Margin="-1,-1,0,0" HorizontalAlignment="Stretch"
                    VerticalAlignment="Top" />
            <Popup x:Name="PART_Popup" AllowsTransparency="true"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="true"
                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                   PlacementTarget="{Binding ElementName=CenterBorder}">
              <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                              RenderOptions.ClearTypeHint="Enabled">
                <Grid>
                  <Border x:Name="PopupBorder" BorderThickness="1" CornerRadius="2"
                          BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                          Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.Background}">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="24" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Border x:Name="HeaderBorder" Background="Transparent" BorderThickness="0,0,0,1"
                              CornerRadius="2,2,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                      <Border x:Name="HeaderOverlayBorder" BorderBrush="{StaticResource ë}"
                              Background="{StaticResource å}" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0" />
                      <Grid Row="1">
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" />
                          <ColumnDefinition Width="2" />
                          <ColumnDefinition Width="300" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="MainPaneBorder" Background="{StaticResource í}">
                          <Grid>
                            <Grid.RowDefinitions>
                              <RowDefinition Height="Auto" />
                              <RowDefinition />
                              <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" Grid.Row="1" CanContentScroll="true"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                              <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                  <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                             Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                             Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                             Fill="{Binding ElementName=MainPaneBorder, Path=Background}" />
                                  <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                             Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}"
                                             Width="{Binding ElementName=MainPaneBorder, Path=ActualWidth}"
                                             Fill="{Binding ElementName=MainPaneBorder, Path=Background}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" Grid.IsSharedSizeScope="true" />
                              </Grid>
                            </ScrollViewer>
                            <Border Name="ResizeControl" Grid.Row="2" Visibility="Collapsed"
                                    Background="{StaticResource Ò}"
                                    BorderThickness="0,1,0,0"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                              <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}" />
                            </Border>
                          </Grid>
                        </Border>
                        <Border x:Name="PART_SubmenuPlaceholder" Grid.Column="2" Background="{StaticResource ë}"
                                Height="{Binding ElementName=MainPaneBorder, Path=ActualHeight}">
                          <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter"
                                            ContentSource="AuxiliaryPaneContent"
                                            ContentTemplate="{TemplateBinding RibbonApplicationMenu.AuxiliaryPaneContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding RibbonApplicationMenu.AuxiliaryPaneContentTemplateSelector}" />
                        </Border>
                        <Border x:Name="VerticalBorder" Grid.Column="1" HorizontalAlignment="Left" Background="White"
                                Width="2"
                                BorderThickness="1,0,0,0"
                                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                        <Border x:Name="VerticalOverlayBorder" Grid.Column="1" HorizontalAlignment="Left"
                                Background="Transparent"
                                Width="2" BorderThickness="1,0,0,0" BorderBrush="{StaticResource ë}" />
                      </Grid>
                      <Border x:Name="FooterBorder" Grid.Row="2" Background="Transparent" BorderThickness="0,1,0,0"
                              CornerRadius="0,0,2,2"
                              BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type RibbonMenuButton}}, Path=Ribbon.BorderBrush}">
                        <Border x:Name="FooterBackgroundOverlayBorder" BorderBrush="Transparent"
                                Background="{StaticResource ç}" CornerRadius="0,0,2,2">
                          <ContentPresenter x:Name="PART_FooterPaneContentPresenter" Margin="2" MinHeight="12"
                                            ContentSource="FooterPaneContent"
                                            ContentTemplate="{TemplateBinding RibbonApplicationMenu.FooterPaneContentTemplate}"
                                            ContentTemplateSelector="{TemplateBinding RibbonApplicationMenu.FooterPaneContentTemplateSelector}" />
                        </Border>
                      </Border>
                      <Border x:Name="FooterOverlayBorder" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                              BorderBrush="{StaticResource ë}" Background="Transparent" BorderThickness="0,1,0,0"
                              CornerRadius="0,0,2,2" />
                    </Grid>
                  </Border>
                  <Canvas>
                    <RibbonToggleButton x:Name="PART_PopupToggleButton" Canvas.Top="-24" Canvas.Left="3"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Style="{StaticResource ê}" Focusable="false"
                                        AutomationProperties.Name="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
                                        IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                        Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                        Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" />
                  </Canvas>
                </Grid>
              </classic:SystemDropShadowChrome>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
              <Setter TargetName="OpaqueRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OpaqueRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
              <Setter TargetName="OverlayRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top" />
              <Setter TargetName="OverlayRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
            </Trigger>
            <Trigger Property="RibbonMenuButton.HasGallery" Value="true">
              <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                      Value="Disabled" />
              <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                      Value="Disabled" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="false" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <Trigger Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true">
              <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
              <Setter TargetName="ResizeControl" Property="Border.BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuButton.IsDropDownPositionedAbove" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuButton.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Õ}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
              <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                      Property="classic:SystemDropShadowChrome.Color" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
              <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent" />
              <Setter TargetName="OuterGrid"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="PopupBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PopupBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="PopupBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="HeaderBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="HeaderBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="HeaderOverlayBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="HeaderOverlayBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="HeaderOverlayBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="MainPaneBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="PART_SubmenuPlaceholder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="VerticalBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="VerticalBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="VerticalOverlayBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="FooterBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="FooterBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="FooterOverlayBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="FooterOverlayBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="FooterBackgroundOverlayBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="FooterBackgroundOverlayBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="RibbonMenuButton.IsDropDownOpen" Value="true">
        <Setter Property="ToolTipService.IsEnabled" Value="false" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type local:MyRibbon}">
    <Style.Resources>
      <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">Fade</PopupAnimation>
    </Style.Resources>
    <Setter Property="wpf:AttachedProperties.Model" Value="{Binding}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Background" Value="{StaticResource È}" />
    <Setter Property="Control.BorderBrush" Value="{StaticResource É}" />
    <Setter Property="Ribbon.MouseOverBorderBrush" Value="{StaticResource Ú}" />
    <Setter Property="Ribbon.MouseOverBackground" Value="{StaticResource Û}" />
    <Setter Property="Ribbon.PressedBorderBrush" Value="{StaticResource Ü}" />
    <Setter Property="Ribbon.PressedBackground" Value="{StaticResource Ý}" />
    <Setter Property="Ribbon.CheckedBorderBrush" Value="{StaticResource Ü}" />
    <Setter Property="Ribbon.CheckedBackground" Value="{StaticResource Þ}" />
    <Setter Property="Ribbon.FocusedBorderBrush" Value="{StaticResource Ú}" />
    <Setter Property="Ribbon.FocusedBackground" Value="{StaticResource Û}" />
    <Setter Property="Control.FontSize"
            Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
    <Setter Property="Control.FontStyle"
            Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
    <Setter Property="Control.FontWeight"
            Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
    <Setter Property="Control.FontFamily"
            Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
    <Setter Property="Control.Foreground"
            Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbon}">
          <Grid SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Name="BackgroundBorder" Grid.Row="1" Grid.ColumnSpan="3" Grid.RowSpan="3"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" />
            <Border Grid.ColumnSpan="3" Grid.Row="1">
              <Popup x:Name="PART_ITEMSPRESENTERPOPUP" AllowsTransparency="true"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <classic:SystemDropShadowChrome FrameworkElement.Name="Shdw" UIElement.Focusable="true"
                                                Color="Transparent"
                                                FrameworkElement.Margin="0,0,5,5" RenderOptions.ClearTypeHint="Enabled"
                                                FrameworkElement.FocusVisualStyle="{x:Null}">
                  <Border Name="CollapsedPopupBackgroundBorder" Background="{TemplateBinding Control.Background}">
                    <ContentControl x:Name="popupItemsPresenterHost" Margin="0,1,0,0" Focusable="false"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                  </Border>
                </classic:SystemDropShadowChrome>
              </Popup>
            </Border>
            <ContentControl x:Name="mainItemsPresenterHost" Grid.ColumnSpan="3" Grid.Row="2" Focusable="false">
              <Border x:Name="groupsBorder" Background="{StaticResource Ù}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,0,1,1"
                      Height="{StaticResource ß}" SnapsToDevicePixels="true">
                <Border BorderThickness="0,0,0,1" Margin="0,0,0,1" BorderBrush="{StaticResource Ø}"
                        SnapsToDevicePixels="true">
                  <ItemsPresenter Name="ItemsPresenter" />
                </Border>
              </Border>
            </ContentControl>
            <Border x:Name="QatBottomHost" Grid.Row="3" Grid.ColumnSpan="3"
                    BorderBrush="{TemplateBinding Control.BorderBrush}">
              <ContentPresenter x:Name="QatBottomHostContentPresenter" HorizontalAlignment="Left"
                                VerticalAlignment="Center"
                                IsHitTestVisible="true" />
            </Border>
            <Border Name="titleBarBackground" Grid.ColumnSpan="3" Background="{StaticResource Ù}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="0,0,0,1"
                    Visibility="Collapsed" />
            <DockPanel Grid.Column="0" Grid.ColumnSpan="3" LastChildFill="true"
                       Height="{Binding Path=(SystemParameters.WindowCaptionHeight)}">
              <ContentControl x:Name="windowButtonPlaceHolder" IsHitTestVisible="false" DockPanel.Dock="Right"
                              Focusable="false"
                              Margin="3,0,0,0" Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}"
                              Visibility="{TemplateBinding IsHostedInRibbonWindow, Converter={StaticResource à}}" />
              <ContentControl x:Name="windowIconPadding" Margin="0,0,3,0" IsHitTestVisible="false"
                              DockPanel.Dock="Left"
                              Focusable="false" Width="{Binding Path=(SystemParameters.SmallIconWidth)}" />
              <primitives:RibbonTitlePanel x:Name="PART_TitlePanel">
                <Grid x:Name="QatTopHost">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Border x:Name="QatTopHostLeftBorder" Grid.Column="0" Margin="8,2,0,2" Width="3"
                          Background="#77222222"
                          BorderBrush="#66CCCCCC" BorderThickness="1,0,1,0.9" CornerRadius="0,0,2,2" />
                  <ContentPresenter x:Name="QatTopHostContentPresenter" Grid.Column="1"
                                    Content="{TemplateBinding Ribbon.QuickAccessToolBar}" IsHitTestVisible="true" />
                  <Border x:Name="QatTopHostRightBorder" Grid.Column="2" Margin="0,2,1,2" Width="3"
                          Background="#77222222"
                          BorderBrush="#66CCCCCC" BorderThickness="1,0,1,0.9" CornerRadius="0,0,2,2" />
                </Grid>
                <ContentPresenter x:Name="PART_TitleHost" ContentSource="Title"
                                  ContentTemplate="{TemplateBinding Ribbon.TitleTemplate}"
                                  TextBlock.FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"
                                  TextBlock.FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}"
                                  TextBlock.FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}"
                                  TextElement.Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="3,0"
                                  MinWidth="75" IsHitTestVisible="false"
                                  MinHeight="{Binding Path=(SystemParameters.WindowCaptionHeight)}">
                  <FrameworkElement.Resources>
                    <DataTemplate DataType="{x:Type system:String}">
                      <TextBlock x:Name="titleTextBlock" Margin="0,-2,0,0"
                                 Text="{TemplateBinding ContentPresenter.Content}"
                                 TextTrimming="CharacterEllipsis"
                                 HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}" />
                      <DataTemplate.Triggers>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="True" />
                            <Condition
                              Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Ribbon}, Path=IsHostedInRibbonWindow}"
                              Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter TargetName="titleTextBlock" Property="UIElement.Effect">
                            <Setter.Value>
                              <DropShadowEffect Color="White" BlurRadius="5.0" ShadowDepth="0" />
                            </Setter.Value>
                          </Setter>
                        </MultiDataTrigger>
                        <DataTrigger Value="False" Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}">
                          <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0" />
                          <Setter TargetName="titleTextBlock" Property="FrameworkElement.VerticalAlignment"
                                  Value="Center" />
                        </DataTrigger>
                        <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
                          <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0,1,0,0" />
                        </DataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="AeroLite" />
                            <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False" />
                            <Condition
                              Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Ribbon}, Path=IsHostedInRibbonWindow}"
                              Value="True" />
                            <Condition
                              Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=WindowState}"
                              Value="Normal" />
                          </MultiDataTrigger.Conditions>
                          <Setter TargetName="titleTextBlock" Property="FrameworkElement.Margin" Value="0,0,0,7" />
                        </MultiDataTrigger>
                      </DataTemplate.Triggers>
                    </DataTemplate>
                  </FrameworkElement.Resources>
                </ContentPresenter>
                <local:MyRibbonContextualTabGroupItemsControl x:Name="PART_ContextualTabGroupItemsControl"
                                                              IsHitTestVisible="true"
                                                              WindowChrome.IsHitTestVisibleInChrome="true"
                                                              HorizontalAlignment="Center" />
              </primitives:RibbonTitlePanel>
            </DockPanel>
            <ContentPresenter x:Name="applicationMenu" Grid.Row="1"
                              Content="{TemplateBinding Ribbon.ApplicationMenu}" VerticalAlignment="Top" />
            <local:MyRibbonTabHeaderItemsControl x:Name="TabHeaderItemsControl" VerticalAlignment="Top"
                                                 HorizontalAlignment="Left" Grid.Row="1"
                                                 Grid.Column="1" Margin="1,1,1,0" />
            <ContentPresenter x:Name="PART_HelpPane" ContentSource="HelpPaneContent"
                              ContentTemplate="{TemplateBinding Ribbon.HelpPaneContentTemplate}" Grid.Column="2"
                              Grid.Row="1" HorizontalAlignment="Right" VerticalAlignment="Top" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Ribbon.IsCollapsed" Value="true">
              <Setter TargetName="applicationMenu" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="mainItemsPresenterHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="TabHeaderItemsControl" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="PART_HelpPane" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ContextualTabGroupItemsControl" Property="UIElement.Visibility"
                      Value="Collapsed" />
              <Setter TargetName="PART_TitleHost" Property="FrameworkElement.MinWidth" Value="0" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Ribbon.IsCollapsed" Value="true" />
                <Condition Property="Ribbon.IsHostedInRibbonWindow" Value="false" />
              </MultiTrigger.Conditions>
              <Setter Property="UIElement.Visibility" Value="Collapsed" />
            </MultiTrigger>
            <Trigger Property="Ribbon.ShowQuickAccessToolBarOnTop" Value="false">
              <Setter TargetName="QatTopHostContentPresenter" Value="{x:Null}" Property="ContentPresenter.Content" />
              <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatBottomHostContentPresenter"
                      Value="{Binding Path=QuickAccessToolBar, RelativeSource={RelativeSource TemplatedParent}}"
                      Property="ContentPresenter.Content" />
              <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.HasItems}"
                           Value="False" />
                <Condition
                  Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.CustomizeMenuButton}"
                  Value="{x:Null}" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="QatTopHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatBottomHost" Property="UIElement.Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <Trigger Property="Ribbon.IsMinimized" Value="true">
              <Setter TargetName="mainItemsPresenterHost" Value="{x:Null}" Property="ContentControl.Content" />
              <Setter TargetName="mainItemsPresenterHost" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="popupItemsPresenterHost" Value="{Binding ElementName=groupsBorder}"
                      Property="ContentControl.Content" />
              <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0,0,0,1" />
            </Trigger>
            <Trigger Property="Ribbon.WindowIconVisibility" Value="Collapsed">
              <Setter TargetName="windowIconPadding" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatTopHostLeftBorder" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Ribbon.IsMinimized" Value="true" />
                <Condition Property="Ribbon.ShowQuickAccessToolBarOnTop" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="QatBottomHost" Property="Border.BorderThickness" Value="0,1,0,0" />
            </MultiTrigger>
            <Trigger Property="Ribbon.IsHostedInRibbonWindow" Value="false">
              <Setter TargetName="BackgroundBorder" Property="Grid.Row" Value="0" />
              <Setter TargetName="BackgroundBorder" Property="Grid.RowSpan" Value="4" />
              <Setter TargetName="titleBarBackground" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="windowIconPadding" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="QatTopHostLeftBorder" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Ribbon.IsDropDownOpen" Value="true">
              <Setter TargetName="BackgroundBorder" Property="Border.BorderThickness" Value="0" />
            </Trigger>
            <Trigger SourceName="PART_ITEMSPRESENTERPOPUP" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shdw" Value="{StaticResource Ö}"
                      Property="classic:SystemDropShadowChrome.Color" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition
                  Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=IsActive}"
                  Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False" />
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHostedInRibbonWindow}"
                           Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_TitleHost"
                      Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}"
                      Property="TextElement.Foreground" />
            </MultiDataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="BackgroundBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="BackgroundBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="groupsBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="groupsBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="groupsBorder" Value="{StaticResource á}"
                      Property="FrameworkElement.Height" />
              <Setter TargetName="QatBottomHost"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="titleBarBackground" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="titleBarBackground"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="CollapsedPopupBackgroundBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="PART_ITEMSPRESENTERPOPUP" Property="Popup.PopupAnimation" Value="None" />
              <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Margin" Value="10,1,2,2" />
              <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Width" Value="1" />
              <Setter TargetName="QatTopHostLeftBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="QatTopHostLeftBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="QatTopHostLeftBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Margin" Value="0,1,2,2" />
              <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Width" Value="1" />
              <Setter TargetName="QatTopHostRightBorder" Property="Border.BorderThickness" Value="0" />
              <Setter TargetName="QatTopHostRightBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="QatTopHostRightBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                      Property="Border.Background" />
            </DataTrigger>
            <DataTrigger Value="Aero" Binding="{Binding Path=(SystemParameters.UxThemeName)}">
              <Setter TargetName="QatTopHost" Property="FrameworkElement.Margin" Value="0,-3,0,0" />
              <Setter TargetName="QatTopHostLeftBorder" Property="FrameworkElement.Margin" Value="3,3,0,5" />
              <Setter TargetName="QatTopHostLeftBorder" Property="Border.Background" Value="#81444444" />
              <Setter TargetName="QatTopHostLeftBorder" Property="Border.BorderBrush" Value="#69EEEEEE" />
              <Setter TargetName="QatTopHostRightBorder" Property="FrameworkElement.Margin" Value="0,3,1,5" />
              <Setter TargetName="QatTopHostRightBorder" Property="Border.Background" Value="#81444444" />
              <Setter TargetName="QatTopHostRightBorder" Property="Border.BorderBrush" Value="#69EEEEEE" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="Aero" />
                <Condition
                  Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RibbonWindow}, Path=WindowState}"
                  Value="Maximized" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="QatTopHost" Property="FrameworkElement.Margin" Value="0" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:CustomControl1}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type local:CustomControl1}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <TreeView Grid.Column="0" Grid.Row="0"
                        Grid.RowSpan="3" x:Name="treeView"
                        ItemsSource="{TemplateBinding RootItemsSource}">
                <TreeView.Resources>
                  <HierarchicalDataTemplate
                    DataType="{x:Type syntax1:AppTypeInfo}"
                    ItemsSource="{Binding SubTypeInfos}">
                    <Grid HorizontalAlignment="Stretch"
                          ShowGridLines="True">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <TextBlock Text="{Binding Title}">
                        <TextBlock.ToolTip>
                          <ContentControl
                            Content="{Binding DocInfo}" />
                        </TextBlock.ToolTip>
                      </TextBlock>
                      <WrapPanel
                        Grid.ZIndex="100" Grid.Column="0"
                        Grid.Row="0"
                        HorizontalAlignment="Right"
                        Margin="10,0,10,0" />
                    </Grid>
                  </HierarchicalDataTemplate>
                </TreeView.Resources>
              </TreeView>
              <StackPanel Orientation="Horizontal"
                          Grid.Row="0"
                          Grid.Column="1" />
              <ItemsControl Grid.Row="1" Grid.Column="1"
                            Margin="10"
                            x:Name="factoryMethods"
                            ItemsSource="{TemplateBinding FactoryMethods}">
                <ItemsControl.Template>
                  <ControlTemplate
                    TargetType="ItemsControl">
                    <ScrollViewer>
                      <ItemsPresenter />
                    </ScrollViewer>
                  </ControlTemplate>
                </ItemsControl.Template>
              </ItemsControl>
              <ListBox Grid.Row="2" Grid.Column="1"
                       Margin="10" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:SymbolControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate
          TargetType="{x:Type local:SymbolControl}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:FormattedTextControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:FormattedTextControl}">
          <Border Background="{TemplateBinding Background}"
                  DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.Resources>
                <converters:SyntaxNodeConverter x:Key="SyntaxNodeConverter" />
                <converters:SyntaxTokenConverter x:Key="SyntaxTokenConverter" />
                <converters:SyntaxTriviaConverter x:Key="SyntaxTriviaConverter" />
                <converters:SymbolInfoConverter x:Key="SymbolInfoConverter" />
                <DataTemplate DataType="{x:Type local:CodeToolTipContent}">
                  <StackPanel Orientation="Vertical">
                    <ContentControl Content="{Binding SyntaxNode}" />
                    <ContentControl Content="{Binding Symbol}" />
                  </StackPanel>
                </DataTemplate>

                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Margin" Value="10" />
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer VerticalAlignment="Stretch" x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top">

                <Grid x:Name="InnerGrid">
                  <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left" Stroke="Aqua"
                             TextElement.FontSize="12">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="TextDest" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="Rect2" Panel.ZIndex="100" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush2" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="DG2" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Canvas x:Name="Canvas" Panel.ZIndex="101" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />

                </Grid>

              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:ElementTextFormatterControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ElementTextFormatterControl}">
          <Border Background="{TemplateBinding Background}"
                  DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.Resources>

                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Margin" Value="10" />
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top">

                <Grid x:Name="InnerGrid">
                  <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left" Stroke="Aqua"
                             TextElement.FontSize="12">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="TextDest" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="Rect2" Panel.ZIndex="100" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush2" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="DG2" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Canvas x:Name="Canvas" Panel.ZIndex="101" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />

                </Grid>

              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:SymbolTextControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SymbolTextControl}">
          <Border Background="{TemplateBinding Background}"
                  DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.Resources>
                <converters:SymbolInfoConverter x:Key="SymbolInfoConverter" />
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer VerticalAlignment="Stretch" x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top" VerticalScrollBarVisibility="Hidden">
                <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left"
                           TextElement.FontSize="12">
                  <Rectangle.Fill>
                    <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                  Stretch="Uniform">
                      <DrawingBrush.Drawing>
                        <DrawingGroup x:Name="TextDest" />
                      </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Rectangle.Fill>
                </Rectangle>
              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:LogEventInstancesControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:LogEventInstancesControl}">
          <Border Background="{TemplateBinding Background}"
                  DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer VerticalAlignment="Stretch" x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top" VerticalScrollBarVisibility="Hidden">
                <Grid x:Name="InnerGrid">
                  <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left"
                             TextElement.FontSize="12">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="TextDest" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="Rect2" Panel.ZIndex="100" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush2" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="DG2" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Grid>
              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:CodeControl2}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:FormattedTextControl}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.Resources>
                <converters:SyntaxNodeConverter x:Key="SyntaxNodeConverter" />
                <converters:SyntaxTokenConverter x:Key="SyntaxTokenConverter" />
                <converters:SyntaxTriviaConverter x:Key="SyntaxTriviaConverter" />
                <converters:SymbolInfoConverter x:Key="SymbolInfoConverter" />
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Margin" Value="10" />
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer VerticalAlignment="Stretch" x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top">
                <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left" Stroke="Aqua"
                           TextElement.FontSize="12">
                  <Rectangle.Fill>
                    <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                  Stretch="Uniform">
                      <DrawingBrush.Drawing>
                        <DrawingGroup x:Name="TextDest" />
                      </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Rectangle.Fill>
                </Rectangle>
              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:DevTypeControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DevTypeControl}">
          <Border Background="{TemplateBinding Background}"

                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Rectangle>
              <Rectangle.Fill>
                <DrawingBrush x:Name="myDrawingBrush" Stretch="None"
                              AlignmentY="Top" AlignmentX="Left">
                  <DrawingBrush.Drawing>
                    <DrawingGroup x:Name="textDest" />
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:CodeDiagnostics}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:CodeDiagnostics}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <TabControl>
              <TabControl.Resources>
                <local:RectConverter x:Key="RectConverter" />
              </TabControl.Resources>
              <TabItem Header="Code">
                <local:FormattedTextControl
                  x:Name="code"
                  SyntaxTree="{TemplateBinding SyntaxTree}"
                  Compilation="{TemplateBinding Compilation}"
                  Model="{TemplateBinding Model}" />
              </TabItem>
              <TabItem Header="Diag">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="80" />
                  </Grid.RowDefinitions>
                  <ListView x:Name="lines" Grid.ColumnSpan="2" Grid.Row="0" Grid.Column="0"
                            ItemsSource="{Binding ElementName=code,Path=LineInfos}">
                    <ListView.View>
                      <GridView>
                        <GridViewColumn Header="Line no." DisplayMemberBinding="{Binding LineNumber}" />
                        <GridViewColumn Header="Offset" DisplayMemberBinding="{Binding Path=Offset}" />
                        <GridViewColumn Header="Length" DisplayMemberBinding="{Binding Path=Length}" />
                        <GridViewColumn Header="Size" DisplayMemberBinding="{Binding Path=Size}" />
                        <GridViewColumn Header="Origin" DisplayMemberBinding="{Binding Path=Origin}" />
                        <GridViewColumn Header="Text" DisplayMemberBinding="{Binding Path=Text}" />

                      </GridView>
                    </ListView.View>
                  </ListView>
                  <ListView x:Name="regions" Grid.Row="1" Grid.Column="0"
                            ItemsSource="{Binding ElementName=lines,Path=SelectedItem.Regions}">
                    <ListView.View>
                      <GridView>
                        <GridViewColumn Header="Offset" DisplayMemberBinding="{Binding Path=Offset}" />
                        <GridViewColumn Header="Length" DisplayMemberBinding="{Binding Path=Length}" />
                        <GridViewColumn Header="Bounding"
                                        DisplayMemberBinding="{Binding Path=BoundingRect,Converter={StaticResource RectConverter}}" />
                      </GridView>
                    </ListView.View>
                  </ListView>
                  <ListView Grid.Row="1" Grid.Column="1"
                            ItemsSource="{Binding ElementName=regions,Path=SelectedItem.Characters}">
                    <ListView.View>
                      <GridView>
                        <GridViewColumn Header="Row" DisplayMemberBinding="{Binding Path=Row}" />
                        <GridViewColumn Header="Column" DisplayMemberBinding="{Binding Path=Column}" />
                        <GridViewColumn Header="Char" DisplayMemberBinding="{Binding Path=Char}" />
                        <GridViewColumn Header="Bounding"
                                        DisplayMemberBinding="{Binding Path=Bounds,Converter={StaticResource RectConverter}}" />
                      </GridView>
                    </ListView.View>
                  </ListView>
                  <Rectangle x:Name="rect" Grid.Row="2" Grid.ColumnSpan="2" Grid.Column="0">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="None">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="dgroup" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                </Grid>
              </TabItem>
            </TabControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:EnhancedCodeControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:EnhancedCodeControl}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid"
                  DataContext="{Binding ElementName=CodeControl}">
              <Grid.Resources>
                <converters:SyntaxNodeConverter x:Key="SyntaxNodeConverter" />
                <converters:SyntaxTokenConverter x:Key="SyntaxTokenConverter" />
                <converters:SyntaxTriviaConverter x:Key="SyntaxTriviaConverter" />
                <converters:SymbolInfoConverter x:Key="SymbolInfoConverter" />
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="5*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <StackPanel Orientation="Horizontal">
                <ComboBox
                  ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:EnhancedCodeControl,AncestorLevel=3,Mode=FindAncestor},Path=CommonFontSizes}"
                  SelectedValue="{Binding ElementName=Rectangle,Path=(TextElement.FontSize),Mode=TwoWay,FallbackValue=12}"
                  FontSize="20" />
              </StackPanel>
              <local:FormattedTextControl Grid.Row="1" Grid.Column="0" SyntaxTree="{TemplateBinding SyntaxTree}"
                                          Compilation="{TemplateBinding Compilation}" x:Name="CodeControl" />
              <StackPanel Margin="10" Grid.Row="2" Grid.Column="0" Orientation="Horizontal" TextElement.FontSize="16">
                <TextBlock Margin="15,0,0,0" Text="{Binding HoverOffset}" />
                <TextBlock Text=" ( " />
                <TextBlock Text="{Binding HoverColumn}" />
                <TextBlock Text=", " />
                <TextBlock Text="{Binding HoverRow}" />
                <TextBlock Text=" ) " />
                <StackPanel Orientation="Horizontal">
                  <TextBlock Margin="15,0,0,0"
                             Text="{Binding HoverSyntaxNode,Converter={StaticResource SyntaxNodeConverter},ConverterParameter={x:Static converters:SyntaxNodeInfo.Kind}}" />
                  <TextBlock Margin="15,0,0,0"
                             Text="{Binding HoverToken,Converter={StaticResource SyntaxTokenConverter},ConverterParameter=kind}" />
                  <TextBlock Margin="15,0,0,0"
                             Text="{Binding HoverToken,Converter={StaticResource SyntaxTokenConverter},ConverterParameter=text}" />
                </StackPanel>
                <StackPanel Background="Beige" Orientation="Horizontal" Margin="10,0,10,0">
                  <TextBlock
                    Text="{Binding HoverSymbol,Converter={StaticResource SymbolInfoConverter},ConverterParameter=kind}" />
                  <local:SymbolTextControl DisplaySymbol="{Binding HoverSymbol}" />
                </StackPanel>
              </StackPanel>
              <StackPanel Orientation="Horizontal" Grid.Row="3" Grid.Column="0" TextElement.FontSize="14">
                <TextBlock Margin="10"
                           Text="{Binding HoverRegionInfo.Trivia,Converter={StaticResource SyntaxTriviaConverter}}" />
                <TextBlock Margin="10" Text="{Binding HoverRegionInfo.TriviaValue.HasStructure}" />
              </StackPanel>
              <StackPanel Orientation="Horizontal" Grid.Row="4" Grid.Column="0" TextElement.FontSize="14">
                <StackPanel.Resources>
                  <DataTemplate DataType="{x:Type local:SyntaxTokenTextCharacters}">
                    <StackPanel Orientation="Horizontal" Background="Khaki">
                      <TextBlock Margin="10" Text="Text:" />
                      <TextBlock Margin="10" Text="{Binding Text}" />
                      <TextBlock Margin="10" Text="Index:" />
                      <TextBlock Margin="10" Text="{Binding Index}" />
                      <TextBlock Margin="10" Text="Length:" />
                      <TextBlock Margin="10" Text="{Binding Length}" />
                      <TextBlock Margin="10" Text="Span:" />
                      <TextBlock Margin="10" Text="{Binding Span}" />
                    </StackPanel>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type local:SyntaxTriviaTextCharacters}">
                    <StackPanel Orientation="Horizontal" Background="Aquamarine">
                      <TextBlock Margin="10" Text="{Binding Text}" />
                      <TextBlock Margin="10" Text="{Binding Index}" />
                      <TextBlock Margin="10" Text="{Binding Length}" />
                    </StackPanel>
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type TextRun}">
                    <TextBlock Text="{Binding Length}" Background="Gold" />
                  </DataTemplate>
                </StackPanel.Resources>
                <TextBlock Margin="10" Text="Bounding Rect:" />
                <TextBlock Text="{Binding HoverRegionInfo.BoundingRect}" />
                <TextBlock Margin="10" Text="Offset:" />
                <TextBlock Text="{Binding HoverRegionInfo.Offset}" />
                <ContentControl Content="{Binding HoverRegionInfo.TextRun}" />
              </StackPanel>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:WorkspaceView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:WorkspaceView}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Border.Resources>
              <local:TestConverter2 x:Key="TestConverter" />
              <HierarchicalDataTemplate DataType="{x:Type local:SolutionModel}" ItemsSource="{Binding Projects}">
                <TextBlock Text="{Binding Id.Id}" />
              </HierarchicalDataTemplate>
              <HierarchicalDataTemplate DataType="{x:Type local:ProjectModel}"
                                        ItemsSource="{Binding RootPathInfo.Entries.Values,Converter={StaticResource TestConverter}}">
                <TextBlock Text="{Binding Name}">
                  <TextBlock.ContextMenu>
                    <ContextMenu>
                      <MenuItem Header="Symbols" Command="wpf:WpfAppCommands.BrowseSymbols"
                                CommandParameter="{Binding}" />
                      <MenuItem Header="Details" Command="wpf:WpfAppCommands.ViewDetails"
                                CommandParameter="{Binding}" />
                    </ContextMenu>
                  </TextBlock.ContextMenu>
                </TextBlock>
              </HierarchicalDataTemplate>
              <HierarchicalDataTemplate DataType="{x:Type local:DiagnosticNodeModel}">
                <TextBlock Text="{Binding Message}" />
              </HierarchicalDataTemplate>

              <HierarchicalDataTemplate DataType="{x:Type local:PathModel}" ItemsSource="{Binding Children}">
                <TextBlock Text="{Binding ElementName}">
                  <TextBlock.ContextMenu>
                    <ContextMenu>
                      <MenuItem Header="Details" Command="wpf:WpfAppCommands.ViewDetails"
                                CommandParameter="{Binding}" />
                    </ContextMenu>
                  </TextBlock.ContextMenu>
                </TextBlock>
              </HierarchicalDataTemplate>
              <HierarchicalDataTemplate DataType="{x:Type local:DocumentModel}">
                <TextBlock Text="{Binding Name}">
                  <TextBlock.ContextMenu>
                    <ContextMenu>
                      <MenuItem Header="Details" Command="wpf:WpfAppCommands.ViewDetails"
                                CommandParameter="{Binding}" />
                    </ContextMenu>
                  </TextBlock.ContextMenu>
                </TextBlock>
              </HierarchicalDataTemplate>

            </Border.Resources>
            <TreeView ItemsSource="{TemplateBinding Solutions}" x:Name="TreeView">
              <TreeView.InputBindings>
                <KeyBinding Key="Enter" Command="{x:Static wpf:WpfAppCommands.OpenSolutionItem}"
                            CommandParameter="{Binding ElementName=TreeView,Path=SelectedItem}" />
              </TreeView.InputBindings>
            </TreeView>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:SemanticControl1}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SemanticControl1}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Border.Resources>
              <converters:SymbolInfoConverter x:Key="SymbolInfoConverter" />
            </Border.Resources>


            <TreeView x:Name="TreeView">
              <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="{x:Type codeAnalysis:INamespaceOrTypeSymbol}"
                                          ItemsSource="{Binding Converter={StaticResource SymbolInfoConverter},ConverterParameter=Members}">
                  <local:SymbolTextControl DisplaySymbol="{Binding}" />
                </HierarchicalDataTemplate>
              </TreeView.ItemTemplate>
            </TreeView>

          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:AssembliesControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AssembliesControl}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Border.Resources>
              <wpf:AssemblyInfoConverter x:Key="AssemblyInfoConverter" />

            </Border.Resources>
            <ListView x:Name="ListView" ItemsSource="{TemplateBinding AssemblySource}"
                      SelectedItem="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectedAssembly,Mode=TwoWay}">
              <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                  <Setter Property="ContextMenu">
                    <Setter.Value>
                      <ContextMenu>
                        <MenuItem Header="Details" Command="wpf:WpfAppCommands.ViewDetails"
                                  CommandParameter="{Binding}" />
                        <MenuItem Header="Resources" Command="wpf:WpfAppCommands.ViewResources"
                                  CommandParameter="{Binding}" />
                      </ContextMenu>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ListView.ItemContainerStyle>
              <ListView.View>
                <GridView>
                  <GridViewColumn Header="Name">
                    <GridViewColumn.CellTemplate>
                      <DataTemplate DataType="{x:Type reflection:Assembly}">
                        <TextBlock
                          DataContext="{Binding Converter={StaticResource AssemblyInfoConverter},ConverterParameter=Name}"
                          Text="{Binding Path=Name}" />
                      </DataTemplate>
                    </GridViewColumn.CellTemplate>
                  </GridViewColumn>
                  <GridViewColumn Header="GAC" DisplayMemberBinding="{Binding GlobalAssemblyCache}" />
                  <GridViewColumn Header="Company"
                                  DisplayMemberBinding="{Binding ConverterParameter=Company,Converter={StaticResource AssemblyInfoConverter}}" />
                  <GridViewColumn Header="Location">
                    <GridViewColumn.CellTemplate>
                      <DataTemplate>
                        <TextBlock
                          Text="{Binding Converter={StaticResource AssemblyInfoConverter},ConverterParameter=Location}"
                          FontFamily="Lucida Console" />
                      </DataTemplate>
                    </GridViewColumn.CellTemplate>
                  </GridViewColumn>
                </GridView>
              </ListView.View>
            </ListView>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:SyntaxPanel}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SyntaxPanel}">
          <ControlTemplate.Resources>
            <x:Array x:Key="Brushes" Type="Brush">
              <SolidColorBrush Color="Azure" />
              <SolidColorBrush Color="LemonChiffon" />
              <SolidColorBrush Color="BlanchedAlmond" />
              <SolidColorBrush Color="LavenderBlush" />
            </x:Array>
          </ControlTemplate.Resources>
          <Border
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            VerticalAlignment="{TemplateBinding VerticalAlignment}"
            DataContext="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SyntaxTypeInfo}"
            Grid.RowSpan="{TemplateBinding Grid.RowSpan}"
            Grid.Column="{TemplateBinding Grid.Column}"
            Grid.Row="{TemplateBinding Grid.Row}">
            <Border.Resources>

              <Style x:Key="FieldNameStyle" TargetType="TextBlock">
                <Setter Property="TextDecorations" Value="Underline" />
                <Setter Property="FontWeight" Value="Medium" />
              </Style>
              <local:TestConverter2 x:Key="TestConverter2" />
              <BooleanToVisibilityConverter x:Key="BooleanTpVisibilityConverter" />
              <DataTemplate DataType="{x:Type syntax:AppTypeInfo}">
                <local:SyntaxPanel Margin="30" SyntaxTypeInfo="{Binding}"
                                   ControlDepth="{Binding RelativeSource={RelativeSource TemplatedParent},Path=NextDepth,Converter={StaticResource TestConverter2}}" />
              </DataTemplate>
              <local:AppTypeInfoConvereter x:Key="AppTypeInfoConverter" />
              <local:KindsConverter x:Key="KindsConverter" />
            </Border.Resources>

            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <TextBlock FontSize="24" Text="{Binding Title}" />
              <TreeView Grid.Row="1" Grid.Column="0" ItemsSource="{Binding Path=SubTypeInfos}" x:Name="TreeView">
                <TreeView.Style>
                  <Style TargetType="TreeView">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding SubTypeInfos.Count}" Value="0">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TreeView.Style>
                <TreeView.ItemTemplate>
                  <HierarchicalDataTemplate ItemsSource="{Binding Path=SubTypeInfos}"
                                            DataType="{x:Type syntax:AppTypeInfo}">
                    <TextBlock Text="{Binding Title}" />
                  </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
              </TreeView>
              <ContentPresenter x:Name="KindPresenter" Grid.Row="2" Grid.Column="0"
                                Content="{Binding Converter={StaticResource KindsConverter},Mode=OneTime}">
                <ContentPresenter.Resources>
                  <DataTemplate DataType="{x:Type cSharp:SyntaxKind}">
                    <TextBlock Text="{Binding Mode=OneTime}" />
                  </DataTemplate>
                  <DataTemplate DataType="{x:Type syntax:SyntaxKindCollection}">
                    <StackPanel>
                      <TextBlock FontSize="20" TextDecorations="Underline" Text="Kinds:" />
                      <ListBox MaxHeight="150" Margin="20,10,0,10" Grid.Row="1" ItemsSource="{Binding Mode=OneTime}">
                        <ListBox.Style>
                          <Style TargetType="ListBox">
                            <Style.Triggers>
                              <DataTrigger Binding="{Binding Count}" Value="0">
                                <Setter Property="Visibility" Value="Collapsed" />
                              </DataTrigger>
                            </Style.Triggers>
                          </Style>
                        </ListBox.Style>
                      </ListBox>
                    </StackPanel>
                  </DataTemplate>
                </ContentPresenter.Resources>
              </ContentPresenter>
              <ItemsControl ItemsSource="{Binding Fields}" Grid.Row="3">
                <ItemsControl.ItemContainerStyle>
                  <Style TargetType="ContentPresenter">
                    <Setter Property="Control.BorderBrush" Value="BlueViolet" />
                    <Setter Property="Control.BorderThickness" Value="0" />
                    <Setter Property="DataContext" Value="{Binding Fields}" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsCollection}" Value="true">
                        <Setter Property="Control.Background" Value="Gray" />
                        <Setter Property="ContentTemplate">

                          <Setter.Value>
                            <DataTemplate DataType="{x:Type syntax:SyntaxFieldInfo}">
                              <Grid TextElement.FontSize="18">
                                <Grid.RowDefinitions>
                                  <RowDefinition Height="Auto" />
                                  <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                  <ColumnDefinition Width="*" />
                                  <ColumnDefinition Width="*" />
                                  <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{StaticResource FieldNameStyle}" Text="{Binding Name}"
                                           Visibility="Visible" />
                                <TextBlock Grid.Row="0" Grid.Column="1" FontSize="14" FontStyle="Italic"
                                           Text="Collection-Type " />
                                <Expander ExpandDirection="Down" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3">
                                  <ContentPresenter Content="{Binding Converter={StaticResource AppTypeInfoConverter}}" />
                                </Expander>
                              </Grid>
                            </DataTemplate>
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                      <DataTrigger Binding="{Binding IsCollection}" Value="false">
                        <Setter Property="Control.Background" Value="Gray" />
                        <Setter Property="ContentTemplate">
                          <Setter.Value>
                            <DataTemplate DataType="{x:Type syntax:SyntaxFieldInfo}">
                              <Grid>
                                <Grid.RowDefinitions>
                                  <RowDefinition Height="Auto" />
                                  <RowDefinition Height="Auto" />
                                  <RowDefinition Height="Auto" />
                                  <RowDefinition Height="*" />

                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                  <ColumnDefinition Width="*" />
                                  <ColumnDefinition Width="*" />
                                  <ColumnDefinition Width="2*" />
                                  <ColumnDefinition Width="2*" />
                                  <ColumnDefinition Width="2*" />
                                </Grid.ColumnDefinitions>

                                <TextBlock Style="{StaticResource FieldNameStyle}" TextElement.FontSize="16"
                                           Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Text="{Binding Name}" />
                                <TextBlock TextElement.FontSize="16" Grid.Row="0" Grid.Column="2" FontStyle="Italic"
                                           Text="Non-collection-type " />

                                <WrapPanel TextElement.FontSize="16" Grid.Column="3" Grid.Row="0">
                                  <TextBlock Text=" ( " />
                                  <TextBlock FontStyle="Italic" Text="{Binding TypeName}" />
                                  <TextBlock Text=" )" />
                                </WrapPanel>
                                <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="4" Orientation="Horizontal">
                                  <StackPanel.Style>
                                    <Style TargetType="StackPanel">
                                      <Style.Triggers>
                                        <MultiDataTrigger>
                                          <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Optional}" Value="false" />
                                            <Condition Binding="{Binding Override}" Value="false" />
                                          </MultiDataTrigger.Conditions>
                                          <Setter Property="Visibility" Value="Hidden" />
                                        </MultiDataTrigger>
                                      </Style.Triggers>
                                    </Style>
                                  </StackPanel.Style>
                                  <TextBlock Text="Optional"
                                             Visibility="{Binding Optional,Converter={StaticResource BooleanTpVisibilityConverter}}" />
                                  <TextBlock Text="Override"
                                             Visibility="{Binding Override,Converter={StaticResource BooleanTpVisibilityConverter}}" />
                                </StackPanel>
                                <ListBox Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" ItemsSource="{Binding Kinds}">
                                  <ListBox.ItemContainerStyle>
                                    <Style TargetType="ListBoxItem">
                                      <Setter Property="FontSize" Value="18" />
                                    </Style>
                                  </ListBox.ItemContainerStyle>
                                  <ListBox.Style>
                                    <Style TargetType="ListBox">
                                      <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=Kinds.Count}"
                                                     Value="0">
                                          <Setter Property="Visibility" Value="Hidden" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Path=Kinds.Count}"
                                                     Value="1">
                                          <Setter Property="IsEnabled" Value="False" />
                                        </DataTrigger>

                                      </Style.Triggers>
                                    </Style>
                                  </ListBox.Style>
                                </ListBox>
                                <TextBlock Background="Black" Foreground="White"
                                           Text="{Binding Converter={StaticResource AppTypeInfoConverter},ConverterParameter=Verify}"
                                           Visibility="Collapsed" />
                                <Expander ExpandDirection="Down" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4">
                                  <ContentPresenter Content="{Binding Converter={StaticResource AppTypeInfoConverter}}" />
                                </Expander>
                              </Grid>
                            </DataTemplate>
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ItemsControl.ItemContainerStyle>
                <ItemsControl.Template>
                  <ControlTemplate TargetType="ItemsControl">
                    <Border Margin="0,5,0,5" Padding="10,5,10,5" BorderThickness="0">
                      <ItemsPresenter />
                    </Border>
                  </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
              <ListBox Grid.Row="4" Grid.Column="0" ItemsSource="{Binding FactoryMethods}">
                <ListBox.ItemTemplate>
                  <DataTemplate DataType="{x:Type syntax:AppMethodInfo}">
                    <WrapPanel>
                      <TextBlock Text="{Binding MethodName}" />
                      <TextBlock Text="  " />
                      <ItemsControl ItemsSource="{Binding Parameters}">
                        <ItemsControl.ItemTemplate>
                          <DataTemplate DataType="{x:Type syntax:AppParameterInfo}">
                            <WrapPanel>
                              <TextBlock Text="{Binding Name}" />
                              <TextBlock Text=" ( " />
                              <TextBlock Text="{Binding ParameterType.Name}" />
                              <TextBlock Text=" ) " />
                            </WrapPanel>
                          </DataTemplate>
                        </ItemsControl.ItemTemplate>
                        <ItemsControl.ItemsPanel>
                          <ItemsPanelTemplate>
                            <WrapPanel />
                          </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                      </ItemsControl>
                    </WrapPanel>
                  </DataTemplate>
                </ListBox.ItemTemplate>
              </ListBox>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:SyntaxTypeComboBox}">
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate DataType="{x:Type syntax:AppTypeInfo}">
          <TextBlock Text="{Binding Title}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SyntaxTypeComboBox}">
          <ControlTemplate.Resources>

            <Style x:Key="{x:Type TreeView}"
                   TargetType="TreeView">
              <Setter Property="OverridesDefaultStyle"
                      Value="True" />
              <Setter Property="SnapsToDevicePixels"
                      Value="True" />
              <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                      Value="Auto" />
              <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                      Value="Auto" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="TreeView">
                    <ControlTemplate.Resources>
                      <!--Control colors.-->
                      <Color x:Key="WindowColor">#FFE8EDF9</Color>
                      <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
                      <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

                      <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
                      <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
                      <Color x:Key="DisabledForegroundColor">#FF888888</Color>

                      <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
                      <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

                      <Color x:Key="ControlLightColor">White</Color>
                      <Color x:Key="ControlMediumColor">#FF7381F9</Color>
                      <Color x:Key="ControlDarkColor">#FF211AA9</Color>

                      <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
                      <Color x:Key="ControlPressedColor">#FF211AA9</Color>


                      <Color x:Key="GlyphColor">#FF444444</Color>
                      <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

                      <!--Border colors-->
                      <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
                      <Color x:Key="BorderMediumColor">#FF888888</Color>
                      <Color x:Key="BorderDarkColor">#FF444444</Color>

                      <Color x:Key="PressedBorderLightColor">#FF888888</Color>
                      <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

                      <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
                      <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

                      <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

                      <!--Control-specific resources.-->
                      <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
                      <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
                      <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

                      <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

                      <LinearGradientBrush x:Key="MenuPopupBrush"
                                           EndPoint="0.5,1"
                                           StartPoint="0.5,0">
                        <GradientStop Color="{DynamicResource ControlLightColor}"
                                      Offset="0" />
                        <GradientStop Color="{DynamicResource ControlMediumColor}"
                                      Offset="0.5" />
                        <GradientStop Color="{DynamicResource ControlLightColor}"
                                      Offset="1" />
                      </LinearGradientBrush>

                      <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                                           StartPoint="0,0"
                                           EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStopCollection>
                            <GradientStop Color="#000000FF"
                                          Offset="0" />
                            <GradientStop Color="#600000FF"
                                          Offset="0.4" />
                            <GradientStop Color="#600000FF"
                                          Offset="0.6" />
                            <GradientStop Color="#000000FF"
                                          Offset="1" />
                          </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </ControlTemplate.Resources>
                    <Border Name="Border"
                            CornerRadius="1"
                            BorderThickness="1">
                      <Border.BorderBrush>
                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                      </Border.BorderBrush>
                      <Border.Background>
                        <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                      </Border.Background>
                      <ScrollViewer Focusable="False"
                                    CanContentScroll="False"
                                    Padding="4">
                        <ItemsPresenter />
                      </ScrollViewer>
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>

            <Style x:Key="ExpandCollapseToggleStyle"
                   TargetType="ToggleButton">
              <Style.Triggers>

                <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Visibility" Value="Hidden" />
                </Trigger>

              </Style.Triggers>
              <Setter Property="Focusable"
                      Value="False" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15"
                          Height="13"
                          Background="Transparent">
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="CheckStates">
                          <VisualState x:Name="Checked">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                             Storyboard.TargetName="Collapsed">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Hidden}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                             Storyboard.TargetName="Expanded">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unchecked" />
                          <VisualState x:Name="Indeterminate" />
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <Path x:Name="Collapsed"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 4 0 L 8 4 L 4 8 Z">
                        <Path.Fill>
                          <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                      <Path x:Name="Expanded"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 0 4 L 8 4 L 4 8 Z"
                            Visibility="Hidden">
                        <Path.Fill>
                          <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                    </Grid>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="TreeViewItemFocusVisual">
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate>
                    <Border>
                      <Rectangle Margin="0,0,0,0"
                                 StrokeThickness="5"
                                 Stroke="Black"
                                 StrokeDashArray="1 2"
                                 Opacity="0" />
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="{x:Type TreeViewItem}"
                   TargetType="{x:Type TreeViewItem}">
              <Setter Property="Background"
                      Value="Transparent" />
              <Setter Property="HorizontalContentAlignment"
                      Value="{Binding Path=HorizontalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="VerticalContentAlignment"
                      Value="{Binding Path=VerticalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="Padding"
                      Value="1,0,0,0" />
              <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
              <Setter Property="FocusVisualStyle"
                      Value="{StaticResource TreeViewItemFocusVisual}" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>

                      <Color x:Key="WindowColor">#FFE8EDF9</Color>
                      <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
                      <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

                      <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
                      <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
                      <Color x:Key="DisabledForegroundColor">#FF888888</Color>

                      <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
                      <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

                      <Color x:Key="ControlLightColor">White</Color>
                      <Color x:Key="ControlMediumColor">#FFdb97cd</Color>
                      <Color x:Key="ControlDarkColor">#FF211AA9</Color>

                      <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
                      <Color x:Key="ControlPressedColor">#FF211AA9</Color>


                      <Color x:Key="GlyphColor">#FF444444</Color>
                      <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

                      <!--Border colors-->
                      <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
                      <Color x:Key="BorderMediumColor">#FF888888</Color>
                      <Color x:Key="BorderDarkColor">#FF444444</Color>

                      <Color x:Key="PressedBorderLightColor">#FF888888</Color>
                      <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

                      <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
                      <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

                      <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

                      <!--Control-specific resources.-->
                      <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
                      <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
                      <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

                      <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

                      <LinearGradientBrush x:Key="MenuPopupBrush"
                                           EndPoint="0.5,1"
                                           StartPoint="0.5,0">
                        <GradientStop Color="{DynamicResource ControlLightColor}"
                                      Offset="0" />
                        <GradientStop Color="{DynamicResource ControlMediumColor}"
                                      Offset="0.5" />
                        <GradientStop Color="{DynamicResource ControlLightColor}"
                                      Offset="1" />
                      </LinearGradientBrush>

                      <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                                           StartPoint="0,0"
                                           EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                          <GradientStopCollection>
                            <GradientStop Color="#000000FF"
                                          Offset="0" />
                            <GradientStop Color="#600000FF"
                                          Offset="0.4" />
                            <GradientStop Color="#600000FF"
                                          Offset="0.6" />
                            <GradientStop Color="#000000FF"
                                          Offset="1" />
                          </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                      </LinearGradientBrush>
                    </ControlTemplate.Resources>
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="19"
                                          Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="SelectionStates">
                          <VisualState x:Name="Selected">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{StaticResource SelectedBackgroundColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unselected" />
                          <VisualState x:Name="SelectedInactive">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{StaticResource SelectedUnfocusedColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="ExpansionStates">
                          <VisualState x:Name="Expanded">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                             Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                                        Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Collapsed" />
                        </VisualStateGroup>
                        <VisualStateGroup x:Name="CommonStates">
                          <VisualState x:Name="MouseOver">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                Storyboard.TargetName="Bd">
                                <EasingColorKeyFrame KeyTime="0"
                                                     Value="{StaticResource ControlMouseOverColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <ToggleButton x:Name="Expander"
                                    Style="{StaticResource ExpandCollapseToggleStyle}"
                                    ClickMode="Press"
                                    IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
                      <Border x:Name="Bd"
                              Grid.Column="1"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}">
                        <Border.BorderBrush>
                          <LinearGradientBrush EndPoint="0,1"
                                               StartPoint="0,0">
                            <GradientStop Color="{DynamicResource BorderLightColor}"
                                          Offset="0" />
                            <GradientStop Color="{DynamicResource BorderMediumColor}"
                                          Offset="1" />
                          </LinearGradientBrush>
                        </Border.BorderBrush>
                        <Border.Background>

                          <LinearGradientBrush StartPoint="0,0"
                                               EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                              <GradientStopCollection>
                                <GradientStop Color="{DynamicResource ControlLightColor}" />
                                <GradientStop Color="{DynamicResource ControlMediumColor}"
                                              Offset="1.0" />
                              </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                          </LinearGradientBrush>

                        </Border.Background>
                        <ContentPresenter x:Name="PART_Header"
                                          ContentSource="Header"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                      </Border>
                      <ItemsPresenter x:Name="ItemsHost"
                                      Grid.Row="1"
                                      Grid.Column="1"
                                      Grid.ColumnSpan="2"
                                      Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="HasItems"
                               Value="false">
                        <Setter TargetName="Expander"
                                Property="Visibility"
                                Value="Hidden" />
                      </Trigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Width"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinWidth"
                                Value="75" />
                      </MultiTrigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Height"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinHeight"
                                Value="19" />
                      </MultiTrigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <DataTemplate DataType="{x:Type syntax:AppTypeInfo}">
              <TextBlock Text="{Binding Title}" />
            </DataTemplate>

            <ControlTemplate x:Key="ComboBoxToggleButton"
                             TargetType="{x:Type ToggleButton}">
              <ControlTemplate.Resources>
                <!--Control colors.-->
                <Color x:Key="WindowColor">#FFE8EDF9</Color>
                <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
                <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

                <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
                <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
                <Color x:Key="DisabledForegroundColor">#FF888888</Color>

                <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
                <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

                <Color x:Key="ControlLightColor">White</Color>
                <Color x:Key="ControlMediumColor">#FF7381F9</Color>
                <Color x:Key="ControlDarkColor">#FF211AA9</Color>

                <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
                <Color x:Key="ControlPressedColor">#FF211AA9</Color>


                <Color x:Key="GlyphColor">#FF444444</Color>
                <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

                <!--Border colors-->
                <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
                <Color x:Key="BorderMediumColor">#FF888888</Color>
                <Color x:Key="BorderDarkColor">#FF444444</Color>

                <Color x:Key="PressedBorderLightColor">#FF888888</Color>
                <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

                <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
                <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

                <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

                <!--Control-specific resources.-->
                <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
                <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
                <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

                <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

                <LinearGradientBrush x:Key="MenuPopupBrush"
                                     EndPoint="0.5,1"
                                     StartPoint="0.5,0">
                  <GradientStop Color="{DynamicResource ControlLightColor}"
                                Offset="0" />
                  <GradientStop Color="{DynamicResource ControlMediumColor}"
                                Offset="0.5" />
                  <GradientStop Color="{DynamicResource ControlLightColor}"
                                Offset="1" />
                </LinearGradientBrush>

                <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                                     StartPoint="0,0"
                                     EndPoint="1,0">
                  <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                      <GradientStop Color="#000000FF"
                                    Offset="0" />
                      <GradientStop Color="#600000FF"
                                    Offset="0.4" />
                      <GradientStop Color="#600000FF"
                                    Offset="0.6" />
                      <GradientStop Color="#000000FF"
                                    Offset="1" />
                    </GradientStopCollection>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
              </ControlTemplate.Resources>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                          Storyboard.TargetName="Border">
                          <EasingColorKeyFrame KeyTime="0"
                                               Value="{StaticResource ControlMouseOverColor}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                          Storyboard.TargetName="Border">
                          <EasingColorKeyFrame KeyTime="0"
                                               Value="{StaticResource DisabledControlDarkColor}" />
                        </ColorAnimationUsingKeyFrames>
                        <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="(Shape.Fill).
                (SolidColorBrush.Color)"
                          Storyboard.TargetName="Arrow">
                          <EasingColorKeyFrame KeyTime="0"
                                               Value="{StaticResource DisabledForegroundColor}" />
                        </ColorAnimationUsingKeyFrames>
                        <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="(Border.BorderBrush).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                          Storyboard.TargetName="Border">
                          <EasingColorKeyFrame KeyTime="0"
                                               Value="{StaticResource DisabledBorderDarkColor}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                  <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                      <Storyboard>
                        <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="(Panel.Background).
                (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                          Storyboard.TargetName="Border">
                          <EasingColorKeyFrame KeyTime="0"
                                               Value="{StaticResource ControlPressedColor}" />
                        </ColorAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Border x:Name="Border"
                        Grid.ColumnSpan="2"
                        CornerRadius="2"
                        BorderThickness="1">
                  <Border.BorderBrush>
                    <LinearGradientBrush EndPoint="0,1"
                                         StartPoint="0,0">
                      <GradientStop Color="{DynamicResource BorderLightColor}"
                                    Offset="0" />
                      <GradientStop Color="{DynamicResource BorderDarkColor}"
                                    Offset="1" />
                    </LinearGradientBrush>
                  </Border.BorderBrush>
                  <Border.Background>

                    <LinearGradientBrush StartPoint="0,0"
                                         EndPoint="0,1">
                      <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                          <GradientStop Color="{DynamicResource ControlLightColor}" />
                          <GradientStop Color="{DynamicResource ControlMediumColor}"
                                        Offset="1.0" />
                        </GradientStopCollection>
                      </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>

                  </Border.Background>
                </Border>
                <Border Grid.Column="0"
                        CornerRadius="2,0,0,2"
                        Margin="1">
                  <Border.Background>
                    <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                  </Border.Background>
                </Border>
                <Path x:Name="Arrow"
                      Grid.Column="1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 4 4 L 8 0 Z">
                  <Path.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                  </Path.Fill>
                </Path>
              </Grid>
            </ControlTemplate>

            <ControlTemplate x:Key="SyntaxTypeComboBoxTextBox"
                             TargetType="{x:Type TextBox}">
              <Border x:Name="PART_ContentHost"
                      Focusable="False"
                      Background="{TemplateBinding Background}" />
            </ControlTemplate>

          </ControlTemplate.Resources>
          <Grid>
            <Grid.Resources>
              <!--Control colors.-->
              <Color x:Key="WindowColor">#FFE8EDF9</Color>
              <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
              <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

              <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
              <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
              <Color x:Key="DisabledForegroundColor">#FF888888</Color>

              <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
              <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

              <Color x:Key="ControlLightColor">White</Color>
              <Color x:Key="ControlMediumColor">#FF7381F9</Color>
              <Color x:Key="ControlDarkColor">#FF211AA9</Color>

              <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
              <Color x:Key="ControlPressedColor">#FF211AA9</Color>


              <Color x:Key="GlyphColor">#FF444444</Color>
              <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

              <!--Border colors-->
              <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
              <Color x:Key="BorderMediumColor">#FF888888</Color>
              <Color x:Key="BorderDarkColor">#FF444444</Color>

              <Color x:Key="PressedBorderLightColor">#FF888888</Color>
              <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

              <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
              <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

              <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

              <!--Control-specific resources.-->
              <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
              <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
              <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

              <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

              <LinearGradientBrush x:Key="MenuPopupBrush"
                                   EndPoint="0.5,1"
                                   StartPoint="0.5,0">
                <GradientStop Color="{DynamicResource ControlLightColor}"
                              Offset="0" />
                <GradientStop Color="{DynamicResource ControlMediumColor}"
                              Offset="0.5" />
                <GradientStop Color="{DynamicResource ControlLightColor}"
                              Offset="1" />
              </LinearGradientBrush>

              <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                                   StartPoint="0,0"
                                   EndPoint="1,0">
                <LinearGradientBrush.GradientStops>
                  <GradientStopCollection>
                    <GradientStop Color="#000000FF"
                                  Offset="0" />
                    <GradientStop Color="#600000FF"
                                  Offset="0.4" />
                    <GradientStop Color="#600000FF"
                                  Offset="0.6" />
                    <GradientStop Color="#000000FF"
                                  Offset="1" />
                  </GradientStopCollection>
                </LinearGradientBrush.GradientStops>
              </LinearGradientBrush>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox"
                                                  Storyboard.TargetProperty="(TextElement.Foreground).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource DisabledForegroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="EditStates">
                <VisualState x:Name="Editable">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                   Storyboard.TargetName="PART_EditableTextBox">
                      <DiscreteObjectKeyFrame KeyTime="0"
                                              Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames
                      Storyboard.TargetProperty="(UIElement.Visibility)"
                      Storyboard.TargetName="ContentSite">
                      <DiscreteObjectKeyFrame KeyTime="0"
                                              Value="{x:Static Visibility.Hidden}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Uneditable" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ToggleButton x:Name="ToggleButton"
                          Template="{StaticResource ComboBoxToggleButton}"
                          Grid.Column="2"
                          Focusable="false"
                          ClickMode="Press"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, 
              RelativeSource={RelativeSource TemplatedParent}}" />
            <ContentPresenter x:Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{Binding RelativeSource={RelativeSource AncestorLevel=5,AncestorType=local:SyntaxTypeComboBox,Mode=FindAncestor},Path=SyntaxTypesModel.SelectedTypeInfo}"
                              Margin="3,3,23,3"
                              VerticalAlignment="Stretch"
                              HorizontalAlignment="Left">
              <ContentPresenter.ContentTemplate>
                <DataTemplate DataType="{x:Type syntax:AppTypeInfo}">
                  <TextBlock Text="{Binding Title}" />
                </DataTemplate>
              </ContentPresenter.ContentTemplate>
            </ContentPresenter>
            <TextBox x:Name="PART_EditableTextBox"
                     Style="{x:Null}"
                     Template="{StaticResource SyntaxTypeComboBoxTextBox}"
                     HorizontalAlignment="Left"
                     VerticalAlignment="Bottom"
                     Margin="3,3,23,3"
                     Focusable="True"
                     Background="Transparent"
                     Visibility="Hidden"
                     IsReadOnly="{TemplateBinding IsReadOnly}" />
            <Popup x:Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide">
              <Grid x:Name="DropDown"
                    SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding ActualWidth}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                <Border x:Name="DropDownBorder"
                        BorderThickness="1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                  </Border.BorderBrush>
                  <Border.Background>
                    <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                  </Border.Background>
                  <ScrollViewer Margin="4,6,4,6"
                                SnapsToDevicePixels="True">
                    <Grid>
                      <StackPanel x:Name="ItemsHost" IsItemsHost="True"
                                  KeyboardNavigation.DirectionalNavigation="Contained">
                        <StackPanel.Style>
                          <Style>
                            <Style.Triggers>
                            </Style.Triggers>
                          </Style>
                        </StackPanel.Style>
                      </StackPanel>
                      <TreeView x:Name="TreeView" ItemsSource="{Binding Path=SyntaxTypesModel.TopLevelTypeInfos}">
                        <TreeView.ItemTemplate>
                          <HierarchicalDataTemplate ItemsSource="{Binding Path=SubTypeInfos}"
                                                    DataType="{x:Type syntax:AppTypeInfo}">
                            <TextBlock FontSize="16" Text="{Binding Title}" />
                          </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                      </TreeView>
                    </Grid>
                  </ScrollViewer>
                </Border>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>

            <Trigger Property="HasItems"
                     Value="false">
              <Setter TargetName="DropDownBorder"
                      Property="MinHeight"
                      Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping"
                     Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                      Value="false" />
            </Trigger>
            <Trigger SourceName="Popup"
                     Property="AllowsTransparency"
                     Value="true">
              <Setter TargetName="DropDownBorder"
                      Property="CornerRadius"
                      Value="4" />
              <Setter TargetName="DropDownBorder"
                      Property="Margin"
                      Value="0,2,0,0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:SyntaxFactoryPanel}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:SyntaxFactoryPanel}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid DataContext="{Binding RelativeSource={RelativeSource TemplatedParent},Path=AppMethodInfo}">
              <ItemsControl ItemsSource="{Binding Parameters}">
                <ItemsControl.ItemTemplate>
                  <DataTemplate DataType="{x:Type syntax:AppParameterInfo}">
                    <WrapPanel>
                      <TextBlock Text="{Binding Name}" />
                      <TextBlock Text="{Binding ParameterType}" />
                    </WrapPanel>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <WrapPanel />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:AssemblyResourceTree}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:AssemblyResourceTree}">
          <ControlTemplate.Resources>
            <Color x:Key="WindowColor">#FFE8EDF9</Color>
            <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
            <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

            <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
            <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
            <Color x:Key="DisabledForegroundColor">#FF888888</Color>

            <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
            <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

            <Color x:Key="ControlLightColor">White</Color>
            <Color x:Key="ControlMediumColor">#ffb386c2</Color>
            <Color x:Key="ControlDarkColor">#ff6b2980</Color>

            <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
            <Color x:Key="ControlPressedColor">#FF211AA9</Color>


            <Color x:Key="GlyphColor">#FF444444</Color>
            <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

            <!--Border colors-->
            <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
            <Color x:Key="BorderMediumColor">DarkOrange</Color>
            <Color x:Key="BorderDarkColor">#FF444444</Color>

            <Color x:Key="PressedBorderLightColor">#FF888888</Color>
            <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

            <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
            <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

            <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

            <!--Control-specific resources.-->
            <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
            <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
            <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

            <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

            <Style TargetType="Window" x:Key="Borderless">
              <Setter Property="WindowStyle" Value="None" />
              <Setter Property="AllowsTransparency" Value="True" />
              <Setter Property="Background" Value="{x:Null}" />
            </Style>

            <LinearGradientBrush x:Key="MenuPopupBrush"
                                 EndPoint="0.5,1"
                                 StartPoint="0.5,0">
              <GradientStop
                Color="{DynamicResource ControlLightColor}"
                Offset="0" />
              <GradientStop
                Color="{DynamicResource ControlMediumColor}"
                Offset="0.5" />
              <GradientStop
                Color="{DynamicResource ControlLightColor}"
                Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush
              x:Key="ProgressBarIndicatorAnimatedFill"
              StartPoint="0,0"
              EndPoint="1,0">
              <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                  <GradientStop Color="#000000FF"
                                Offset="0" />
                  <GradientStop Color="#600000FF"
                                Offset="0.4" />
                  <GradientStop Color="#600000FF"
                                Offset="0.6" />
                  <GradientStop Color="#000000FF"
                                Offset="1" />
                </GradientStopCollection>
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>

            <wpf:GetTypeConverter x:Key="GetTypeConverter" />

            <Style x:Key="ExpandCollapseToggleStyle"
                   TargetType="local:CustomToggleButton">
              <Setter Property="Focusable"
                      Value="False" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="local:CustomToggleButton">
                    <Grid Width="15"
                          Height="13"
                          Background="Azure">
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup
                          x:Name="CheckStates">
                          <VisualState x:Name="Checked">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="Collapsed">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Hidden}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="Expanded">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unchecked" />
                          <VisualState x:Name="Indeterminate" />
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <Path x:Name="Collapsed"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 4 0 L 8 4 L 4 8 Z">
                        <Path.Fill>
                          <SolidColorBrush
                            Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                      <Path x:Name="Expanded"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 0 4 L 8 4 L 4 8 Z"
                            Visibility="Hidden">
                        <Path.Fill>
                          <SolidColorBrush
                            Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                    </Grid>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>

            <Style x:Key="TreeViewItemFocusVisual">
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate>
                    <Border>
                      <Rectangle Margin="0,0,0,0"
                                 StrokeThickness="5"
                                 Stroke="Black"
                                 StrokeDashArray="1 2"
                                 Opacity="0" />
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <Style x:Key="{x:Type local:CustomTreeViewItem}"
                   TargetType="{x:Type local:CustomTreeViewItem}">
              <Setter Property="IsExpanded"
                      Value="{Binding IsExpanded, Mode=OneWay}" />
              <Setter Property="Background"
                      Value="Transparent" />
              <Setter Property="Foreground" Value="Crimson" />
              <Setter Property="HorizontalContentAlignment"
                      Value="{Binding Path=HorizontalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="VerticalContentAlignment"
                      Value="{Binding Path=VerticalContentAlignment,
    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
              <Setter Property="Padding"
                      Value="1,0,0,0" />
              <Setter Property="FocusVisualStyle"
                      Value="{StaticResource TreeViewItemFocusVisual}" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate
                    TargetType="{x:Type local:CustomTreeViewItem}">
                    <Grid ShowGridLines="False">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="19"
                                          Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup
                          x:Name="SelectionStates">
                          <VisualState x:Name="Selected">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames
                                Storyboard.TargetName="Bd"
                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame
                                  KeyTime="0"
                                  Value="{StaticResource SelectedBackgroundColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unselected" />
                          <VisualState
                            x:Name="SelectedInactive">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames
                                Storyboard.TargetName="Bd"
                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame
                                  KeyTime="0"
                                  Value="{StaticResource SelectedUnfocusedColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup
                          x:Name="ExpansionStates">
                          <VisualState x:Name="Expanded">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Collapsed" />
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <local:CustomToggleButton x:Name="Expander"
                                                Style="{StaticResource ExpandCollapseToggleStyle}"
                                                Command="wpf:WpfAppCommands.ToggleNodeIsExpanded"
                                                ClickMode="Press"
                                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
                      <Border x:Name="Bd"
                              Grid.Row="0" Grid.Column="1"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                          x:Name="PART_Header"
                          ContentSource="Header"
                          HorizontalAlignment="Stretch" />
                      </Border>
                      <ItemsPresenter x:Name="ItemsHost"
                                      Grid.Row="1"
                                      Grid.Column="1"
                                      Grid.ColumnSpan="2"
                                      Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="HasItems"
                               Value="false">
                        <Setter TargetName="Expander"
                                Property="Visibility"
                                Value="Hidden" />
                      </Trigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Width"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinWidth"
                                Value="75" />
                      </MultiTrigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Height"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinHeight"
                                Value="19" />
                      </MultiTrigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <HierarchicalDataTemplate DataType="{x:Type local:Subnode}" ItemsSource="{Binding Items}">
              <ContentPresenter Content="{Binding Name}">
                <ContentPresenter.ToolTip>
                  <TextBlock Text="{Binding Value,Converter={StaticResource GetTypeConverter}}" />
                </ContentPresenter.ToolTip>
              </ContentPresenter>
            </HierarchicalDataTemplate>

            <HierarchicalDataTemplate DataType="{x:Type local:RootNode}" ItemsSource="{Binding Items}">
              <TextBlock Text="{Binding Name}">
                <TextBlock.ToolTip>
                  <kmDevWpfControls:TablePanel ColumnSpacing="10" RowSpacing="3">
                    <TextBlock Text="FileName" />
                    <TextBlock Text="{Binding FileName}" />
                    <TextBlock Text="Resource Location" />
                    <TextBlock Text="{Binding ResourceLocation}" />
                    <TextBlock Text="Referenced Assembly" />
                    <TextBlock Text="{Binding ReferencedAssembly}" TextTrimming="CharacterEllipsis" />
                  </kmDevWpfControls:TablePanel>
                </TextBlock.ToolTip>
              </TextBlock>
            </HierarchicalDataTemplate>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <local:CustomTreeView ItemsSource="{Binding RootNodes,RelativeSource={RelativeSource TemplatedParent}}"
                                  x:Name="TreeView" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:DocumentView}">
    <Setter Property="TextElement.FontSize" Value="24.0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DocumentView}">
          <ControlTemplate.Resources>

            <!--Control colors.-->
            <Color x:Key="WindowColor">#FFE8EDF9</Color>
            <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
            <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>

            <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>
            <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>
            <Color x:Key="DisabledForegroundColor">#FF888888</Color>

            <Color x:Key="SelectedBackgroundColor">#FFC5CBF9</Color>
            <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>

            <Color x:Key="ControlLightColor">White</Color>
            <Color x:Key="ControlMediumColor">#FF7381F9</Color>
            <Color x:Key="ControlDarkColor">#FF211AA9</Color>

            <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
            <Color x:Key="ControlPressedColor">#FF211AA9</Color>


            <Color x:Key="GlyphColor">#FF444444</Color>
            <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>

            <!--Border colors-->
            <Color x:Key="BorderLightColor">#FFCCCCCC</Color>
            <Color x:Key="BorderMediumColor">#FF888888</Color>
            <Color x:Key="BorderDarkColor">#FF444444</Color>

            <Color x:Key="PressedBorderLightColor">#FF888888</Color>
            <Color x:Key="PressedBorderDarkColor">#FF444444</Color>

            <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>
            <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>

            <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>

            <!--Control-specific resources.-->
            <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>
            <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>
            <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>

            <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>

            <LinearGradientBrush x:Key="MenuPopupBrush"
                                 EndPoint="0.5,1"
                                 StartPoint="0.5,0">
              <GradientStop Color="{DynamicResource ControlLightColor}"
                            Offset="0" />
              <GradientStop Color="{DynamicResource ControlMediumColor}"
                            Offset="0.5" />
              <GradientStop Color="{DynamicResource ControlLightColor}"
                            Offset="1" />
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"
                                 StartPoint="0,0"
                                 EndPoint="1,0">
              <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                  <GradientStop Color="#000000FF"
                                Offset="0" />
                  <GradientStop Color="#600000FF"
                                Offset="0.4" />
                  <GradientStop Color="#600000FF"
                                Offset="0.6" />
                  <GradientStop Color="#000000FF"
                                Offset="1" />
                </GradientStopCollection>
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>

            <Style x:Key="{x:Type StatusBar}"
                   TargetType="{x:Type StatusBar}">
              <Setter Property="SnapsToDevicePixels"
                      Value="True" />
              <Setter Property="OverridesDefaultStyle"
                      Value="true" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Padding="1">
                      <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0"
                                             EndPoint="0,1">
                          <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                              <GradientStop Color="{DynamicResource BorderLightColor}"
                                            Offset="0.0" />
                              <GradientStop Color="{DynamicResource BorderDarkColor}"
                                            Offset="1.0" />
                            </GradientStopCollection>
                          </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                      </Border.BorderBrush>
                      <Border.Background>
                        <LinearGradientBrush StartPoint="0,0"
                                             EndPoint="0,1">
                          <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                              <GradientStop Color="{DynamicResource ControlLightColor}"
                                            Offset="0.0" />
                              <GradientStop Color="{DynamicResource ControlMediumColor}"
                                            Offset="1.0" />
                            </GradientStopCollection>
                          </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                      </Border.Background>
                      <ItemsPresenter />
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>

            <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}"
                   TargetType="{x:Type Separator}">
              <Setter Property="OverridesDefaultStyle"
                      Value="True" />
              <Setter Property="SnapsToDevicePixels"
                      Value="True" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Width="1"
                               Margin="3">
                      <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                      </Rectangle.Fill>
                    </Rectangle>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>

            <Style x:Key="{x:Type StatusBarItem}"
                   TargetType="{x:Type StatusBarItem}">
              <Setter Property="OverridesDefaultStyle"
                      Value="True" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <ContentPresenter Margin="3"
                                      Name="ContentSite" />
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsEnabled"
                               Value="false">
                        <Setter Property="Foreground">
                          <Setter.Value>
                            <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                          </Setter.Value>
                        </Setter>
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" VerticalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="80" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <AdornerDecorator VerticalAlignment="Stretch">
                <ContentPresenter x:Name="ContentPresenter"
                                  Content="{Binding Document.Content,RelativeSource={RelativeSource TemplatedParent}}" />
              </AdornerDecorator>
              <StatusBar Grid.Row="2" FontSize="22">
                <StatusBarItem>
                  <WrapPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding Title,FallbackValue=Untitled}" />
                    <TextBlock Text=" - " />
                    <TextBlock Text="{Binding Title}" />
                  </WrapPanel>
                </StatusBarItem>
              </StatusBar>
            </Grid>

          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:ControlView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ControlView}">
          <ControlTemplate.Resources>
            <local:MetaLazyTypeConverter x:Key="MetaLazyTypeConverter" />
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <ToolBarTray>
                <ToolBar Band="1" BandIndex="1">
                  <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Controls.Count}" />
                </ToolBar>
              </ToolBarTray>
              <ListView Grid.Row="1" Grid.Column="0" x:Name="ListView"
                        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Controls}">
                <ListView.View>
                  <GridView>
                    <GridViewColumn DisplayMemberBinding="{Binding Title}" />
                    <GridViewColumn DisplayMemberBinding="{Binding Category}" />
                    <GridViewColumn>
                      <GridViewColumn.CellTemplate>
                        <DataTemplate DataType="{x:Type local:ControlInfo}">
                          <TextBlock Text="{Binding Item,Converter={StaticResource MetaLazyTypeConverter}}" />
                        </DataTemplate>
                      </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                    <GridViewColumn>
                      <GridViewColumn.CellTemplate>
                        <DataTemplate DataType="{x:Type local:ControlInfo}">
                          <Button Content="Open" Command="Open" CommandParameter="{Binding Item}" />
                        </DataTemplate>
                      </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                  </GridView>
                </ListView.View>
              </ListView>

            </Grid>
          </Border>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="JsonNodeFocusVisualStyle" TargetType="{x:Type local:JsonNodeView}" />
  <Style x:Key="JsonNodeCollapsedStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="FontStyle" Value="Italic" />
  </Style>
  <Style TargetType="{x:Type local:JsonNodeView}">
    <Setter Property="FocusVisualStyle"
            Value="{StaticResource JsonNodeFocusVisualStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:JsonNodeView}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                  Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource SelectedBackgroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="SelectedInactive">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"
                                                  Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource SelectedUnfocusedColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualState x:Name="Expanded">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                   Storyboard.TargetName="ItemsHost">
                      <DiscreteObjectKeyFrame KeyTime="0"
                                              Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames
                      Storyboard.TargetProperty="(Panel.Background).
                (SolidColorBrush.Color)"
                      Storyboard.TargetName="Bd">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="{StaticResource ControlMouseOverColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Normal" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Border x:Name="Bd" Background="Transparent"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}">
                <StackPanel Orientation="Horizontal">
                  <TextBlock xml:space="preserve">{ </TextBlock><TextBlock Text="{TemplateBinding Header}" />
                  <TextBlock Text=" : " />
                </StackPanel>
              </Border>
              <TextBlock Grid.Column="1" x:Name="CollapsedBlock" Style="{StaticResource JsonNodeCollapsedStyle}">{object}</TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="CollapsedBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:MyRibbonMenuItem}">
    <Setter Property="Control.HorizontalContentAlignment"
            Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment"
            Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.Background" Value="Transparent" />
    <Setter Property="Control.BorderBrush" Value="Transparent" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Control.Padding" Value="3,2,3,2" />
    <Setter Property="RibbonMenuItem.MouseOverBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="RibbonMenuItem.MouseOverBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="RibbonMenuItem.PressedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="RibbonMenuItem.PressedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="RibbonMenuItem.CheckedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="RibbonMenuItem.CheckedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
    <Setter Property="RibbonControlService.FocusedBorderBrush"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="RibbonControlService.FocusedBackground"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource Í}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource Î}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource Ï}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MyRibbonMenuItem}">
          <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
            <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MinWidth="22" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="14" />
                </Grid.ColumnDefinitions>
                <Border x:Name="PART_SideBarBorder" Margin="0,-1,0,-1" BorderThickness="0,0,1,0"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                  <Grid x:Name="SideBarOverlay" Background="{StaticResource ì}">
                    <Image x:Name="Image" Width="16" Height="16" Margin="4,3,6,1" VerticalAlignment="Center"
                           HorizontalAlignment="Center" Source="{TemplateBinding RibbonMenuItem.ImageSource}" />
                    <Border x:Name="CheckMarkBorder"
                            Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                            BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                            BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            Margin="1" Width="20" Height="20" CornerRadius="2">
                      <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                            HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                            FlowDirection="LeftToRight" Data="{StaticResource ï}" />
                    </Border>
                  </Grid>
                </Border>
                <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true" />
                <Path x:Name="Arrow" Visibility="Collapsed" Grid.Column="2" VerticalAlignment="Center"
                      HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                      Data="{StaticResource ð}" />
              </Grid>
            </Border>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" VerticalOffset="-1" Placement="Custom"
                   Focusable="false"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
              <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                              RenderOptions.ClearTypeHint="Enabled">
                <Border Name="MenuBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                        CornerRadius="2"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}">
                  <Border x:Name="SubMenuInnerBorder" Background="{StaticResource Ñ}" CornerRadius="2">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                        <Grid RenderOptions.ClearTypeHint="Enabled">
                          <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left"
                                  VerticalAlignment="Top">
                            <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}"
                                       Fill="{Binding ElementName=MenuBorder, Path=Background}" />
                            <Rectangle x:Name="OverlayRect" Fill="{StaticResource Ñ}" RadiusX="2" RadiusY="2"
                                       Height="{Binding ElementName=MenuBorder, Path=ActualHeight}"
                                       Width="{Binding ElementName=MenuBorder, Path=ActualWidth}" />
                          </Canvas>
                          <ItemsPresenter x:Name="ItemsPresenter" Margin="2" Grid.IsSharedSizeScope="true"
                                          KeyboardNavigation.TabNavigation="Cycle"
                                          KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Grid>
                      </ScrollViewer>
                      <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                              BorderThickness="0,1,0,0"
                              BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                        <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}" />
                      </Border>
                    </Grid>
                  </Border>
                </Border>
              </classic:SystemDropShadowChrome>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
              <Setter TargetName="OpaqueRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                      Property="Canvas.Top" />
              <Setter TargetName="OpaqueRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
              <Setter TargetName="OverlayRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top" />
              <Setter TargetName="OverlayRect"
                      Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                      Property="Canvas.Left" />
            </Trigger>
            <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
              <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                      Value="Disabled" />
              <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                      Value="Disabled" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ItemsControl.HasItems" Value="true" />
                <Condition Property="MenuItem.IsCheckable" Value="false" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false" />
                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="RibbonMenuItem.IsDropDownPositionedLeft" Value="true" />
                <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true" />
                <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true" />
              </MultiTrigger.Conditions>
              <Setter TargetName="PART_ResizeThumb" Value="{StaticResource ó}"
                      Property="FrameworkElement.Style" />
            </MultiTrigger>
            <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
              <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsCheckable" Value="true">
              <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="true">
              <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
              <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5" />
              <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                      Property="classic:SystemDropShadowChrome.Color" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="true">
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                      Property="Border.Background" />
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="MenuItem.IsPressed" Value="true">
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                      Property="Border.Background" />
              <Setter TargetName="Border"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5" />
              <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground" />
            </Trigger>
            <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
              <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="Shape.Fill" />
              <Setter TargetName="Border" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="Border" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent" />
              <Setter TargetName="CheckMark"
                      Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                      Property="Shape.Fill" />
              <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data" />
              <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="CheckMarkBorder"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="CheckMarkBorder"
                      Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None" />
              <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent" />
              <Setter TargetName="SideBarOverlay" Property="Panel.Background" Value="Transparent" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="PART_SideBarBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_SubMenuScrollViewer"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Control.Foreground" />
              <Setter TargetName="SubMenuInnerBorder" Property="Border.Background" Value="Transparent" />
              <Setter TargetName="SubMenuInnerBorder" Property="Border.CornerRadius" Value="0" />
              <Setter TargetName="MenuBorder"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="MenuBorder"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="ResizeControl"
                      Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                      Property="Border.Background" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Shape.Fill" />
              <Setter TargetName="CheckMark"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Shape.Fill" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                      Property="Border.Background" />
              <Setter TargetName="Border"
                      Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="PART_SideBarBorder" Property="Border.BorderBrush" Value="Transparent" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="MainGrid"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="TextElement.Foreground" />
              <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="Arrow"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="Shape.Fill" />
              <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="1" />
              <Setter TargetName="CheckMarkBorder"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="Border.BorderBrush" />
              <Setter TargetName="CheckMark"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      Property="Shape.Fill" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type controls:TraceSourcesView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type controls:TraceSourcesView}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <local:CustomTreeView
                ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=RootNodes}" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:TextControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:TextControl}">
          <Border Background="{TemplateBinding Background}"
                  DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="Grid">
              <Grid.Resources>

                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Margin" Value="10" />
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <ScrollViewer x:Name="ScrollViewer" HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top">

                <Grid x:Name="InnerGrid">
                  <Rectangle x:Name="Rectangle" VerticalAlignment="Top" HorizontalAlignment="Left" Stroke="Aqua"
                             TextElement.FontSize="12">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="TextDest" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="Rect2" Panel.ZIndex="100" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <Rectangle.Fill>
                      <DrawingBrush x:Name="DrawingBrush2" AlignmentX="Left" AlignmentY="Top" TileMode="None"
                                    Stretch="Uniform">
                        <DrawingBrush.Drawing>
                          <DrawingGroup x:Name="DG2" />
                        </DrawingBrush.Drawing>
                      </DrawingBrush>
                    </Rectangle.Fill>
                  </Rectangle>
                  <Canvas x:Name="Canvas" Panel.ZIndex="101" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />

                </Grid>

              </ScrollViewer>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type typeDescriptors:GenericInterface}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type typeDescriptors:GenericInterface}">
          <Border x:Name="Border" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type typeDescriptors:GenericInterface3}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type typeDescriptors:GenericInterface3}">

          <ControlTemplate.Resources>
            <kmDevWpfControls:GetTypeConverter1 x:Key="GetTypeConverter" />
            <DataTemplate x:Key="{x:Type system:Enum}" DataType="{x:Type typeDescriptors:InstanceProperty}">
              <kmDevWpfControls:EnumFlagsSelector EnumValue="{Binding}"
                                                   EnumType="{Binding Converter={StaticResource GetTypeConverter}}" />
            </DataTemplate>
            <DataTemplate x:Key="EnumFlags" DataType="{x:Type typeDescriptors:InstanceProperty}">
              <kmDevWpfControls:EnumFlagsSelector EnumValue="{Binding Value,Mode=TwoWay}"
                                                   EnumType="{Binding Value,Converter={StaticResource GetTypeConverter}}" />
            </DataTemplate>
            <local:CTS x:Key="cts" />
            <DataTemplate x:Key="StandardValues" DataType="{x:Type typeDescriptors:InstanceProperty}">
              <ComboBox SelectedItem="{Binding Value}"
                        ItemsSource="{Binding StandardValues}" />
            </DataTemplate>
            <DataTemplate x:Key="DefaultValue" DataType="{x:Type typeDescriptors:InstanceProperty}">
              <ContentPresenter Content="{Binding Value}" />
            </DataTemplate>
            <DataTemplate x:Key="String" DataType="{x:Type typeDescriptors:InstanceProperty}">
              <TextBox Text="{Binding Value,Mode=TwoWay}" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type typeDescriptors:InstanceProperty}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Margin="10" Text="{Binding PropertyDescriptor.DisplayName}" />
                <ContentPresenter Margin="10" Grid.Column="1" ContentTemplateSelector="{StaticResource cts}"
                                  Content="{Binding}" />
              </Grid>
            </DataTemplate>
            <CollectionViewSource x:Key="src"
                                  Source="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InstanceProperties}" />

            <local:InstPropValTempSel x:Key="InstPropValTempSel" />
          </ControlTemplate.Resources>
          <Border x:Name="Border" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <typeDescriptors:PropItems x:Name="ListView">
              <typeDescriptors:PropItems.ItemsPanel>
                <ItemsPanelTemplate>
                  <kmDevWpfControls:TablePanel ColumnSpacing="20" ColumnBasedOnWidth="True" IsItemsHost="True" />
                </ItemsPanelTemplate>
              </typeDescriptors:PropItems.ItemsPanel>
              <typeDescriptors:PropItems.ItemContainerStyle>
                <Style TargetType="typeDescriptors:PropItem">
                  <Setter Property="Background" Value="Azure" />
                </Style>
              </typeDescriptors:PropItems.ItemContainerStyle>
            </typeDescriptors:PropItems>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type typeDescriptors:PropItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type typeDescriptors:PropItem}">
          <Border x:Name="Border" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter Content="{TemplateBinding DataContext}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type typeDescriptors:PropItems}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type typeDescriptors:PropItems}">
          <Border x:Name="Border" Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <ItemsPresenter x:Name="ItemsPresenter" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:ContainerView}">

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:ContainerView}">
          <ControlTemplate.Resources>
            <Style x:Key="ExpandCollapseToggleStyle"
                   TargetType="kmDevWpfControls:CustomToggleButton1">
              <Setter Property="Focusable"
                      Value="False" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="kmDevWpfControls:CustomToggleButton1">
                    <Grid Width="15"
                          Height="13"
                          Background="Azure">
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup
                          x:Name="CheckStates">
                          <VisualState x:Name="Checked">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="Collapsed">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Hidden}" />
                              </ObjectAnimationUsingKeyFrames>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="Expanded">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unchecked" />
                          <VisualState x:Name="Indeterminate" />
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <Path x:Name="Collapsed"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 4 0 L 8 4 L 4 8 Z">
                        <Path.Fill>
                          <SolidColorBrush
                            Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                      <Path x:Name="Expanded"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Data="M 0 4 L 8 4 L 4 8 Z"
                            Visibility="Hidden">
                        <Path.Fill>
                          <SolidColorBrush
                            Color="{DynamicResource GlyphColor}" />
                        </Path.Fill>
                      </Path>
                    </Grid>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>

            <Style x:Key="{x:Type kmDevWpfControls:CustomTreeViewItem}"
                   TargetType="{x:Type kmDevWpfControls:CustomTreeViewItem}">
              <Setter Property="IsExpanded"
                      Value="{Binding IsExpanded, Mode=OneWay}" />
              <Setter Property="IsSelected"
                      Value="{Binding IsSelected, Mode=TwoWay}" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate
                    TargetType="{x:Type kmDevWpfControls:CustomTreeViewItem}">
                    <Grid ShowGridLines="False">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="19"
                                          Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                      </Grid.RowDefinitions>
                      <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup
                          x:Name="SelectionStates">
                          <VisualState x:Name="Selected">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames
                                Storyboard.TargetName="Bd"
                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame
                                  KeyTime="0"
                                  Value="{StaticResource SelectedBackgroundColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Unselected" />
                          <VisualState
                            x:Name="SelectedInactive">
                            <Storyboard>
                              <ColorAnimationUsingKeyFrames
                                Storyboard.TargetName="Bd"
                                Storyboard.TargetProperty="(Panel.Background).
                    (SolidColorBrush.Color)">
                                <EasingColorKeyFrame
                                  KeyTime="0"
                                  Value="{StaticResource SelectedUnfocusedColor}" />
                              </ColorAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                        </VisualStateGroup>
                        <VisualStateGroup
                          x:Name="ExpansionStates">
                          <VisualState x:Name="Expanded">
                            <Storyboard>
                              <ObjectAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.Visibility)"
                                Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame
                                  KeyTime="0"
                                  Value="{x:Static Visibility.Visible}" />
                              </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                          </VisualState>
                          <VisualState x:Name="Collapsed" />
                        </VisualStateGroup>
                      </VisualStateManager.VisualStateGroups>
                      <kmDevWpfControls:CustomToggleButton1 x:Name="Expander"
                                                             Style="{StaticResource ExpandCollapseToggleStyle}"
                                                             Command="kmDevWpfControls:CustomTreeView.ToggleNodeIsExpanded"
                                                             ClickMode="Press"
                                                             CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                                             IsChecked="{Binding IsExpanded, 
            RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
                      <Border x:Name="Bd"
                              Grid.Row="0" Grid.Column="1"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                          x:Name="PART_Header"
                          ContentSource="Header"
                          HorizontalAlignment="Stretch" />
                      </Border>
                      <ItemsPresenter x:Name="ItemsHost"
                                      Grid.Row="1"
                                      Grid.Column="1"
                                      Grid.ColumnSpan="2"
                                      Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="HasItems"
                               Value="false">
                        <Setter TargetName="Expander"
                                Property="Visibility"
                                Value="Hidden" />
                      </Trigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Width"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinWidth"
                                Value="75" />
                      </MultiTrigger>
                      <MultiTrigger>
                        <MultiTrigger.Conditions>
                          <Condition Property="HasHeader"
                                     Value="false" />
                          <Condition Property="Height"
                                     Value="Auto" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_Header"
                                Property="MinHeight"
                                Value="19" />
                      </MultiTrigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
            <HierarchicalDataTemplate DataType="{x:Type local:LifetimeScopeNode}" ItemsSource="{Binding Items}">
              <TextBlock Text="{Binding Header}" />
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type local:RegNode}" ItemsSource="{Binding Items}">
              <TextBlock Text="{Binding Header}" />
            </HierarchicalDataTemplate>
            <HierarchicalDataTemplate DataType="{x:Type local:InstanceNode}" ItemsSource="{Binding Items}">
              <TextBlock Text="{Binding Header}" />
            </HierarchicalDataTemplate>
          </ControlTemplate.Resources>
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <kmDevWpfControls:CustomTreeView x:Name="TreeView"
                                              ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Root}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="PowerShellTemplate" TargetType="{x:Type local:PowerShellConsole}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition Height="*" />
        <RowDefinition Height="Auto" />
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <wpfTerminalControlLib:WpfTerminalControl DiagnosticsEnabled="True" ForegroundColor="Black"
                                                BackgroundColor="White" AutoResize="True" Grid.Row="1"
                                                CursorBrush="DarkOrange" x:Name="Terminal"
                                                BorderBrush="Green" BorderThickness="1" Focusable="False" />
      <wpfTerminalControlLib:WrappedPowerShell x:Name="Shell" Terminal="{x:Reference Terminal}" />
      <wpfTerminalControlLib:WpfInputLine LineMode="True" InputOnly="True" CursorBrush="Azure" x:Name="Input"
                                          BorderBrush="Red"
                                          BorderThickness="1" AutoResize="True" Grid.Row="2" Focusable="True" />
      <StatusBar Grid.Row="3">
        <TextBlock x:Name="MainStatus" Width="200" />
        <ProgressBar Width="200" Maximum="100" x:Name="ProgressBar" />
      </StatusBar>
    </Grid>

  </ControlTemplate>
  <Style TargetType="{x:Type local:PowerShellConsole}">
    <Setter Property="Template" Value="{StaticResource PowerShellTemplate}" />
  </Style>


</ResourceDictionary>