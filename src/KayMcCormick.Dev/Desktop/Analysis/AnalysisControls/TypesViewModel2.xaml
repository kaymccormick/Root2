<TypesViewModel ShowBordersIsChecked="False" xmlns="clr-namespace:AnalysisControls.ViewModel;assembly=AnalysisControls" xmlns:mcacs="clr-namespace:Microsoft.CodeAnalysis.CSharp;assembly=Microsoft.CodeAnalysis.CSharp" xmlns:mcacss="clr-namespace:Microsoft.CodeAnalysis.CSharp.Syntax;assembly=Microsoft.CodeAnalysis.CSharp" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:anal="http://kaymccormick.com/xaml/analysis"
                xmlns:analysisAppLib="clr-namespace:AnalysisAppLib;assembly=AnalysisAppLib">
  <TypesViewModel.DocumentCollection>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" Type="mcacs:CSharpSyntaxNode">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Represents a non-terminal node in the syntax tree.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" Type="mcacss:TypeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for type argument list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" Type="mcacss:TupleElementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Tuple type element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Type="mcacss:ExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent expression syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" Type="mcacss:TypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent type syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" Type="mcacss:NameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent name syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" Type="mcacss:SimpleNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent simple name syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Type="mcacss:IdentifierNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for identifier name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Type="mcacss:GenericNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for generic name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" Type="mcacss:QualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for qualified name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Type="mcacss:AliasQualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for alias qualified name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" Type="mcacss:PredefinedTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for predefined types.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" Type="mcacss:ArrayTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for the array type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" Type="mcacss:PointerTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for pointer type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" Type="mcacss:NullableTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a nullable type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" Type="mcacss:TupleTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for tuple type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" Type="mcacss:OmittedTypeArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents a placeholder in the type argument list of an unbound generic type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" Type="mcacss:RefTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The ref modifier of a method's return value or a local.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" Type="mcacss:ParenthesizedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for parenthesized expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" Type="mcacss:TupleExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for tuple expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" Type="mcacss:PrefixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for prefix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" Type="mcacss:AwaitExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for an "await" expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" Type="mcacss:PostfixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for postfix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" Type="mcacss:MemberAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for member access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" Type="mcacss:ConditionalAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for conditional access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" Type="mcacss:MemberBindingExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for member binding expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" Type="mcacss:ElementBindingExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for element binding expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax" Type="mcacss:RangeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a range expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" Type="mcacss:ImplicitElementAccessSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit element access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" Type="mcacss:BinaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents an expression that has a binary operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" Type="mcacss:AssignmentExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents an expression that has an assignment operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for conditional expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax" Type="mcacss:InstanceExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent instance expression syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" Type="mcacss:ThisExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a this expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" Type="mcacss:BaseExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a base expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" Type="mcacss:LiteralExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a literal expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" Type="mcacss:MakeRefExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for MakeRef expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" Type="mcacss:RefTypeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for RefType expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for RefValue expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" Type="mcacss:CheckedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for Checked or Unchecked expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" Type="mcacss:DefaultExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for Default expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" Type="mcacss:TypeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for TypeOf expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" Type="mcacss:SizeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for SizeOf expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" Type="mcacss:InvocationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for invocation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" Type="mcacss:ElementAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for element access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" Type="mcacss:DeclarationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for the variable declaration in an out var declaration or a deconstruction declaration.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" Type="mcacss:CastExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for cast expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" Type="mcacss:AnonymousFunctionExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent anonymous function expressions are derived.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for anonymous method expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Type="mcacss:LambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent lambda expressions are derived.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for a simple lambda expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for parenthesized lambda expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" Type="mcacss:InitializerExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for initializer expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Type="mcacss:ObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for object creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for anonymous object creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Type="mcacss:ArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for stackalloc array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit stackalloc array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" Type="mcacss:OmittedArraySizeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents a placeholder in an array size list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" Type="mcacss:IsPatternExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents a simple pattern-matching expression using the "is" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax" Type="mcacss:BaseArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent argument list syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Type="mcacss:ArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for the list of arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Type="mcacss:BracketedArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for bracketed argument list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" Type="mcacss:ArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for argument.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Type="mcacss:NameColonSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class which represents the syntax node for name colon syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" Type="mcacss:StatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents the base class for all statements syntax classes.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Type="mcacss:LabeledStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a labeled statement syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Type="mcacss:GotoStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Represents a goto statement syntax
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Represents an if statement syntax.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a switch statement syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" Type="mcacss:ElseClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents an else statement syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" Type="mcacss:SwitchSectionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a switch section syntax of a switch statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax" Type="mcacss:SwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a switch label within a switch statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Type="mcacss:CasePatternSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a case label within a switch statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Type="mcacss:CaseSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a case label within a switch statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Type="mcacss:DefaultSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Represents a default label within a switch statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Type="mcacss:ExternAliasDirectiveSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Represents an ExternAlias directive syntax, e.g. "extern alias MyAlias;" with specifying "/r:MyAlias=SomeAssembly.dll " on the compiler command line.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax" Type="mcacss:MemberDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Member declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base class for type declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Type="mcacss:TypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base class for type declaration syntax (class, struct, interface).</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Type="mcacss:ClassDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class type declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Type="mcacss:StructDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Struct type declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Type="mcacss:InterfaceDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Interface type declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Type="mcacss:EnumDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Enum type declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Delegate declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax" Type="mcacss:BaseMethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base type for method declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Type="mcacss:MethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Method declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Type="mcacss:OperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Operator declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Type="mcacss:ConversionOperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Conversion operator declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Type="mcacss:ConstructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Constructor declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Type="mcacss:DestructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Destructor declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax" Type="mcacss:BasePropertyDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base type for property declaration syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Type="mcacss:AttributeListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class representing one or more attributes applied to a language construct.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" Type="mcacss:AttributeTargetSpecifierSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class representing what language construct an attribute targets.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" Type="mcacss:AttributeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Attribute syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Type="mcacss:AttributeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Attribute argument list syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" Type="mcacss:AttributeArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Attribute argument syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Type="mcacss:NameEqualsSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Class representing an identifier name followed by an equals token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" Type="mcacss:TypeParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Type parameter list syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Type="mcacss:TypeParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Type parameter syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Type="mcacss:BaseListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base list syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax" Type="mcacss:BaseTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent base type syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Type="mcacss:TypeParameterConstraintClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Type parameter constraint clause.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax" Type="mcacss:TypeParameterConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base type for type parameter constraint syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" Type="mcacss:ConstructorConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Constructor constraint syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" Type="mcacss:ClassOrStructConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base type for class or struct constraint syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" Type="mcacss:TypeConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Type constraint syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" Type="mcacss:ConstructorInitializerSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Constructor initializer syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" Type="mcacss:ArrowExpressionClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The syntax for the expression body of an expression-bodied member.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax" Type="mcacss:BaseParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Base type for parameter list syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Type="mcacss:ParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Parameter list syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Type="mcacss:BracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Parameter list syntax with surrounding brackets.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" Type="mcacss:ParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Parameter syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" Type="mcacss:CrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or &lt;seealso&gt; documentation comment tag).
            For example, the M in &lt;see cref="M" /&gt;.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" Type="mcacss:TypeCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol reference that definitely refers to a type.
            For example, "int", "A::B", "A.B", "A&lt;T&gt;", but not "M()" (has parameter list) or "this" (indexer).
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" Type="mcacss:QualifiedCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol reference to a type or non-type member that is qualified by an enclosing type or namespace.
            For example, cref="System.String.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" Type="mcacss:MemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            The unqualified part of a CrefSyntax.
            For example, "ToString()" in "object.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" Type="mcacss:NameMemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a name (an identifier, predefined type keyword, or an alias-qualified name,
            with an optional type parameter list) and an optional parameter list.
            For example, "M", "M&lt;T&gt;" or "M(int)".
            Also, "A::B()" or "string()".
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" Type="mcacss:IndexerMemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a this keyword and an optional parameter list.
            For example, "this" or "this[int]".
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Type="mcacss:OperatorMemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an operator keyword, an operator symbol and an optional parameter list.
            For example, "operator +" or "operator -[int]".
            NOTE: the operator must be overloadable.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Type="mcacss:ConversionOperatorMemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an implicit or explicit keyword, an operator keyword, a destination type, and an optional parameter list.
            For example, "implicit operator int" or "explicit operator MyType(int)".
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax" Type="mcacss:BaseCrefParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A list of cref parameters with surrounding punctuation.
            Unlike regular parameters, cref parameters do not have names.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" Type="mcacss:CrefParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A parenthesized list of cref parameters.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" Type="mcacss:CrefBracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            A bracketed list of cref parameters.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" Type="mcacss:CrefParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            An element of a BaseCrefParameterListSyntax.
            Unlike a regular parameter, a cref parameter has only an optional ref or out keyword and a type -
            there is no name and there are no attributes or other modifiers.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" Type="mcacss:StructuredTriviaSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:TypeDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a NameSyntax node using the grammar rule for names.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseTypeName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a TypeNameSyntax node using the grammar rule for type names.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a StatementSyntaxNode using grammar rule for statements.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the statement.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseMemberDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseMemberDeclaration(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a MemberDeclarationSyntax. This includes all of the kinds of members that could occur in a type declaration.
            If nothing resembling a valid member declaration is found in the input, returns null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the declaration.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input following a declaration should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseCompilationUnit" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a
            SyntaxTree instance, use CSharpSyntaxTree.ParseText instead.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the compilation unit.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseParameterList" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a ParameterListSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the parenthesized parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseBracketedParameterList" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a BracketedParameterListSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the bracketed parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseArgumentList" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse an ArgumentListSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the parenthesized argument list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseBracketedArgumentList" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse a BracketedArgumentListSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the bracketed argument list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParseAttributeArgumentList" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Parse an AttributeArgumentListSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The text of the attribute argument list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="offset">
        <analysisAppLib:XmlDocText>Optional offset into text.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="options">
        <analysisAppLib:XmlDocText xml:space="preserve">The optional parse options to use. If no options are specified default options are
            used.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="consumeFullText">
        <analysisAppLib:XmlDocText>True if extra tokens in the input should be treated as an error</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GetStandaloneExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets the containing expression that is actually a language expression and not just typed
            as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side
            of qualified names and member access expressions are not language expressions, yet the
            containing qualified names or member access expressions are indeed expressions.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GetNonGenericExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Converts a generic name expression into one without the generic arguments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="expression" />
      <analysisAppLib:Returns />
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CaseSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Block" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BlockSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UsingDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UsingDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ClassOrStructConstraint" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SwitchStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SwitchStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlSeeElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a see element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText>A cref syntax node that points to the referenced item (e.g. a class, struct).</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlSeeAlsoElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a seealso element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText>A cref syntax node that points to the referenced item (e.g. a class, struct).</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlThreadSafetyElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement(System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a threadsafety element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="isStatic">
        <analysisAppLib:XmlDocText>Indicates whether static member of this type are safe for multi-threaded operations.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="isInstance">
        <analysisAppLib:XmlDocText>Indicates whether instance members of this type are safe for multi-threaded operations.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlNameAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a syntax node for a name attribute in a xml element within a xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="parameterName">
        <analysisAppLib:XmlDocText>The value of the name attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCrefAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText xml:space="preserve">The </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <analysisAppLib:XmlDocText xml:space="preserve"> used for the xml cref attribute syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCrefAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText xml:space="preserve">The </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" />
        <analysisAppLib:XmlDocText xml:space="preserve"> used for the xml cref attribute syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="quoteKind">
        <analysisAppLib:XmlDocText>The kind of the quote for the referenced item in the cref attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlRemarksElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a remarks element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of xml node syntax that will be the content within the remarks element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlReturnsElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a returns element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of xml node syntax that will be the content within the returns element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlValueElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of xml syntax nodes that represents the content of the value element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlExceptionElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an exception element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText>Syntax representation of the reference to the exception type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of syntax nodes that represents the content of the exception element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlPermissionElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a permission element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="cref">
        <analysisAppLib:XmlDocText>Syntax representation of the reference to the permission type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of syntax nodes that represents the content of the permission element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlExampleElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an example element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of syntax nodes that represents the content of the example element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlParaElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a para element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of syntax nodes that represents the content of the para element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlParamElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a param element within xml documentation comments (e.g. for
            documentation of method parameters).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="parameterName">
        <analysisAppLib:XmlDocText>The name of the parameter.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText xml:space="preserve">A list of syntax nodes that represents the content of the param element (e.g. 
            the description and meaning of the parameter).</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlParamRefElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamRefElement(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a paramref element within xml documentation comments (e.g. for
            referencing particular parameters of a method).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="parameterName">
        <analysisAppLib:XmlDocText>The name of the referenced parameter.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlPlaceholderElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a placeholder element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of syntax nodes that represents the content of the placeholder element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlEmptyElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of a named empty xml element within xml documentation comments.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="localName">
        <analysisAppLib:XmlDocText>The name of the empty xml element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="name">
        <analysisAppLib:XmlDocText>The name of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="value">
        <analysisAppLib:XmlDocText>The value of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.SyntaxToken[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="name">
        <analysisAppLib:XmlDocText>The name of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="textTokens">
        <analysisAppLib:XmlDocText>A list of tokens used for the value of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="name">
        <analysisAppLib:XmlDocText>The name of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="quoteKind">
        <analysisAppLib:XmlDocText>The kind of the quote token to be used to quote the value (e.g. " or ').</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="textTokens">
        <analysisAppLib:XmlDocText>A list of tokens used for the value of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="name">
        <analysisAppLib:XmlDocText>The name of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="quoteKind">
        <analysisAppLib:XmlDocText>The kind of the quote token to be used to quote the value (e.g. " or ').</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
      <analysisAppLib:Param Name="textTokens">
        <analysisAppLib:XmlDocText>A list of tokens used for the value of the xml text attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlNewLine" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNewLine(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text that contains a newline token with a documentation comment 
            exterior trivia at the end (continued documentation comment).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="text">
        <analysisAppLib:XmlDocText>The raw text within the new line.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlText" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="value">
        <analysisAppLib:XmlDocText>The string literal used as the text of the xml text node.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlText" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxToken[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="textTokens">
        <analysisAppLib:XmlDocText>A list of text tokens used as the text of the xml text node.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IdentifierName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates an IdentifierNameSyntax node.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="name">
        <analysisAppLib:XmlDocText>The identifier name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ShebangDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ShebangDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ShebangDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ShebangDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NullableDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NullableDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NullableDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AccessorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AccessorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DocumentationComment" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates an xml documentation comment that abstracts xml syntax creation.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText xml:space="preserve">
            A list of xml node syntax that will be the content within the xml documentation comment
            (e.g. a summary element, a returns element, exception element and so on).
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlSummaryElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Creates a summary element within an xml documentation comment.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <analysisAppLib:Param Name="content">
        <analysisAppLib:XmlDocText>A list of xml node syntax that will be the content within the summary element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Param>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IndexerMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IndexerMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IndexerMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IndexerMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConversionOperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConversionOperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConversionOperatorMemberCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CrefParameter" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CrefParameterSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CrefParameter" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CrefParameterSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlElementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlElementStartTag" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlElementStartTagSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlElementEndTag" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlElementEndTagSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlElementEndTag" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlElementEndTagSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlEmptyElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlEmptyElementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlPrefix" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlPrefixSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlPrefix" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlPrefixSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlPrefix" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlPrefixSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlTextAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlTextAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlTextAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlTextAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCrefAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCrefAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCrefAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCrefAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlNameAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlNameAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlNameAttribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlNameAttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlText" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlTextSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCDataSection" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCDataSectionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlCDataSection" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCDataSectionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlProcessingInstruction" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlProcessingInstruction" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlProcessingInstruction" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlComment" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCommentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="XmlComment" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new XmlCommentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IfDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IfDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IfDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IfDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElifDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElifDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElifDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElifDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElseDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElseDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElseDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElseDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EndIfDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EndIfDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EndIfDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EndIfDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RegionDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RegionDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RegionDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RegionDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EndRegionDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EndRegionDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EndRegionDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EndRegionDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ErrorDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ErrorDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ErrorDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ErrorDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WarningDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WarningDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WarningDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WarningDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="BadDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BadDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="BadDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BadDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UndefDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UndefDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UndefDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LineDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PragmaWarningDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PragmaWarningDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PragmaChecksumDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PragmaChecksumDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ReferenceDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ReferenceDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ReferenceDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ReferenceDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LoadDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LoadDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LoadDirectiveTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LoadDirectiveTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EnumDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EnumDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EnumDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EnumDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DelegateDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DelegateDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DelegateDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DelegateDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EnumMemberDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EnumMemberDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EnumMemberDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EnumMemberDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SimpleBaseType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SimpleBaseTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeParameterConstraintClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeParameterConstraintClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeParameterConstraintClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeParameterConstraintClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstructorConstraint" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstructorConstraintSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ClassOrStructConstraint" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ClassOrStructConstraint" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeConstraint" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeConstraintSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FieldDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FieldDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EventFieldDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EventFieldDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExplicitInterfaceSpecifier" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExplicitInterfaceSpecifierSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExplicitInterfaceSpecifier" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExplicitInterfaceSpecifierSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MethodDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MethodDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MethodDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MethodDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OperatorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OperatorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConversionOperatorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConversionOperatorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstructorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstructorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstructorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstructorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstructorInitializer" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstructorInitializerSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstructorInitializer" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstructorInitializerSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DestructorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DestructorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DestructorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DestructorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PropertyDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PropertyDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PropertyDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PropertyDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrowExpressionClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrowExpressionClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrowExpressionClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrowExpressionClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EventDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EventDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EventDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EventDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IndexerDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IndexerDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AccessorDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AccessorDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Parameter" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ParameterSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IncompleteMember" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IncompleteMemberSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SkippedTokensTrivia" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SkippedTokensTriviaSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QualifiedCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QualifiedCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QualifiedCref" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QualifiedCrefSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CheckedStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CheckedStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UnsafeStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UnsafeStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LockStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LockStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IfStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IfStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElseClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElseClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElseClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElseClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CasePatternSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CasePatternSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CasePatternSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CaseSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CaseSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefaultSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefaultSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefaultSwitchLabel" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefaultSwitchLabelSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SwitchExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SwitchExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SwitchExpressionArm" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SwitchExpressionArm" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SwitchExpressionArm" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchFilterClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchFilterClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CatchFilterClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CatchFilterClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FinallyClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FinallyClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FinallyClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FinallyClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExternAliasDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExternAliasDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExternAliasDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UsingDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UsingDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UsingDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UsingDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UsingDirective" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UsingDirectiveSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NamespaceDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NamespaceDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AttributeTargetSpecifier" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeTargetSpecifierSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AttributeTargetSpecifier" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeTargetSpecifierSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Attribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Attribute" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AttributeArgument" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeArgumentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AttributeArgument" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AttributeArgumentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameEquals" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameEqualsSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameEquals" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameEqualsSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameEquals" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameEqualsSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeParameter" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeParameterSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeParameter" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeParameterSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ClassDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ClassDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ClassDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ClassDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="StructDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new StructDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="StructDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new StructDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterfaceDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterfaceDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterfaceDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterfaceDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WhenClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WhenClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DiscardPattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardPattern(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DiscardPatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DeclarationPattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DeclarationPatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VarPattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VarPattern(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VarPatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VarPattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VarPattern(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VarPatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RecursivePattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RecursivePattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RecursivePatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Subpattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Subpattern(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SubpatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Subpattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Subpattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SubpatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConstantPattern" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConstantPatternSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterpolatedStringText" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolatedStringTextSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Interpolation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Interpolation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Interpolation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterpolationAlignmentClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationAlignmentClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterpolationFormatClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationFormatClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterpolationFormatClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolationFormatClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GlobalStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GlobalStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LocalFunctionStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LocalFunctionStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LocalFunctionStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LocalFunctionStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LocalDeclarationStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LocalDeclarationStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VariableDeclaration" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VariableDeclarationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VariableDeclarator" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VariableDeclaratorSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VariableDeclarator" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VariableDeclaratorSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="VariableDeclarator" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new VariableDeclaratorSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EqualsValueClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EqualsValueClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="EqualsValueClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new EqualsValueClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SingleVariableDesignation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingleVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SingleVariableDesignationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DiscardDesignation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DiscardDesignationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ExpressionStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ExpressionStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LabeledStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LabeledStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LabeledStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LabeledStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GotoStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GotoStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ReturnStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ReturnStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ThrowStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ThrowStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="YieldStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new YieldStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WhileStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WhileStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DoStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DoStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ForStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ForStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ForEachStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ForEachStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ForEachStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ForEachStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ForEachVariableStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ForEachVariableStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="UsingStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new UsingStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FixedStatement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FixedStatementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InvocationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InvocationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElementAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElementAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElementAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElementAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Argument" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArgumentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Argument" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArgumentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameColon" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameColonSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameColon" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameColonSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NameColon" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NameColonSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DeclarationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DeclarationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CastExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CastExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CastExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CastExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AnonymousMethodExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AnonymousMethodExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SimpleLambdaExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SimpleLambdaExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SimpleLambdaExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParenthesizedLambdaExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ParenthesizedLambdaExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParenthesizedLambdaExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ParenthesizedLambdaExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ObjectCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ObjectCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ObjectCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AnonymousObjectMemberDeclarator" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AnonymousObjectMemberDeclarator" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="StackAllocArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="StackAllocArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="StackAllocArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitStackAllocArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitStackAllocArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitStackAllocArrayCreationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitStackAllocArrayCreationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QueryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QueryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QueryBody" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QueryBodySyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FromClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FromClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FromClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FromClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FromClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FromClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="FromClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new FromClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LetClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LetClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LetClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LetClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LetClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LetClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinIntoClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinIntoClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinIntoClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinIntoClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="JoinIntoClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new JoinIntoClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WhereClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WhereClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WhereClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WhereClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Ordering" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OrderingSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="Ordering" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OrderingSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SelectClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SelectClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SelectClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SelectClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GroupClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GroupClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GroupClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GroupClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QueryContinuation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QueryContinuationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QueryContinuation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QueryContinuationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QueryContinuation" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QueryContinuationSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OmittedArraySizeExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OmittedArraySizeExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InterpolatedStringExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InterpolatedStringExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IsPatternExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IsPatternExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IsPatternExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IsPatternExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ThrowExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ThrowExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ThrowExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ThrowExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="WhenClause" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new WhenClauseSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="IdentifierName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new IdentifierNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QualifiedName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QualifiedNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="QualifiedName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new QualifiedNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GenericName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GenericNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GenericName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GenericNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="GenericName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new GenericNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AliasQualifiedName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AliasQualifiedName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AliasQualifiedName" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PredefinedType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PredefinedTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ArrayType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ArrayTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PointerType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PointerTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PointerType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PointerTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NullableType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NullableTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="NullableType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new NullableTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TupleElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TupleElementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TupleElement" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TupleElementSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="OmittedTypeArgument" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new OmittedTypeArgumentSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefType" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefTypeSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParenthesizedExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ParenthesizedExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ParenthesizedExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ParenthesizedExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PrefixUnaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PrefixUnaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PrefixUnaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PrefixUnaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AwaitExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AwaitExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AwaitExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AwaitExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PostfixUnaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PostfixUnaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="PostfixUnaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new PostfixUnaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MemberAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MemberAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MemberAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MemberAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConditionalAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConditionalAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConditionalAccessExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConditionalAccessExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MemberBindingExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MemberBindingExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MemberBindingExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MemberBindingExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ElementBindingExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ElementBindingExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RangeExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RangeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RangeExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RangeExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RangeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RangeExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ImplicitElementAccess" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ImplicitElementAccessSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="BinaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BinaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="BinaryExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BinaryExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AssignmentExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AssignmentExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="AssignmentExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new AssignmentExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConditionalExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConditionalExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ConditionalExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ConditionalExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="ThisExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new ThisExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="BaseExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new BaseExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LiteralExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LiteralExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="LiteralExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new LiteralExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MakeRefExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MakeRefExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="MakeRefExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new MakeRefExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefTypeExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefTypeExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefTypeExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefTypeExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefValueExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefValueExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="RefValueExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new RefValueExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CheckedExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CheckedExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="CheckedExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new CheckedExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefaultExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefaultExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="DefaultExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new DefaultExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeOfExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeOfExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="TypeOfExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new TypeOfExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SizeOfExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SizeOfExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="SizeOfExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new SizeOfExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:MethodDocumentation MemberName="InvocationExpression" ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)" Type="mcacs:SyntaxFactory">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Creates a new InvocationExpressionSyntax instance.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:MethodDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="LessThanToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.LessThanToken" Type="mcacss:TypeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing less than.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Arguments" Type="mcacss:TypeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of TypeSyntax node representing the type arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="GreaterThanToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.GreaterThanToken" Type="mcacss:TypeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing greater than.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Type" Type="mcacss:TupleElementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type of the tuple element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Identifier" Type="mcacss:TupleElementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the name of the tuple element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Identifier" Type="mcacss:IdentifierNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the keyword for the kind of the identifier name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Identifier" Type="mcacss:GenericNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the name of the identifier of the generic name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="TypeArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.TypeArgumentList" Type="mcacss:GenericNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeArgumentListSyntax node representing the list of type arguments of the generic name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.Identifier" Type="mcacss:SimpleNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the identifier of the simple name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Left" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Left" Type="mcacss:QualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>NameSyntax node representing the name on the left side of the dot token of the qualified name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="DotToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.DotToken" Type="mcacss:QualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the dot.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Right" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Right" Type="mcacss:QualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SimpleNameSyntax node representing the name on the right side of the dot token of the qualified name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Alias" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Alias" Type="mcacss:AliasQualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>IdentifierNameSyntax node representing the name of the alias</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.ColonColonToken" Type="mcacss:AliasQualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing colon colon.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Name" Type="mcacss:AliasQualifiedNameSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SimpleNameSyntax node representing the name that is being alias qualified.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Keyword" Type="mcacss:PredefinedTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken which represents the keyword corresponding to the predefined type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ElementType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.ElementType" Type="mcacss:ArrayTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax node representing the type of the element of the array.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="RankSpecifiers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.RankSpecifiers" Type="mcacss:ArrayTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxList of ArrayRankSpecifierSyntax nodes representing the list of rank specifiers for the array.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ElementType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.ElementType" Type="mcacss:PointerTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax node that represents the element type of the pointer.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AsteriskToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.AsteriskToken" Type="mcacss:PointerTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the asterisk.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ElementType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.ElementType" Type="mcacss:NullableTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax node representing the type of the element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="QuestionToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.QuestionToken" Type="mcacss:NullableTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the question mark.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.OpenParenToken" Type="mcacss:TupleTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.CloseParenToken" Type="mcacss:TupleTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OmittedTypeArgumentToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.OmittedTypeArgumentToken" Type="mcacss:OmittedTypeArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the omitted type argument.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ReadOnlyKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.ReadOnlyKeyword" Type="mcacss:RefTypeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional "readonly" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.OpenParenToken" Type="mcacss:ParenthesizedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Expression" Type="mcacss:ParenthesizedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression enclosed within the parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.CloseParenToken" Type="mcacss:ParenthesizedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.OpenParenToken" Type="mcacss:TupleExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Arguments" Type="mcacss:TupleExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.CloseParenToken" Type="mcacss:TupleExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.OperatorToken" Type="mcacss:PrefixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the kind of the operator of the prefix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Operand" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Operand" Type="mcacss:PrefixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax representing the operand of the prefix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AwaitKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.AwaitKeyword" Type="mcacss:AwaitExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the kind "await" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Expression" Type="mcacss:AwaitExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax representing the operand of the "await" operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Operand" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Operand" Type="mcacss:PostfixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax representing the operand of the postfix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.OperatorToken" Type="mcacss:PostfixUnaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the kind of the operator of the postfix unary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Expression" Type="mcacss:MemberAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the object that the member belongs to.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.OperatorToken" Type="mcacss:MemberAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the kind of the operator in the member access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Name" Type="mcacss:MemberAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SimpleNameSyntax node representing the member being accessed.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Expression" Type="mcacss:ConditionalAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the object conditionally accessed.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.OperatorToken" Type="mcacss:ConditionalAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the question mark.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="WhenNotNull" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WhenNotNull" Type="mcacss:ConditionalAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the access expression to be executed when the object is not null.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.OperatorToken" Type="mcacss:MemberBindingExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing dot.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Name" Type="mcacss:MemberBindingExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SimpleNameSyntax node representing the member being bound to.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.ArgumentList" Type="mcacss:ElementBindingExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the element binding expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="LeftOperand" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.LeftOperand" Type="mcacss:RangeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the left of the range operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.OperatorToken" Type="mcacss:RangeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the operator of the range expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="RightOperand" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.RightOperand" Type="mcacss:RangeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the right of the range operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.ArgumentList" Type="mcacss:ImplicitElementAccessSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the implicit element access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Left" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Left" Type="mcacss:BinaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the left of the binary operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.OperatorToken" Type="mcacss:BinaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the operator of the binary expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Right" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Right" Type="mcacss:BinaryExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the right of the binary operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Left" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Left" Type="mcacss:AssignmentExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the left of the assignment operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.OperatorToken" Type="mcacss:AssignmentExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the operator of the assignment expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Right" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Right" Type="mcacss:AssignmentExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the right of the assignment operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Condition" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Condition" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the condition of the conditional expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="QuestionToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.QuestionToken" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the question mark.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="WhenTrue" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenTrue" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression to be executed when the condition is true.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.ColonToken" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the colon.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="WhenFalse" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenFalse" Type="mcacss:ConditionalExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression to be executed when the condition is false.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Token" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Token" Type="mcacss:ThisExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the this keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Token" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Token" Type="mcacss:BaseExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the base keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Token" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Token" Type="mcacss:LiteralExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the keyword corresponding to the kind of the literal expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Keyword" Type="mcacss:MakeRefExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the MakeRefKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.OpenParenToken" Type="mcacss:MakeRefExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Expression" Type="mcacss:MakeRefExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Argument of the primary function.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.CloseParenToken" Type="mcacss:MakeRefExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Keyword" Type="mcacss:RefTypeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the RefTypeKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.OpenParenToken" Type="mcacss:RefTypeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Expression" Type="mcacss:RefTypeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Argument of the primary function.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.CloseParenToken" Type="mcacss:RefTypeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Keyword" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the RefValueKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.OpenParenToken" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Expression" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Typed reference expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Comma" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Comma" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Comma separating the arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Type" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The type of the value.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.CloseParenToken" Type="mcacss:RefValueExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Keyword" Type="mcacss:CheckedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the checked or unchecked keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.OpenParenToken" Type="mcacss:CheckedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Expression" Type="mcacss:CheckedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Argument of the primary function.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.CloseParenToken" Type="mcacss:CheckedExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Keyword" Type="mcacss:DefaultExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the DefaultKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.OpenParenToken" Type="mcacss:DefaultExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Type" Type="mcacss:DefaultExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Argument of the primary function.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.CloseParenToken" Type="mcacss:DefaultExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Keyword" Type="mcacss:TypeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the TypeOfKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.OpenParenToken" Type="mcacss:TypeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Type" Type="mcacss:TypeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The expression to return type of.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.CloseParenToken" Type="mcacss:TypeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Keyword" Type="mcacss:SizeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the SizeOfKeyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.OpenParenToken" Type="mcacss:SizeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Type" Type="mcacss:SizeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Argument of the primary function.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.CloseParenToken" Type="mcacss:SizeOfExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Expression" Type="mcacss:InvocationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression part of the invocation.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.ArgumentList" Type="mcacss:InvocationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ArgumentListSyntax node representing the list of arguments of the invocation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Expression" Type="mcacss:ElementAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression which is accessing the element.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.ArgumentList" Type="mcacss:ElementAccessExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the element access expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Designation" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Designation" Type="mcacss:DeclarationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Declaration representing the variable declared in an out parameter or deconstruction.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.OpenParenToken" Type="mcacss:CastExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Type" Type="mcacss:CastExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax node representing the type to which the expression is being cast.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.CloseParenToken" Type="mcacss:CastExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Expression" Type="mcacss:CastExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression that is being casted.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AsyncKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AsyncKeyword" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "async" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="DelegateKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.DelegateKeyword" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the delegate keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParameterList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.ParameterList" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>List of parameters of the anonymous method expression, or null if there no parameters are specified.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Block" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the anonymous function.
            This will never be null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExpressionBody" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.ExpressionBody" Type="mcacss:AnonymousMethodExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Inherited from AnonymousFunctionExpressionSyntax, but not used for
            AnonymousMethodExpressionSyntax.  This will always be null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AsyncKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AsyncKeyword" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "async" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Parameter" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Parameter" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ParameterSyntax node representing the parameter of the lambda expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArrowToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.ArrowToken" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing equals greater than.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Block" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Block" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExpressionBody" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.ExpressionBody" Type="mcacss:SimpleLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AsyncKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.AsyncKeyword" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "async" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParameterList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ParameterList" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ParameterListSyntax node representing the list of parameters for the lambda expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArrowToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ArrowToken" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing equals greater than.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Block" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Block" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExpressionBody" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ExpressionBody" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArrowToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken" Type="mcacss:LambdaExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing equals greater than.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AsyncKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword" Type="mcacss:AnonymousFunctionExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "async" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Block" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Block" Type="mcacss:AnonymousFunctionExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the anonymous function.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExpressionBody" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.ExpressionBody" Type="mcacss:AnonymousFunctionExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the anonymous function.
            Only one of Block or ExpressionBody will be non-null.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Body" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body" Type="mcacss:AnonymousFunctionExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Either the </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Block" />
        <analysisAppLib:XmlDocText xml:space="preserve"> if it is not </analysisAppLib:XmlDocText>
        <analysisAppLib:Code>
          <analysisAppLib:XmlDocText>null</analysisAppLib:XmlDocText>
        </analysisAppLib:Code>
        <analysisAppLib:XmlDocText xml:space="preserve"> or the
            </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.ExpressionBody" />
        <analysisAppLib:XmlDocText xml:space="preserve"> otherwise.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.OpenBraceToken" Type="mcacss:InitializerExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open brace.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expressions" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Expressions" Type="mcacss:InitializerExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of ExpressionSyntax representing the list of expressions in the initializer expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.CloseBraceToken" Type="mcacss:InitializerExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close brace.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NewKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword" Type="mcacss:ObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the new keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Type" Type="mcacss:ObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax representing the type of the object being created.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ArgumentList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList" Type="mcacss:ObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ArgumentListSyntax representing the list of arguments passed as part of the object creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializer" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer" Type="mcacss:ObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>InitializerExpressionSyntax representing the initializer expression for the object being created.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NewKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.NewKeyword" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the new keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.OpenBraceToken" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open brace.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Initializers" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of AnonymousObjectMemberDeclaratorSyntax representing the list of object member initializers.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.CloseBraceToken" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close brace.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NewKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.NewKeyword" Type="mcacss:ArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the new keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Type" Type="mcacss:ArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ArrayTypeSyntax node representing the type of the array.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializer" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Initializer" Type="mcacss:ArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>InitializerExpressionSyntax node representing the initializer of the array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NewKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.NewKeyword" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the new keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.OpenBracketToken" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Commas" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Commas" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxList of SyntaxToken representing the commas in the implicit array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.CloseBracketToken" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializer" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Initializer" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>InitializerExpressionSyntax representing the initializer expression of the implicit array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="StackAllocKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.StackAllocKeyword" Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the stackalloc keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Type" Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>TypeSyntax node representing the type of the stackalloc array.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializer" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Initializer" Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>InitializerExpressionSyntax node representing the initializer of the stackalloc array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="StackAllocKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.StackAllocKeyword" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the stackalloc keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.OpenBracketToken" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the open bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.CloseBracketToken" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the close bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Initializer" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.Initializer" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>InitializerExpressionSyntax representing the initializer expression of the implicit stackalloc array creation expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OmittedArraySizeExpressionToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.OmittedArraySizeExpressionToken" Type="mcacss:OmittedArraySizeExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the omitted array size expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="StringStartToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringStartToken" Type="mcacss:InterpolatedStringExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The first part of an interpolated string, $" or $@"</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Contents" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Contents" Type="mcacss:InterpolatedStringExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>List of parts of the interpolated string, each one is either a literal part or an interpolation.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="StringEndToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringEndToken" Type="mcacss:InterpolatedStringExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The closing quote of the interpolated string.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Expression" Type="mcacss:IsPatternExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the expression on the left of the "is" operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Pattern" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Pattern" Type="mcacss:IsPatternExpressionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>PatternSyntax node representing the pattern on the right of the "is" operator.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.OpenParenToken" Type="mcacss:ArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Arguments" Type="mcacss:ArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.CloseParenToken" Type="mcacss:ArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close parenthesis.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.OpenBracketToken" Type="mcacss:BracketedArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing open bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Arguments" Type="mcacss:BracketedArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.CloseBracketToken" Type="mcacss:BracketedArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing close bracket.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax.Arguments" Type="mcacss:BaseArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SeparatedSyntaxList of ArgumentSyntax nodes representing the list of arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NameColon" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.NameColon" Type="mcacss:ArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>NameColonSyntax node representing the optional name arguments.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="RefKindKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefKindKeyword" Type="mcacss:ArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the optional ref or out keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Expression" Type="mcacss:ArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the argument.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="RefOrOutKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefOrOutKeyword" Type="mcacss:ArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Pre C# 7.2 back-compat overload, which simply calls the replacement property </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefKindKeyword" />
        <analysisAppLib:XmlDocText xml:space="preserve">.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Name" Type="mcacss:NameColonSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>IdentifierNameSyntax representing the identifier name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.ColonToken" Type="mcacss:NameColonSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing colon.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NameEquals" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.NameEquals" Type="mcacss:AnonymousObjectMemberDeclaratorSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>NameEqualsSyntax representing the optional name of the member being initialized.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Expression" Type="mcacss:AnonymousObjectMemberDeclaratorSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax representing the value the member is initialized with.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Identifier" Type="mcacss:FromClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Identifier" Type="mcacss:LetClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Identifier" Type="mcacss:JoinClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Identifier" Type="mcacss:JoinIntoClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Identifier" Type="mcacss:QueryContinuationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Expression" Type="mcacss:ConstantPatternSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>ExpressionSyntax node representing the constant expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="TextToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.TextToken" Type="mcacss:InterpolatedStringTextSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The text contents of a part of the interpolated string.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="FormatStringToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.FormatStringToken" Type="mcacss:InterpolationFormatClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>The text contents of the format specifier for an interpolation.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Identifier" Type="mcacss:LocalFunctionStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.SemicolonToken" Type="mcacss:LocalFunctionStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Modifiers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Modifiers" Type="mcacss:LocalDeclarationStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the modifier list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AllowsAnyExpression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression" Type="mcacss:ExpressionStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Returns true if the </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Expression" />
        <analysisAppLib:XmlDocText xml:space="preserve"> property is allowed by the rules of the
            language to be an arbitrary expression, not just a statement expression.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
      <assembly:Null />
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Identifier" Type="mcacss:LabeledStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.ColonToken" Type="mcacss:LabeledStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets a SyntaxToken that represents the colon following the statement's label.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="GotoKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.GotoKeyword" Type="mcacss:GotoStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the goto keyword.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CaseOrDefaultKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.CaseOrDefaultKeyword" Type="mcacss:GotoStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the case or default keywords if any exists.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Expression" Type="mcacss:GotoStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a constant expression for a goto case statement.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.SemicolonToken" Type="mcacss:GotoStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the semi-colon at the end of the statement.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Identifier" Type="mcacss:ForEachStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Variable" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Variable" Type="mcacss:ForEachVariableStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            The variable(s) of the loop. In correct code this is a tuple
            literal, declaration expression with a tuple designator, or
            a discard syntax in the form of a simple identifier. In broken
            code it could be something else.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="IfKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.IfKeyword" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the if keyword.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.OpenParenToken" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open parenthesis before the if statement's condition expression.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Condition" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Condition" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax that represents the condition of the if statement.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.CloseParenToken" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the close parenthesis after the if statement's condition expression.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Statement" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Statement" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a StatementSyntax the represents the statement to be executed when the condition is true.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Else" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Else" Type="mcacss:IfStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets an ElseClauseSyntax that represents the statement to be executed when the condition is false if such statement exists.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SwitchKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.SwitchKeyword" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the switch keyword.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenParenToken" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open parenthesis preceding the switch governing expression.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Expression" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax representing the expression of the switch statement.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseParenToken" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the close parenthesis following the switch governing expression.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenBraceToken" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open braces preceding the switch sections.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Sections" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Sections" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxList of SwitchSectionSyntax's that represents the switch sections of the switch statement.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseBraceToken" Type="mcacss:SwitchStatementSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open braces following the switch sections.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Identifier" Type="mcacss:VariableDeclaratorSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ElseKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.ElseKeyword" Type="mcacss:ElseClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a syntax token
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Labels" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Labels" Type="mcacss:SwitchSectionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxList of SwitchLabelSyntax's the represents the possible labels that control can transfer to within the section.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Statements" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Statements" Type="mcacss:SwitchSectionSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxList of StatementSyntax's the represents the statements to be executed when control transfer to a label the belongs to the section.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Keyword" Type="mcacss:CasePatternSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the case keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Pattern" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Pattern" Type="mcacss:CasePatternSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a PatternSyntax that represents the pattern that gets matched for the case label.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Keyword" Type="mcacss:CaseSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the case keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Value" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Value" Type="mcacss:CaseSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax that represents the constant expression that gets matched for the case label.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Keyword" Type="mcacss:DefaultSwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the default keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.Keyword" Type="mcacss:SwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents a case or default keyword that belongs to a switch label.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.ColonToken" Type="mcacss:SwitchLabelSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the colon that terminates the switch label.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AttributeLists" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AttributeLists" Type="mcacss:CompilationUnitSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExternKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.ExternKeyword" Type="mcacss:ExternAliasDirectiveSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the extern keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AliasKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.AliasKeyword" Type="mcacss:ExternAliasDirectiveSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the alias keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Identifier" Type="mcacss:ExternAliasDirectiveSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.SemicolonToken" Type="mcacss:ExternAliasDirectiveSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.SemicolonToken" Type="mcacss:NamespaceDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Keyword" Type="mcacss:ClassDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the class keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Keyword" Type="mcacss:StructDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the struct keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Keyword" Type="mcacss:InterfaceDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the interface keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Keyword" Type="mcacss:TypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type keyword token ("class", "struct", "interface").</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ConstraintClauses" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.ConstraintClauses" Type="mcacss:TypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type constraint list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Members" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Members" Type="mcacss:TypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the member declarations.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="EnumKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.EnumKeyword" Type="mcacss:EnumDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the enum keyword token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Members" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Members" Type="mcacss:EnumDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the members declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.SemicolonToken" Type="mcacss:EnumDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.Identifier" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="BaseList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.BaseList" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the base type list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.OpenBraceToken" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open brace token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBraceToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.CloseBraceToken" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close brace token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.SemicolonToken" Type="mcacss:BaseTypeDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="DelegateKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.DelegateKeyword" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "delegate" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ReturnType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ReturnType" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the return type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Identifier" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParameterList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ParameterList" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ConstraintClauses" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ConstraintClauses" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the constraint clause list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.SemicolonToken" Type="mcacss:DelegateDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Identifier" Type="mcacss:EnumMemberDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ReturnType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ReturnType" Type="mcacss:MethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the return type syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Identifier" Type="mcacss:MethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ConstraintClauses" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ConstraintClauses" Type="mcacss:MethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the constraint clause list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.SemicolonToken" Type="mcacss:MethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ReturnType" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.ReturnType" Type="mcacss:OperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the return type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorKeyword" Type="mcacss:OperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "operator" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorToken" Type="mcacss:OperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the operator token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.SemicolonToken" Type="mcacss:OperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ImplicitOrExplicitKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword" Type="mcacss:ConversionOperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "implicit" or "explicit" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword" Type="mcacss:ConversionOperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "operator" token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type" Type="mcacss:ConversionOperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken" Type="mcacss:ConversionOperatorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Identifier" Type="mcacss:ConstructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.SemicolonToken" Type="mcacss:ConstructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="TildeToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.TildeToken" Type="mcacss:DestructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the tilde token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Identifier" Type="mcacss:DestructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.SemicolonToken" Type="mcacss:DestructorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParameterList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.ParameterList" Type="mcacss:BaseMethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.SemicolonToken" Type="mcacss:BaseMethodDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Identifier" Type="mcacss:PropertyDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Identifier" Type="mcacss:EventDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParameterList" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ParameterList" Type="mcacss:IndexerDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.Type" Type="mcacss:BasePropertyDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExplicitInterfaceSpecifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.ExplicitInterfaceSpecifier" Type="mcacss:BasePropertyDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional explicit interface specifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AttributeLists" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax.AttributeLists" Type="mcacss:MemberDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Modifiers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax.Modifiers" Type="mcacss:MemberDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the modifier list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.OpenBracketToken" Type="mcacss:AttributeListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Target" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Target" Type="mcacss:AttributeListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional construct targeted by the attribute.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Attributes" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Attributes" Type="mcacss:AttributeListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.CloseBracketToken" Type="mcacss:AttributeListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Identifier" Type="mcacss:AttributeTargetSpecifierSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.ColonToken" Type="mcacss:AttributeTargetSpecifierSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the colon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Name" Type="mcacss:AttributeSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.OpenParenToken" Type="mcacss:AttributeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Arguments" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Arguments" Type="mcacss:AttributeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the arguments syntax list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.CloseParenToken" Type="mcacss:AttributeArgumentListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Expression" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Expression" Type="mcacss:AttributeArgumentSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the expression.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Name" Type="mcacss:NameEqualsSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier name.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="LessThanToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.LessThanToken" Type="mcacss:TypeParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the &lt; token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Parameters" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Parameters" Type="mcacss:TypeParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="GreaterThanToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.GreaterThanToken" Type="mcacss:TypeParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the &gt; token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AttributeLists" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.AttributeLists" Type="mcacss:TypeParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Identifier" Type="mcacss:TypeParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken" Type="mcacss:BaseListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the colon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Types" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types" Type="mcacss:BaseListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the base type references.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Name" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Name" Type="mcacss:TypeParameterConstraintClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.ColonToken" Type="mcacss:TypeParameterConstraintClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the colon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Constraints" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Constraints" Type="mcacss:TypeParameterConstraintClauseSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the constraints list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="NewKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.NewKeyword" Type="mcacss:ConstructorConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "new" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.OpenParenToken" Type="mcacss:ConstructorConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open paren keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.CloseParenToken" Type="mcacss:ConstructorConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close paren keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ClassOrStructKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.ClassOrStructKeyword" Type="mcacss:ClassOrStructConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the constraint keyword ("class" or "struct").</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="QuestionToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.QuestionToken" Type="mcacss:ClassOrStructConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>SyntaxToken representing the question mark.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Type" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Type" Type="mcacss:TypeConstraintSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the type syntax.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ColonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ColonToken" Type="mcacss:ConstructorInitializerSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the colon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ThisOrBaseKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ThisOrBaseKeyword" Type="mcacss:ConstructorInitializerSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the "this" or "base" keyword.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AttributeLists" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AttributeLists" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Modifiers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Modifiers" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the modifier list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Keyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Keyword" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the keyword token, or identifier if an erroneous accessor declaration.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Body" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Body" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional body block which may be empty, but it is null if there are no braces.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ExpressionBody" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.ExpressionBody" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional expression body.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="SemicolonToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.SemicolonToken" Type="mcacss:AccessorDeclarationSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the optional semicolon token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.OpenParenToken" Type="mcacss:ParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.CloseParenToken" Type="mcacss:ParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.OpenBracketToken" Type="mcacss:BracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.CloseBracketToken" Type="mcacss:BracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Parameters" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax.Parameters" Type="mcacss:BaseParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="AttributeLists" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.AttributeLists" Type="mcacss:ParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the attribute declaration list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Modifiers" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Modifiers" Type="mcacss:ParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the modifier list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Identifier" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Identifier" Type="mcacss:ParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the identifier.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OperatorToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.OperatorToken" Type="mcacss:OperatorMemberCrefSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the operator token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.OpenParenToken" Type="mcacss:CrefParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseParenToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.CloseParenToken" Type="mcacss:CrefParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close paren token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="OpenBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.OpenBracketToken" Type="mcacss:CrefBracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the open bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="CloseBracketToken" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.CloseBracketToken" Type="mcacss:CrefBracketedParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the close bracket token.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="Parameters" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax.Parameters" Type="mcacss:BaseCrefParameterListSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText>Gets the parameter list.</analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="RefOrOutKeyword" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.RefOrOutKeyword" Type="mcacss:CrefParameterSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Pre C# 7.2 back-compat overload, which simply calls the replacement property </analysisAppLib:XmlDocText>
        <analysisAppLib:Crossref XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.RefKindKeyword" />
        <analysisAppLib:XmlDocText xml:space="preserve">.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
    <analysisAppLib:PropertyDocumentation MemberName="ParentTrivia" ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.ParentTrivia" Type="mcacss:StructuredTriviaSyntax">
      <analysisAppLib:Summary>
        <analysisAppLib:XmlDocText xml:space="preserve">
            Get parent trivia.
            </analysisAppLib:XmlDocText>
      </analysisAppLib:Summary>
    </analysisAppLib:PropertyDocumentation>
  </TypesViewModel.DocumentCollection>
  <TypesViewModel.Map>
    <anal:AppTypeInfo Type="mcacs:CSharpSyntaxNode" Title="CSharp Node" ColorValue="4288462688" ElementName="{assembly:Null}" assembly:Key="{assembly:Type mcacs:CSharpSyntaxNode}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode" Type="mcacs:CSharpSyntaxNode">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            Represents a non-terminal node in the syntax tree.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AccessorDeclarationSyntax" Title="Accessor Declaration" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:AccessorDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>GetKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SetKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AddKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>RemoveKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AccessorListSyntax" Title="Accessor List" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:AccessorListSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AccessorDeclarationSyntax&gt;" Name="Accessors" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AliasQualifiedNameSyntax" Title="Alias Qualified Name" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:AliasQualifiedNameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax" Type="mcacss:AliasQualifiedNameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for alias qualified name.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="IdentifierNameSyntax" Name="Alias" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonColonToken">
          <mcacs:SyntaxKind>ColonColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SimpleNameSyntax" Name="Name" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AnonymousFunctionExpressionSyntax" Title="Anonymous Function Expression" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:AnonymousFunctionExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax" Type="mcacss:AnonymousFunctionExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent anonymous function expressions are derived.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AsyncKeyword">
          <mcacs:SyntaxKind>AsyncKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AnonymousMethodExpressionSyntax" Title="Anonymous Method Expression" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:AnonymousMethodExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax" Type="mcacss:AnonymousMethodExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for anonymous method expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AsyncKeyword">
          <mcacs:SyntaxKind>AsyncKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DelegateKeyword">
          <mcacs:SyntaxKind>DelegateKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="ExpressionBody" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AnonymousObjectCreationExpressionSyntax" Title="Anonymous Object Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:AnonymousObjectCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax" Type="mcacss:AnonymousObjectCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for anonymous object creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NewKeyword">
          <mcacs:SyntaxKind>NewKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;AnonymousObjectMemberDeclaratorSyntax&gt;" Name="Initializers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AnonymousObjectMemberDeclaratorSyntax" Title="Anonymous Object Member Declarator" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:AnonymousObjectMemberDeclaratorSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameEqualsSyntax" Name="NameEquals" />
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArgumentListSyntax" Title="Argument List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArgumentListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax" Type="mcacss:ArgumentListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for the list of arguments.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ArgumentSyntax&gt;" Name="Arguments" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArgumentSyntax" Title="Argument" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArgumentSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax" Type="mcacss:ArgumentSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for argument.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameColonSyntax" Name="NameColon" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="RefKindKeyword">
          <mcacs:SyntaxKind>RefKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>OutKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArrayCreationExpressionSyntax" Title="Array Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArrayCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax" Type="mcacss:ArrayCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for array creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NewKeyword">
          <mcacs:SyntaxKind>NewKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ArrayTypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="InitializerExpressionSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArrayRankSpecifierSyntax" Title="Array Rank Specifier" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArrayRankSpecifierSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" Name="Sizes" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArrayTypeSyntax" Title="Array Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArrayTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax" Type="mcacss:ArrayTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for the array type.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ElementType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;ArrayRankSpecifierSyntax&gt;" Name="RankSpecifiers" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ArrowExpressionClauseSyntax" Title="Arrow Expression Clause" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ArrowExpressionClauseSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax" Type="mcacss:ArrowExpressionClauseSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>The syntax for the expression body of an expression-bodied member.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ArrowToken">
          <mcacs:SyntaxKind>EqualsGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AssignmentExpressionSyntax" Title="Assignment Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:AssignmentExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax" Type="mcacss:AssignmentExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents an expression that has an assignment operator.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Left" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PlusEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsteriskEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SlashEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PercentEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CaretEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BarEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanLessThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanGreaterThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>QuestionQuestionEqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Right" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AttributeArgumentListSyntax" Title="Attribute Argument List" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:AttributeArgumentListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax" Type="mcacss:AttributeArgumentListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Attribute argument list syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;AttributeArgumentSyntax&gt;" Name="Arguments" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AttributeArgumentSyntax" Title="Attribute Argument" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:AttributeArgumentSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax" Type="mcacss:AttributeArgumentSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Attribute argument syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AttributeListSyntax" Title="Attribute List" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:AttributeListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax" Type="mcacss:AttributeListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class representing one or more attributes applied to a language construct.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="AttributeTargetSpecifierSyntax" Name="Target" />
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;AttributeSyntax&gt;" Name="Attributes" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AttributeSyntax" Title="Attribute" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:AttributeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax" Type="mcacss:AttributeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Attribute syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="AttributeArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AttributeTargetSpecifierSyntax" Title="Attribute Target Specifier" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:AttributeTargetSpecifierSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax" Type="mcacss:AttributeTargetSpecifierSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class representing what language construct an attribute targets.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:AwaitExpressionSyntax" Title="Await Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:AwaitExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax" Type="mcacss:AwaitExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for an "await" expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BadDirectiveTriviaSyntax" Title="Bad Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:BadDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseArgumentListSyntax" Title="Base Argument List" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseArgumentListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax" Type="mcacss:BaseArgumentListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent argument list syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ArgumentSyntax&gt;" Name="Arguments" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseCrefParameterListSyntax" Title="Base Cref Parameter List" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseCrefParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax" Type="mcacss:BaseCrefParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A list of cref parameters with surrounding punctuation.
            Unlike regular parameters, cref parameters do not have names.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;CrefParameterSyntax&gt;" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseExpressionSyntax" Title="Base Expression" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:BaseExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax" Type="mcacss:BaseExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a base expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Token">
          <mcacs:SyntaxKind>BaseKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseFieldDeclarationSyntax" Title="Base Field Declaration" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseFieldDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="VariableDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseListSyntax" Title="Base List" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:BaseListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax" Type="mcacss:BaseListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base list syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;BaseTypeSyntax&gt;" Name="Types" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseMethodDeclarationSyntax" Title="Base Method Declaration" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseMethodDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax" Type="mcacss:BaseMethodDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base type for method declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseParameterListSyntax" Title="Base Parameter List" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax" Type="mcacss:BaseParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base type for parameter list syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ParameterSyntax&gt;" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BasePropertyDeclarationSyntax" Title="Base Property Declaration" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BasePropertyDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax" Type="mcacss:BasePropertyDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base type for property declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ExplicitInterfaceSpecifierSyntax" Name="ExplicitInterfaceSpecifier" />
        <anal:SyntaxFieldInfo TypeName="AccessorListSyntax" Name="AccessorList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseTypeDeclarationSyntax" Title="Base Type Declaration" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseTypeDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax" Type="mcacss:BaseTypeDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base class for type declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BaseListSyntax" Name="BaseList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BaseTypeSyntax" Title="Base Type" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BaseTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax" Type="mcacss:BaseTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent base type syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BinaryExpressionSyntax" Title="Binary Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:BinaryExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax" Type="mcacss:BinaryExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents an expression that has a binary operator.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Left" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>PlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsteriskToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SlashToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PercentToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanLessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanGreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BarBarToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandAmpersandToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BarToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CaretToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>EqualsEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>IsKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>QuestionQuestionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Right" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BlockSyntax" Title="Block" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:BlockSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;StatementSyntax&gt;" Name="Statements" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BracketedArgumentListSyntax" Title="Bracketed Argument List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:BracketedArgumentListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax" Type="mcacss:BracketedArgumentListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for bracketed argument list.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ArgumentSyntax&gt;" Name="Arguments" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BracketedParameterListSyntax" Title="Bracketed Parameter List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:BracketedParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax" Type="mcacss:BracketedParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Parameter list syntax with surrounding brackets.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ParameterSyntax&gt;" Name="Parameters" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BranchingDirectiveTriviaSyntax" Title="Branching Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:BranchingDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="bool" Name="BranchTaken" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:BreakStatementSyntax" Title="Break Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:BreakStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="BreakKeyword">
          <mcacs:SyntaxKind>BreakKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CasePatternSwitchLabelSyntax" Title="Case Pattern Switch Label" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CasePatternSwitchLabelSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax" Type="mcacss:CasePatternSwitchLabelSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a case label within a switch statement.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>CaseKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="PatternSyntax" Name="Pattern" />
        <anal:SyntaxFieldInfo TypeName="WhenClauseSyntax" Name="WhenClause" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CaseSwitchLabelSyntax" Title="Case Switch Label" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CaseSwitchLabelSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax" Type="mcacss:CaseSwitchLabelSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a case label within a switch statement.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>CaseKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Value" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CastExpressionSyntax" Title="Cast Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CastExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax" Type="mcacss:CastExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for cast expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CatchClauseSyntax" Title="Catch Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:CatchClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CatchKeyword">
          <mcacs:SyntaxKind>CatchKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="CatchDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="CatchFilterClauseSyntax" Name="Filter" />
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CatchDeclarationSyntax" Title="Catch Declaration" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:CatchDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CatchFilterClauseSyntax" Title="Catch Filter Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:CatchFilterClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhenKeyword">
          <mcacs:SyntaxKind>WhenKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="FilterExpression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CheckedExpressionSyntax" Title="Checked Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CheckedExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax" Type="mcacss:CheckedExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for Checked or Unchecked expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>CheckedKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>UncheckedKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CheckedStatementSyntax" Title="Checked Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:CheckedStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>CheckedKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>UncheckedKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ClassDeclarationSyntax" Title="Class Declaration" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:ClassDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax" Type="mcacss:ClassDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class type declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>ClassKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="BaseListSyntax" Name="BaseList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ClassOrStructConstraintSyntax" Title="Class Or Struct Constraint" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ClassOrStructConstraintSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax" Type="mcacss:ClassOrStructConstraintSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base type for class or struct constraint syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ClassOrStructKeyword">
          <mcacs:SyntaxKind>ClassKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>StructKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="QuestionToken">
          <mcacs:SyntaxKind>QuestionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CommonForEachStatementSyntax" Title="Common For Each Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:CommonForEachStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ForEachKeyword">
          <mcacs:SyntaxKind>ForEachKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="InKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CompilationUnitSyntax" Title="Compilation Unit" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:CompilationUnitSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;ExternAliasDirectiveSyntax&gt;" Name="Externs" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;UsingDirectiveSyntax&gt;" Name="Usings" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfFileToken">
          <mcacs:SyntaxKind>EndOfFileToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConditionalAccessExpressionSyntax" Title="Conditional Access Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConditionalAccessExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax" Type="mcacss:ConditionalAccessExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for conditional access expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>QuestionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="WhenNotNull" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConditionalDirectiveTriviaSyntax" Title="Conditional Directive Trivia" ColorValue="4282150525" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:ConditionalDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="ConditionValue" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConditionalExpressionSyntax" Title="Conditional Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConditionalExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax" Type="mcacss:ConditionalExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for conditional expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="QuestionToken">
          <mcacs:SyntaxKind>QuestionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="WhenTrue" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="WhenFalse" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConstantPatternSyntax" Title="Constant Pattern" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConstantPatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConstructorConstraintSyntax" Title="Constructor Constraint" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConstructorConstraintSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax" Type="mcacss:ConstructorConstraintSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Constructor constraint syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NewKeyword">
          <mcacs:SyntaxKind>NewKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConstructorDeclarationSyntax" Title="Constructor Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConstructorDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax" Type="mcacss:ConstructorDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Constructor declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="ConstructorInitializerSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConstructorInitializerSyntax" Title="Constructor Initializer" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConstructorInitializerSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax" Type="mcacss:ConstructorInitializerSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Constructor initializer syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ThisOrBaseKeyword">
          <mcacs:SyntaxKind>BaseKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ThisKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ContinueStatementSyntax" Title="Continue Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ContinueStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ContinueKeyword">
          <mcacs:SyntaxKind>ContinueKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConversionOperatorDeclarationSyntax" Title="Conversion Operator Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConversionOperatorDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax" Type="mcacss:ConversionOperatorDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Conversion operator declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ImplicitOrExplicitKeyword">
          <mcacs:SyntaxKind>ImplicitKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExplicitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorKeyword">
          <mcacs:SyntaxKind>OperatorKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ConversionOperatorMemberCrefSyntax" Title="Conversion Operator Member Cref" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:ConversionOperatorMemberCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax" Type="mcacss:ConversionOperatorMemberCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an implicit or explicit keyword, an operator keyword, a destination type, and an optional parameter list.
            For example, "implicit operator int" or "explicit operator MyType(int)".
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ImplicitOrExplicitKeyword">
          <mcacs:SyntaxKind>ImplicitKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExplicitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorKeyword">
          <mcacs:SyntaxKind>OperatorKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="CrefParameterListSyntax" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CrefBracketedParameterListSyntax" Title="Cref Bracketed Parameter List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CrefBracketedParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax" Type="mcacss:CrefBracketedParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A bracketed list of cref parameters.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;CrefParameterSyntax&gt;" Name="Parameters" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CrefParameterListSyntax" Title="Cref Parameter List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:CrefParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax" Type="mcacss:CrefParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A parenthesized list of cref parameters.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;CrefParameterSyntax&gt;" Name="Parameters" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CrefParameterSyntax" Title="Cref Parameter" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:CrefParameterSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax" Type="mcacss:CrefParameterSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            An element of a BaseCrefParameterListSyntax.
            Unlike a regular parameter, a cref parameter has only an optional ref or out keyword and a type -
            there is no name and there are no attributes or other modifiers.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="RefKindKeyword">
          <mcacs:SyntaxKind>RefKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>OutKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:CrefSyntax" Title="Cref" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:CrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax" Type="mcacss:CrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or &lt;seealso&gt; documentation comment tag).
            For example, the M in &lt;see cref="M" /&gt;.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DeclarationExpressionSyntax" Title="Declaration Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:DeclarationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax" Type="mcacss:DeclarationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for the variable declaration in an out var declaration or a deconstruction declaration.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="VariableDesignationSyntax" Name="Designation" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DeclarationPatternSyntax" Title="Declaration Pattern" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DeclarationPatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="VariableDesignationSyntax" Name="Designation">
          <mcacs:SyntaxKind>SingleVariableDesignation</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DiscardDesignation</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DefaultExpressionSyntax" Title="Default Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:DefaultExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax" Type="mcacss:DefaultExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for Default expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>DefaultKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DefaultSwitchLabelSyntax" Title="Default Switch Label" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:DefaultSwitchLabelSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax" Type="mcacss:DefaultSwitchLabelSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a default label within a switch statement.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>DefaultKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DefineDirectiveTriviaSyntax" Title="Define Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DefineDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DefineKeyword">
          <mcacs:SyntaxKind>DefineKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Name">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DelegateDeclarationSyntax" Title="Delegate Declaration" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:DelegateDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax" Type="mcacss:DelegateDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Delegate declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DelegateKeyword">
          <mcacs:SyntaxKind>DelegateKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ReturnType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DestructorDeclarationSyntax" Title="Destructor Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:DestructorDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax" Type="mcacss:DestructorDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Destructor declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="TildeToken">
          <mcacs:SyntaxKind>TildeToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DirectiveTriviaSyntax" Title="Directive Trivia" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:DirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DiscardDesignationSyntax" Title="Discard Designation" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DiscardDesignationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UnderscoreToken">
          <mcacs:SyntaxKind>UnderscoreToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DiscardPatternSyntax" Title="Discard Pattern" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DiscardPatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UnderscoreToken">
          <mcacs:SyntaxKind>UnderscoreToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DocumentationCommentTriviaSyntax" Title="Documentation Comment Trivia" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DocumentationCommentTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;XmlNodeSyntax&gt;" Name="Content" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfComment">
          <mcacs:SyntaxKind>EndOfDocumentationCommentToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:DoStatementSyntax" Title="Do Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:DoStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DoKeyword">
          <mcacs:SyntaxKind>DoKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhileKeyword">
          <mcacs:SyntaxKind>WhileKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ElementAccessExpressionSyntax" Title="Element Access Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ElementAccessExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax" Type="mcacss:ElementAccessExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for element access expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="BracketedArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ElementBindingExpressionSyntax" Title="Element Binding Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ElementBindingExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax" Type="mcacss:ElementBindingExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for element binding expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="BracketedArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ElifDirectiveTriviaSyntax" Title="Elif Directive Trivia" ColorValue="4283645091" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ElifDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ElifKeyword">
          <mcacs:SyntaxKind>ElifKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="BranchTaken" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="ConditionValue" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ElseClauseSyntax" Title="Else Clause" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ElseClauseSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax" Type="mcacss:ElseClauseSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents an else statement syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ElseKeyword">
          <mcacs:SyntaxKind>ElseKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ElseDirectiveTriviaSyntax" Title="Else Directive Trivia" ColorValue="4282150525" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ElseDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ElseKeyword">
          <mcacs:SyntaxKind>ElseKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="BranchTaken" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EmptyStatementSyntax" Title="Empty Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EmptyStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EndIfDirectiveTriviaSyntax" Title="End If Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EndIfDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndIfKeyword">
          <mcacs:SyntaxKind>EndIfKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EndRegionDirectiveTriviaSyntax" Title="End Region Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EndRegionDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndRegionKeyword">
          <mcacs:SyntaxKind>EndRegionKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EnumDeclarationSyntax" Title="Enum Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:EnumDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax" Type="mcacss:EnumDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Enum type declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EnumKeyword">
          <mcacs:SyntaxKind>EnumKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BaseListSyntax" Name="BaseList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;EnumMemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EnumMemberDeclarationSyntax" Title="Enum Member Declaration" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EnumMemberDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="EqualsValueClauseSyntax" Name="EqualsValue" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EqualsValueClauseSyntax" Title="Equals Value Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EqualsValueClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Value" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ErrorDirectiveTriviaSyntax" Title="Error Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ErrorDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ErrorKeyword">
          <mcacs:SyntaxKind>ErrorKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EventDeclarationSyntax" Title="Event Declaration" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EventDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EventKeyword">
          <mcacs:SyntaxKind>EventKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ExplicitInterfaceSpecifierSyntax" Name="ExplicitInterfaceSpecifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:EventFieldDeclarationSyntax" Title="Event Field Declaration" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:EventFieldDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EventKeyword">
          <mcacs:SyntaxKind>EventKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="VariableDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ExplicitInterfaceSpecifierSyntax" Title="Explicit Interface Specifier" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ExplicitInterfaceSpecifierSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DotToken">
          <mcacs:SyntaxKind>DotToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ExpressionStatementSyntax" Title="Expression Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ExpressionStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ExpressionSyntax" Title="Expression" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:ExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax" Type="mcacss:ExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent expression syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ExternAliasDirectiveSyntax" Title="Extern Alias Directive" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ExternAliasDirectiveSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax" Type="mcacss:ExternAliasDirectiveSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            Represents an ExternAlias directive syntax, e.g. "extern alias MyAlias;" with specifying "/r:MyAlias=SomeAssembly.dll " on the compiler command line.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ExternKeyword">
          <mcacs:SyntaxKind>ExternKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AliasKeyword">
          <mcacs:SyntaxKind>AliasKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:FieldDeclarationSyntax" Title="Field Declaration" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:FieldDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="VariableDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:FinallyClauseSyntax" Title="Finally Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:FinallyClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="FinallyKeyword">
          <mcacs:SyntaxKind>FinallyKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:FixedStatementSyntax" Title="Fixed Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:FixedStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="FixedKeyword">
          <mcacs:SyntaxKind>FixedKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="VariableDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ForEachStatementSyntax" Title="For Each Statement" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ForEachStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ForEachKeyword">
          <mcacs:SyntaxKind>ForEachKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="InKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ForEachVariableStatementSyntax" Title="For Each Variable Statement" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ForEachVariableStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ForEachKeyword">
          <mcacs:SyntaxKind>ForEachKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Variable" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="InKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ForStatementSyntax" Title="For Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ForStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ForKeyword">
          <mcacs:SyntaxKind>ForKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="FirstSemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SecondSemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" Name="Incrementors" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:FromClauseSyntax" Title="From Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:FromClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="FromKeyword">
          <mcacs:SyntaxKind>FromKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="InKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:GenericNameSyntax" Title="Generic Name" ColorValue="4283645091" ElementName="Node" assembly:Key="{assembly:Type mcacss:GenericNameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax" Type="mcacss:GenericNameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for generic name.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeArgumentListSyntax" Name="TypeArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:GlobalStatementSyntax" Title="Global Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:GlobalStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:GotoStatementSyntax" Title="Goto Statement" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:GotoStatementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax" Type="mcacss:GotoStatementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            Represents a goto statement syntax
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GotoKeyword">
          <mcacs:SyntaxKind>GotoKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CaseOrDefaultKeyword">
          <mcacs:SyntaxKind>CaseKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DefaultKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:GroupClauseSyntax" Title="Group Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:GroupClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GroupKeyword">
          <mcacs:SyntaxKind>GroupKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="GroupExpression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ByKeyword">
          <mcacs:SyntaxKind>ByKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="ByExpression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IdentifierNameSyntax" Title="Identifier Name" ColorValue="4283645091" ElementName="Node" assembly:Key="{assembly:Type mcacss:IdentifierNameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax" Type="mcacss:IdentifierNameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for identifier name.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GlobalKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IfDirectiveTriviaSyntax" Title="If Directive Trivia" ColorValue="4283645091" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:IfDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="IfKeyword">
          <mcacs:SyntaxKind>IfKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="BranchTaken" />
        <anal:SyntaxFieldInfo TypeName="bool" Name="ConditionValue" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IfStatementSyntax" Title="If Statement" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:IfStatementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax" Type="mcacss:IfStatementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            Represents an if statement syntax.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="IfKeyword">
          <mcacs:SyntaxKind>IfKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
        <anal:SyntaxFieldInfo TypeName="ElseClauseSyntax" Name="Else" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ImplicitArrayCreationExpressionSyntax" Title="Implicit Array Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ImplicitArrayCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax" Type="mcacss:ImplicitArrayCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit array creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NewKeyword">
          <mcacs:SyntaxKind>NewKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Commas" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="InitializerExpressionSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ImplicitElementAccessSyntax" Title="Implicit Element Access" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ImplicitElementAccessSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax" Type="mcacss:ImplicitElementAccessSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit element access expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="BracketedArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax" Title="Implicit Stack Alloc Array Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ImplicitStackAllocArrayCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax" Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for implicit stackalloc array creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StackAllocKeyword">
          <mcacs:SyntaxKind>StackAllocKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBracketToken">
          <mcacs:SyntaxKind>OpenBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBracketToken">
          <mcacs:SyntaxKind>CloseBracketToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="InitializerExpressionSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IncompleteMemberSyntax" Title="Incomplete Member" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:IncompleteMemberSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IndexerDeclarationSyntax" Title="Indexer Declaration" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:IndexerDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ExplicitInterfaceSpecifierSyntax" Name="ExplicitInterfaceSpecifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ThisKeyword">
          <mcacs:SyntaxKind>ThisKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BracketedParameterListSyntax" Name="ParameterList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IndexerMemberCrefSyntax" Title="Indexer Member Cref" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:IndexerMemberCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax" Type="mcacss:IndexerMemberCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a this keyword and an optional parameter list.
            For example, "this" or "this[int]".
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ThisKeyword">
          <mcacs:SyntaxKind>ThisKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="CrefBracketedParameterListSyntax" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InitializerExpressionSyntax" Title="Initializer Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:InitializerExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax" Type="mcacss:InitializerExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for initializer expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" Name="Expressions" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InstanceExpressionSyntax" Title="Instance Expression" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:InstanceExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax" Type="mcacss:InstanceExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent instance expression syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterfaceDeclarationSyntax" Title="Interface Declaration" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterfaceDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax" Type="mcacss:InterfaceDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Interface type declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>InterfaceKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="BaseListSyntax" Name="BaseList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterpolatedStringContentSyntax" Title="Interpolated String Content" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:InterpolatedStringContentSyntax}" />
    <anal:AppTypeInfo Type="mcacss:InterpolatedStringExpressionSyntax" Title="Interpolated String Expression" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterpolatedStringExpressionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StringStartToken">
          <mcacs:SyntaxKind>InterpolatedStringStartToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>InterpolatedVerbatimStringStartToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;InterpolatedStringContentSyntax&gt;" Name="Contents" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StringEndToken">
          <mcacs:SyntaxKind>InterpolatedStringEndToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterpolatedStringTextSyntax" Title="Interpolated String Text" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterpolatedStringTextSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="TextToken">
          <mcacs:SyntaxKind>InterpolatedStringTextToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterpolationAlignmentClauseSyntax" Title="Interpolation Alignment Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterpolationAlignmentClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CommaToken" />
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Value" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterpolationFormatClauseSyntax" Title="Interpolation Format Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterpolationFormatClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="FormatStringToken">
          <mcacs:SyntaxKind>InterpolatedStringTextToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InterpolationSyntax" Title="Interpolation" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:InterpolationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="InterpolationAlignmentClauseSyntax" Name="AlignmentClause" />
        <anal:SyntaxFieldInfo TypeName="InterpolationFormatClauseSyntax" Name="FormatClause" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:InvocationExpressionSyntax" Title="Invocation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:InvocationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax" Type="mcacss:InvocationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for invocation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="ArgumentListSyntax" Name="ArgumentList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:IsPatternExpressionSyntax" Title="Is Pattern Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:IsPatternExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax" Type="mcacss:IsPatternExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents a simple pattern-matching expression using the "is" keyword.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="IsKeyword">
          <mcacs:SyntaxKind>IsKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="PatternSyntax" Name="Pattern" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:JoinClauseSyntax" Title="Join Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:JoinClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="JoinKeyword">
          <mcacs:SyntaxKind>JoinKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="InKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="InExpression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OnKeyword">
          <mcacs:SyntaxKind>OnKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="LeftExpression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsKeyword">
          <mcacs:SyntaxKind>EqualsKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="RightExpression" />
        <anal:SyntaxFieldInfo TypeName="JoinIntoClauseSyntax" Name="Into" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:JoinIntoClauseSyntax" Title="Join Into Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:JoinIntoClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="IntoKeyword">
          <mcacs:SyntaxKind>IntoKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LabeledStatementSyntax" Title="Labeled Statement" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:LabeledStatementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax" Type="mcacss:LabeledStatementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a labeled statement syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LambdaExpressionSyntax" Title="Lambda Expression" ColorValue="4288594572" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:LambdaExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax" Type="mcacss:LambdaExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent lambda expressions are derived.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ArrowToken">
          <mcacs:SyntaxKind>EqualsGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LetClauseSyntax" Title="Let Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LetClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LetKeyword">
          <mcacs:SyntaxKind>LetKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LineDirectiveTriviaSyntax" Title="Line Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LineDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LineKeyword">
          <mcacs:SyntaxKind>LineKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Line">
          <mcacs:SyntaxKind>NumericLiteralToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DefaultKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>HiddenKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="File">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LiteralExpressionSyntax" Title="Literal Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:LiteralExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax" Type="mcacss:LiteralExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a literal expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Token">
          <mcacs:SyntaxKind>ArgListKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>NumericLiteralToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CharacterLiteralToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TrueKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>FalseKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>NullKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DefaultKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LoadDirectiveTriviaSyntax" Title="Load Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LoadDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LoadKeyword">
          <mcacs:SyntaxKind>LoadKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="File">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LocalDeclarationStatementSyntax" Title="Local Declaration Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LocalDeclarationStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UsingKeyword">
          <mcacs:SyntaxKind>UsingKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="VariableDeclarationSyntax" Name="Declaration" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LocalFunctionStatementSyntax" Title="Local Function Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LocalFunctionStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ReturnType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:LockStatementSyntax" Title="Lock Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:LockStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LockKeyword">
          <mcacs:SyntaxKind>LockKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MakeRefExpressionSyntax" Title="Make Ref Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:MakeRefExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax" Type="mcacss:MakeRefExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for MakeRef expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>MakeRefKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MemberAccessExpressionSyntax" Title="Member Access Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:MemberAccessExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax" Type="mcacss:MemberAccessExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for member access expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>DotToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SimpleNameSyntax" Name="Name" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MemberBindingExpressionSyntax" Title="Member Binding Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:MemberBindingExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax" Type="mcacss:MemberBindingExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for member binding expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>DotToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SimpleNameSyntax" Name="Name" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MemberCrefSyntax" Title="Member Cref" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:MemberCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax" Type="mcacss:MemberCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            The unqualified part of a CrefSyntax.
            For example, "ToString()" in "object.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MemberDeclarationSyntax" Title="Member Declaration" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:MemberDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax" Type="mcacss:MemberDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Member declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:MethodDeclarationSyntax" Title="Method Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:MethodDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax" Type="mcacss:MethodDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Method declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ReturnType" />
        <anal:SyntaxFieldInfo TypeName="ExplicitInterfaceSpecifierSyntax" Name="ExplicitInterfaceSpecifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NameColonSyntax" Title="Name Colon" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:NameColonSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax" Type="mcacss:NameColonSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for name colon syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="IdentifierNameSyntax" Name="Name">
          <mcacs:SyntaxKind>IdentifierName</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NameEqualsSyntax" Title="Name Equals" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:NameEqualsSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax" Type="mcacss:NameEqualsSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class representing an identifier name followed by an equals token.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="IdentifierNameSyntax" Name="Name">
          <mcacs:SyntaxKind>IdentifierName</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NameMemberCrefSyntax" Title="Name Member Cref" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:NameMemberCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax" Type="mcacss:NameMemberCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a name (an identifier, predefined type keyword, or an alias-qualified name,
            with an optional type parameter list) and an optional parameter list.
            For example, "M", "M&lt;T&gt;" or "M(int)".
            Also, "A::B()" or "string()".
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="CrefParameterListSyntax" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NamespaceDeclarationSyntax" Title="Namespace Declaration" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:NamespaceDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NamespaceKeyword">
          <mcacs:SyntaxKind>NamespaceKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="NameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;ExternAliasDirectiveSyntax&gt;" Name="Externs" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;UsingDirectiveSyntax&gt;" Name="Usings" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NameSyntax" Title="Name" ColorValue="4288594572" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:NameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax" Type="mcacss:NameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent name syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NullableDirectiveTriviaSyntax" Title="Nullable Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:NullableDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NullableKeyword">
          <mcacs:SyntaxKind>NullableKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SettingToken">
          <mcacs:SyntaxKind>EnableKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DisableKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>RestoreKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="TargetToken">
          <mcacs:SyntaxKind>WarningsKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AnnotationsKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:NullableTypeSyntax" Title="Nullable Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:NullableTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax" Type="mcacss:NullableTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a nullable type.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ElementType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="QuestionToken">
          <mcacs:SyntaxKind>QuestionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ObjectCreationExpressionSyntax" Title="Object Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ObjectCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax" Type="mcacss:ObjectCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for object creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="NewKeyword">
          <mcacs:SyntaxKind>NewKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ArgumentListSyntax" Name="ArgumentList" />
        <anal:SyntaxFieldInfo TypeName="InitializerExpressionSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OmittedArraySizeExpressionSyntax" Title="Omitted Array Size Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:OmittedArraySizeExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax" Type="mcacss:OmittedArraySizeExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents a placeholder in an array size list.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OmittedArraySizeExpressionToken">
          <mcacs:SyntaxKind>OmittedArraySizeExpressionToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OmittedTypeArgumentSyntax" Title="Omitted Type Argument" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:OmittedTypeArgumentSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax" Type="mcacss:OmittedTypeArgumentSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents a placeholder in the type argument list of an unbound generic type.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OmittedTypeArgumentToken">
          <mcacs:SyntaxKind>OmittedTypeArgumentToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OperatorDeclarationSyntax" Title="Operator Declaration" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:OperatorDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax" Type="mcacss:OperatorDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Operator declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ReturnType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorKeyword">
          <mcacs:SyntaxKind>OperatorKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>PlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TildeToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PlusPlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusMinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsteriskToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SlashToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PercentToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanLessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanGreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BarToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CaretToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>EqualsEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>FalseKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TrueKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>IsKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OperatorMemberCrefSyntax" Title="Operator Member Cref" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:OperatorMemberCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax" Type="mcacss:OperatorMemberCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an operator keyword, an operator symbol and an optional parameter list.
            For example, "operator +" or "operator -[int]".
            NOTE: the operator must be overloadable.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorKeyword">
          <mcacs:SyntaxKind>OperatorKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>PlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TildeToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PlusPlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusMinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsteriskToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SlashToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PercentToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanLessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanGreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BarToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CaretToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>EqualsEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LessThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>GreaterThanEqualsToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>FalseKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TrueKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="CrefParameterListSyntax" Name="Parameters" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OrderByClauseSyntax" Title="Order By Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:OrderByClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OrderByKeyword">
          <mcacs:SyntaxKind>OrderByKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;OrderingSyntax&gt;" Name="Orderings" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:OrderingSyntax" Title="Ordering" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:OrderingSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AscendingOrDescendingKeyword">
          <mcacs:SyntaxKind>AscendingKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DescendingKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ParameterListSyntax" Title="Parameter List" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax" Type="mcacss:ParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Parameter list syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ParameterSyntax&gt;" Name="Parameters" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ParameterSyntax" Title="Parameter" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:ParameterSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax" Type="mcacss:ParameterSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Parameter syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ArgListKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="EqualsValueClauseSyntax" Name="Default" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ParenthesizedExpressionSyntax" Title="Parenthesized Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:ParenthesizedExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax" Type="mcacss:ParenthesizedExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for parenthesized expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ParenthesizedLambdaExpressionSyntax" Title="Parenthesized Lambda Expression" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:ParenthesizedLambdaExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax" Type="mcacss:ParenthesizedLambdaExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for parenthesized lambda expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AsyncKeyword">
          <mcacs:SyntaxKind>AsyncKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterListSyntax" Name="ParameterList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ArrowToken">
          <mcacs:SyntaxKind>EqualsGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ParenthesizedVariableDesignationSyntax" Title="Parenthesized Variable Designation" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ParenthesizedVariableDesignationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;VariableDesignationSyntax&gt;" Name="Variables" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PatternSyntax" Title="Pattern" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:PatternSyntax}" />
    <anal:AppTypeInfo Type="mcacss:PointerTypeSyntax" Title="Pointer Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:PointerTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax" Type="mcacss:PointerTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for pointer type.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="ElementType" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AsteriskToken">
          <mcacs:SyntaxKind>AsteriskToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PositionalPatternClauseSyntax" Title="Positional Pattern Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:PositionalPatternClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;SubpatternSyntax&gt;" Name="Subpatterns" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PostfixUnaryExpressionSyntax" Title="Postfix Unary Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:PostfixUnaryExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax" Type="mcacss:PostfixUnaryExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for postfix unary expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Operand" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>PlusPlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusMinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PragmaChecksumDirectiveTriviaSyntax" Title="Pragma Checksum Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:PragmaChecksumDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="PragmaKeyword">
          <mcacs:SyntaxKind>PragmaKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ChecksumKeyword">
          <mcacs:SyntaxKind>ChecksumKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="File">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Guid">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Bytes">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PragmaWarningDirectiveTriviaSyntax" Title="Pragma Warning Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:PragmaWarningDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="PragmaKeyword">
          <mcacs:SyntaxKind>PragmaKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WarningKeyword">
          <mcacs:SyntaxKind>WarningKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DisableOrRestoreKeyword">
          <mcacs:SyntaxKind>DisableKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>RestoreKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ExpressionSyntax&gt;" Name="ErrorCodes" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PredefinedTypeSyntax" Title="Predefined Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:PredefinedTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax" Type="mcacss:PredefinedTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for predefined types.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>BoolKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ByteKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>SByteKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>IntKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>UIntKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ShortKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>UShortKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>LongKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ULongKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>FloatKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DecimalKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>StringKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CharKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ObjectKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>VoidKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PrefixUnaryExpressionSyntax" Title="Prefix Unary Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:PrefixUnaryExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax" Type="mcacss:PrefixUnaryExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for prefix unary expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>PlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>TildeToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>ExclamationToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>PlusPlusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>MinusMinusToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AmpersandToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>AsteriskToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>CaretToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Operand" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PropertyDeclarationSyntax" Title="Property Declaration" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:PropertyDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="ExplicitInterfaceSpecifierSyntax" Name="ExplicitInterfaceSpecifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:PropertyPatternClauseSyntax" Title="Property Pattern Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:PropertyPatternClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;SubpatternSyntax&gt;" Name="Subpatterns" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:QualifiedCrefSyntax" Title="Qualified Cref" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:QualifiedCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax" Type="mcacss:QualifiedCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol reference to a type or non-type member that is qualified by an enclosing type or namespace.
            For example, cref="System.String.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Container" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DotToken">
          <mcacs:SyntaxKind>DotToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="MemberCrefSyntax" Name="Member" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:QualifiedNameSyntax" Title="Qualified Name" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:QualifiedNameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax" Type="mcacss:QualifiedNameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for qualified name.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameSyntax" Name="Left" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="DotToken">
          <mcacs:SyntaxKind>DotToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SimpleNameSyntax" Name="Right" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:QueryBodySyntax" Title="Query Body" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:QueryBodySyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;QueryClauseSyntax&gt;" Name="Clauses" />
        <anal:SyntaxFieldInfo TypeName="SelectOrGroupClauseSyntax" Name="SelectOrGroup" />
        <anal:SyntaxFieldInfo TypeName="QueryContinuationSyntax" Name="Continuation" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:QueryClauseSyntax" Title="Query Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:QueryClauseSyntax}" />
    <anal:AppTypeInfo Type="mcacss:QueryContinuationSyntax" Title="Query Continuation" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:QueryContinuationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="IntoKeyword">
          <mcacs:SyntaxKind>IntoKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="QueryBodySyntax" Name="Body" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:QueryExpressionSyntax" Title="Query Expression" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:QueryExpressionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="FromClauseSyntax" Name="FromClause" />
        <anal:SyntaxFieldInfo TypeName="QueryBodySyntax" Name="Body" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RangeExpressionSyntax" Title="Range Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:RangeExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax" Type="mcacss:RangeExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a range expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="LeftOperand" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OperatorToken">
          <mcacs:SyntaxKind>DotDotToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="RightOperand" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RecursivePatternSyntax" Title="Recursive Pattern" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:RecursivePatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="PositionalPatternClauseSyntax" Name="PositionalPatternClause" />
        <anal:SyntaxFieldInfo TypeName="PropertyPatternClauseSyntax" Name="PropertyPatternClause" />
        <anal:SyntaxFieldInfo TypeName="VariableDesignationSyntax" Name="Designation">
          <mcacs:SyntaxKind>SingleVariableDesignation</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DiscardDesignation</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ReferenceDirectiveTriviaSyntax" Title="Reference Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ReferenceDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ReferenceKeyword">
          <mcacs:SyntaxKind>ReferenceKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="File">
          <mcacs:SyntaxKind>StringLiteralToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RefExpressionSyntax" Title="Ref Expression" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:RefExpressionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="RefKeyword">
          <mcacs:SyntaxKind>RefKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RefTypeExpressionSyntax" Title="Ref Type Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:RefTypeExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax" Type="mcacss:RefTypeExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for RefType expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>RefTypeKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RefTypeSyntax" Title="Ref Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:RefTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax" Type="mcacss:RefTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>The ref modifier of a method's return value or a local.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="RefKeyword">
          <mcacs:SyntaxKind>RefKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ReadOnlyKeyword">
          <mcacs:SyntaxKind>ReadOnlyKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RefValueExpressionSyntax" Title="Ref Value Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:RefValueExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax" Type="mcacss:RefValueExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for RefValue expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>RefValueKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Comma">
          <mcacs:SyntaxKind>CommaToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:RegionDirectiveTriviaSyntax" Title="Region Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:RegionDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="RegionKeyword">
          <mcacs:SyntaxKind>RegionKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ReturnStatementSyntax" Title="Return Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ReturnStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ReturnKeyword">
          <mcacs:SyntaxKind>ReturnKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SelectClauseSyntax" Title="Select Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SelectClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SelectKeyword">
          <mcacs:SyntaxKind>SelectKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SelectOrGroupClauseSyntax" Title="Select Or Group Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:SelectOrGroupClauseSyntax}" />
    <anal:AppTypeInfo Type="mcacss:ShebangDirectiveTriviaSyntax" Title="Shebang Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ShebangDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ExclamationToken">
          <mcacs:SyntaxKind>ExclamationToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SimpleBaseTypeSyntax" Title="Simple Base Type" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SimpleBaseTypeSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SimpleLambdaExpressionSyntax" Title="Simple Lambda Expression" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:SimpleLambdaExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax" Type="mcacss:SimpleLambdaExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a simple lambda expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AsyncKeyword">
          <mcacs:SyntaxKind>AsyncKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ParameterSyntax" Name="Parameter">
          <mcacs:SyntaxKind>Parameter</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ArrowToken">
          <mcacs:SyntaxKind>EqualsGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SimpleNameSyntax" Title="Simple Name" ColorValue="4282150525" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:SimpleNameSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax" Type="mcacss:SimpleNameSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent simple name syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SingleVariableDesignationSyntax" Title="Single Variable Designation" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SingleVariableDesignationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SizeOfExpressionSyntax" Title="Size Of Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:SizeOfExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax" Type="mcacss:SizeOfExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for SizeOf expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>SizeOfKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SkippedTokensTriviaSyntax" Title="Skipped Tokens Trivia" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SkippedTokensTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Tokens" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:StackAllocArrayCreationExpressionSyntax" Title="Stack Alloc Array Creation Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:StackAllocArrayCreationExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax" Type="mcacss:StackAllocArrayCreationExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for stackalloc array creation expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StackAllocKeyword">
          <mcacs:SyntaxKind>StackAllocKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="InitializerExpressionSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:StatementSyntax" Title="Statement" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:StatementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax" Type="mcacss:StatementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents the base class for all statements syntax classes.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:StructDeclarationSyntax" Title="Struct Declaration" ColorValue="4282150525" ElementName="Node" assembly:Key="{assembly:Type mcacss:StructDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax" Type="mcacss:StructDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Struct type declaration syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="Modifiers" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>StructKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="BaseListSyntax" Name="BaseList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:StructuredTriviaSyntax" Title="Structured Trivia" ColorValue="4286080130" ElementName="PredefinedNode" assembly:Key="{assembly:Type mcacss:StructuredTriviaSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax" Type="mcacss:StructuredTriviaSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SubpatternSyntax" Title="Subpattern" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SubpatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="NameColonSyntax" Name="NameColon" />
        <anal:SyntaxFieldInfo TypeName="PatternSyntax" Name="Pattern" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SwitchExpressionArmSyntax" Title="Switch Expression Arm" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SwitchExpressionArmSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="PatternSyntax" Name="Pattern" />
        <anal:SyntaxFieldInfo TypeName="WhenClauseSyntax" Name="WhenClause" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsGreaterThanToken">
          <mcacs:SyntaxKind>EqualsGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SwitchExpressionSyntax" Title="Switch Expression" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:SwitchExpressionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="GoverningExpression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SwitchKeyword">
          <mcacs:SyntaxKind>SwitchKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;SwitchExpressionArmSyntax&gt;" Name="Arms" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SwitchLabelSyntax" Title="Switch Label" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:SwitchLabelSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax" Type="mcacss:SwitchLabelSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a switch label within a switch statement.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SwitchSectionSyntax" Title="Switch Section" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:SwitchSectionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax" Type="mcacss:SwitchSectionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a switch section syntax of a switch statement.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SwitchLabelSyntax&gt;" Name="Labels" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;StatementSyntax&gt;" Name="Statements" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:SwitchStatementSyntax" Title="Switch Statement" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:SwitchStatementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax" Type="mcacss:SwitchStatementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Represents a switch statement syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SwitchKeyword">
          <mcacs:SyntaxKind>SwitchKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenBraceToken">
          <mcacs:SyntaxKind>OpenBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SwitchSectionSyntax&gt;" Name="Sections" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseBraceToken">
          <mcacs:SyntaxKind>CloseBraceToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ThisExpressionSyntax" Title="This Expression" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:ThisExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax" Type="mcacss:ThisExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for a this expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Token">
          <mcacs:SyntaxKind>ThisKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ThrowExpressionSyntax" Title="Throw Expression" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ThrowExpressionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ThrowKeyword">
          <mcacs:SyntaxKind>ThrowKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:ThrowStatementSyntax" Title="Throw Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:ThrowStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ThrowKeyword">
          <mcacs:SyntaxKind>ThrowKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TryStatementSyntax" Title="Try Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:TryStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="TryKeyword">
          <mcacs:SyntaxKind>TryKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;CatchClauseSyntax&gt;" Name="Catches" />
        <anal:SyntaxFieldInfo TypeName="FinallyClauseSyntax" Name="Finally" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TupleElementSyntax" Title="Tuple Element" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:TupleElementSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax" Type="mcacss:TupleElementSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Tuple type element.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TupleExpressionSyntax" Title="Tuple Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:TupleExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax" Type="mcacss:TupleExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for tuple expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;ArgumentSyntax&gt;" Name="Arguments" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TupleTypeSyntax" Title="Tuple Type" ColorValue="4288594572" ElementName="Node" assembly:Key="{assembly:Type mcacss:TupleTypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax" Type="mcacss:TupleTypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for tuple type.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;TupleElementSyntax&gt;" Name="Elements" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeArgumentListSyntax" Title="Type Argument List" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeArgumentListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax" Type="mcacss:TypeArgumentListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for type argument list.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanToken">
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;TypeSyntax&gt;" Name="Arguments" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GreaterThanToken">
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeConstraintSyntax" Title="Type Constraint" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeConstraintSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax" Type="mcacss:TypeConstraintSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Type constraint syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeCrefSyntax" Title="Type Cref" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeCrefSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax" Type="mcacss:TypeCrefSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText xml:space="preserve">
            A symbol reference that definitely refers to a type.
            For example, "int", "A::B", "A.B", "A&lt;T&gt;", but not "M()" (has parameter list) or "this" (indexer).
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeDeclarationSyntax" Title="Type Declaration" ColorValue="4288594572" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:TypeDeclarationSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax" Type="mcacss:TypeDeclarationSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base class for type declaration syntax (class, struct, interface).</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword" />
        <anal:SyntaxFieldInfo TypeName="TypeParameterListSyntax" Name="TypeParameterList" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;TypeParameterConstraintClauseSyntax&gt;" Name="ConstraintClauses" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;MemberDeclarationSyntax&gt;" Name="Members" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeOfExpressionSyntax" Title="Type Of Expression" ColorValue="4290286632" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeOfExpressionSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax" Type="mcacss:TypeOfExpressionSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Class which represents the syntax node for TypeOf expression.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Keyword">
          <mcacs:SyntaxKind>TypeOfKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeParameterConstraintClauseSyntax" Title="Type Parameter Constraint Clause" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeParameterConstraintClauseSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax" Type="mcacss:TypeParameterConstraintClauseSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Type parameter constraint clause.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhereKeyword">
          <mcacs:SyntaxKind>WhereKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="IdentifierNameSyntax" Name="Name">
          <mcacs:SyntaxKind>IdentifierName</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;TypeParameterConstraintSyntax&gt;" Name="Constraints" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeParameterConstraintSyntax" Title="Type Parameter Constraint" ColorValue="4286080130" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:TypeParameterConstraintSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax" Type="mcacss:TypeParameterConstraintSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Base type for type parameter constraint syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeParameterListSyntax" Title="Type Parameter List" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeParameterListSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax" Type="mcacss:TypeParameterListSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Type parameter list syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanToken">
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;TypeParameterSyntax&gt;" Name="Parameters" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GreaterThanToken">
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeParameterSyntax" Title="Type Parameter" ColorValue="4286080130" ElementName="Node" assembly:Key="{assembly:Type mcacss:TypeParameterSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax" Type="mcacss:TypeParameterSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Type parameter syntax.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="VarianceKeyword">
          <mcacs:SyntaxKind>InKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>OutKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:TypeSyntax" Title="Type" ColorValue="4290286632" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:TypeSyntax}">
      <anal:AppTypeInfo.DocInfo>
        <analysisAppLib:TypeDocumentation ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax" Type="mcacss:TypeSyntax">
          <analysisAppLib:Summary>
            <analysisAppLib:XmlDocText>Provides the base class from which the classes that represent type syntax nodes are derived. This is an abstract class.</analysisAppLib:XmlDocText>
          </analysisAppLib:Summary>
        </analysisAppLib:TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:UndefDirectiveTriviaSyntax" Title="Undef Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:UndefDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UndefKeyword">
          <mcacs:SyntaxKind>UndefKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Name">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:UnsafeStatementSyntax" Title="Unsafe Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:UnsafeStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UnsafeKeyword">
          <mcacs:SyntaxKind>UnsafeKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BlockSyntax" Name="Block" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:UsingDirectiveSyntax" Title="Using Directive" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:UsingDirectiveSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UsingKeyword">
          <mcacs:SyntaxKind>UsingKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="NameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:UsingStatementSyntax" Title="Using Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:UsingStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="AwaitKeyword">
          <mcacs:SyntaxKind>AwaitKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="UsingKeyword">
          <mcacs:SyntaxKind>UsingKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:VariableDeclarationSyntax" Title="Variable Declaration" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:VariableDeclarationSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="TypeSyntax" Name="Type" />
        <anal:SyntaxFieldInfo TypeName="SeparatedSyntaxList&lt;VariableDeclaratorSyntax&gt;" Name="Variables" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:VariableDeclaratorSyntax" Title="Variable Declarator" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:VariableDeclaratorSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Identifier">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="BracketedArgumentListSyntax" Name="ArgumentList" />
        <anal:SyntaxFieldInfo TypeName="EqualsValueClauseSyntax" Name="Initializer" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:VariableDesignationSyntax" Title="Variable Designation" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:VariableDesignationSyntax}" />
    <anal:AppTypeInfo Type="mcacss:VarPatternSyntax" Title="Var Pattern" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:VarPatternSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="VarKeyword">
          <mcacs:SyntaxKind>VarKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="VariableDesignationSyntax" Name="Designation" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:WarningDirectiveTriviaSyntax" Title="Warning Directive Trivia" ColorValue="4288594572" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:WarningDirectiveTriviaSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="HashToken">
          <mcacs:SyntaxKind>HashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WarningKeyword">
          <mcacs:SyntaxKind>WarningKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndOfDirectiveToken">
          <mcacs:SyntaxKind>EndOfDirectiveToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="bool" Name="IsActive" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:WhenClauseSyntax" Title="When Clause" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:WhenClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhenKeyword">
          <mcacs:SyntaxKind>WhenKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:WhereClauseSyntax" Title="Where Clause" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:WhereClauseSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhereKeyword">
          <mcacs:SyntaxKind>WhereKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:WhileStatementSyntax" Title="While Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:WhileStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="WhileKeyword">
          <mcacs:SyntaxKind>WhileKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="OpenParenToken">
          <mcacs:SyntaxKind>OpenParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Condition" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="CloseParenToken">
          <mcacs:SyntaxKind>CloseParenToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="StatementSyntax" Name="Statement" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlAttributeSyntax" Title="Xml Attribute" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:XmlAttributeSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlCDataSectionSyntax" Title="Xml CData Section" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlCDataSectionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartCDataToken">
          <mcacs:SyntaxKind>XmlCDataStartToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="TextTokens" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndCDataToken">
          <mcacs:SyntaxKind>XmlCDataEndToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlCommentSyntax" Title="Xml Comment" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlCommentSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanExclamationMinusMinusToken">
          <mcacs:SyntaxKind>XmlCommentStartToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="TextTokens" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="MinusMinusGreaterThanToken">
          <mcacs:SyntaxKind>XmlCommentEndToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlCrefAttributeSyntax" Title="Xml Cref Attribute" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlCrefAttributeSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="CrefSyntax" Name="Cref" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlElementEndTagSyntax" Title="Xml Element End Tag" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlElementEndTagSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanSlashToken">
          <mcacs:SyntaxKind>LessThanSlashToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GreaterThanToken">
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlElementStartTagSyntax" Title="Xml Element Start Tag" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlElementStartTagSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanToken">
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;XmlAttributeSyntax&gt;" Name="Attributes" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="GreaterThanToken">
          <mcacs:SyntaxKind>GreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlElementSyntax" Title="Xml Element" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlElementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlElementStartTagSyntax" Name="StartTag" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;XmlNodeSyntax&gt;" Name="Content" />
        <anal:SyntaxFieldInfo TypeName="XmlElementEndTagSyntax" Name="EndTag" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlEmptyElementSyntax" Title="Xml Empty Element" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlEmptyElementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LessThanToken">
          <mcacs:SyntaxKind>LessThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;XmlAttributeSyntax&gt;" Name="Attributes" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SlashGreaterThanToken">
          <mcacs:SyntaxKind>SlashGreaterThanToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlNameAttributeSyntax" Title="Xml Name Attribute" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlNameAttributeSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="IdentifierNameSyntax" Name="Identifier" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlNameSyntax" Title="Xml Name" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlNameSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlPrefixSyntax" Name="Prefix" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="LocalName">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlNodeSyntax" Title="Xml Node" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="AbstractNode" assembly:Key="{assembly:Type mcacss:XmlNodeSyntax}" />
    <anal:AppTypeInfo Type="mcacss:XmlPrefixSyntax" Title="Xml Prefix" ColorValue="4286080130" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlPrefixSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="Prefix">
          <mcacs:SyntaxKind>IdentifierToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ColonToken">
          <mcacs:SyntaxKind>ColonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlProcessingInstructionSyntax" Title="Xml Processing Instruction" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlProcessingInstructionSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartProcessingInstructionToken">
          <mcacs:SyntaxKind>XmlProcessingInstructionStartToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="TextTokens" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndProcessingInstructionToken">
          <mcacs:SyntaxKind>XmlProcessingInstructionEndToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlTextAttributeSyntax" Title="Xml Text Attribute" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlTextAttributeSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="XmlNameSyntax" Name="Name" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EqualsToken">
          <mcacs:SyntaxKind>EqualsToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="StartQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="TextTokens" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="EndQuoteToken">
          <mcacs:SyntaxKind>SingleQuoteToken</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>DoubleQuoteToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:XmlTextSyntax" Title="Xml Text" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:XmlTextSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;SyntaxToken&gt;" Name="TextTokens" />
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
    <anal:AppTypeInfo Type="mcacss:YieldStatementSyntax" Title="Yield Statement" ColorValue="4290286632" DocInfo="{assembly:Null}" ElementName="Node" assembly:Key="{assembly:Type mcacss:YieldStatementSyntax}">
      <anal:AppTypeInfo.Fields>
        <anal:SyntaxFieldInfo TypeName="SyntaxList&lt;AttributeListSyntax&gt;" Name="AttributeLists" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="YieldKeyword">
          <mcacs:SyntaxKind>YieldKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="ReturnOrBreakKeyword">
          <mcacs:SyntaxKind>ReturnKeyword</mcacs:SyntaxKind>
          <mcacs:SyntaxKind>BreakKeyword</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
        <anal:SyntaxFieldInfo TypeName="ExpressionSyntax" Name="Expression" />
        <anal:SyntaxFieldInfo TypeName="SyntaxToken" Name="SemicolonToken">
          <mcacs:SyntaxKind>SemicolonToken</mcacs:SyntaxKind>
        </anal:SyntaxFieldInfo>
      </anal:AppTypeInfo.Fields>
    </anal:AppTypeInfo>
  </TypesViewModel.Map>
</TypesViewModel>
