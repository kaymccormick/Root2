<TypesViewModel ShowBordersIsChecked="False"
                xmlns="clr-namespace:AnalysisControls.ViewModel;assembly=AnalysisControls"
                xmlns:anal="http://kaymccormick.com/xaml/analysis"
                xmlns:mcacs="clr-namespace:Microsoft.CodeAnalysis.CSharp;assembly=Microsoft.CodeAnalysis.CSharp"
                xmlns:mcacss="clr-namespace:Microsoft.CodeAnalysis.CSharp.Syntax;assembly=Microsoft.CodeAnalysis.CSharp"
                xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
  <TypesViewModel.Root>
    <anal:AppTypeInfo Type="mcacs:CSharpSyntaxNode"
                      Title="CSharp Node"
                      ColorValue="4288462688">
      <anal:AppTypeInfo.SubTypeInfos>
        <anal:AppTypeInfo
          Type="mcacss:TypeArgumentListSyntax"
          Title="Type Argument List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax"
              Type="mcacss:TypeArgumentListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class which represents the syntax node for type argument list.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:ArrayRankSpecifierSyntax"
          Title="Array Rank Specifier"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:TupleElementSyntax"
                          Title="Tuple Element"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax"
              Type="mcacss:TupleElementSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Tuple type element.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:ExpressionSyntax"
                          Title="Expression"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo Type="mcacss:TypeSyntax"
                              Title="Type"
                              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo Type="mcacss:NameSyntax"
                                  Title="Name"
                                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfo
                      Type="mcacss:SimpleNameSyntax"
                      Title="Simple Name"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfo
                          Type="mcacss:IdentifierNameSyntax"
                          Title="Identifier Name"
                          ColorValue="4283645091">
                          <anal:AppTypeInfo.SubTypeInfos>
                            <anal:AppTypeInfoCollection />
                          </anal:AppTypeInfo.SubTypeInfos>
                          <anal:AppTypeInfo.DocInfo>
                            <TypeDocumentation
                              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax"
                              Type="mcacss:IdentifierNameSyntax">
                              <TypeDocumentation.XmlDoc>
                                <Summary>
                                  <Summary.DocumentElementCollection>
                                    <XmlDocText>Class which represents the syntax node for identifier name.</XmlDocText>
                                  </Summary.DocumentElementCollection>
                                </Summary>
                              </TypeDocumentation.XmlDoc>
                            </TypeDocumentation>
                          </anal:AppTypeInfo.DocInfo>
                        </anal:AppTypeInfo>
                        <anal:AppTypeInfo
                          Type="mcacss:GenericNameSyntax"
                          Title="Generic Name"
                          ColorValue="4283645091">
                          <anal:AppTypeInfo.SubTypeInfos>
                            <anal:AppTypeInfoCollection />
                          </anal:AppTypeInfo.SubTypeInfos>
                          <anal:AppTypeInfo.DocInfo>
                            <TypeDocumentation
                              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax"
                              Type="mcacss:GenericNameSyntax">
                              <TypeDocumentation.XmlDoc>
                                <Summary>
                                  <Summary.DocumentElementCollection>
                                    <XmlDocText>Class which represents the syntax node for generic name.</XmlDocText>
                                  </Summary.DocumentElementCollection>
                                </Summary>
                              </TypeDocumentation.XmlDoc>
                            </TypeDocumentation>
                          </anal:AppTypeInfo.DocInfo>
                        </anal:AppTypeInfo>
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax"
                          Type="mcacss:SimpleNameSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Provides the base class from which the classes that represent simple name syntax nodes are derived. This is an abstract class.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:QualifiedNameSyntax"
                      Title="Qualified Name"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax"
                          Type="mcacss:QualifiedNameSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Class which represents the syntax node for qualified name.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:AliasQualifiedNameSyntax"
                      Title="Alias Qualified Name"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax"
                          Type="mcacss:AliasQualifiedNameSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Class which represents the syntax node for alias qualified name.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax"
                      Type="mcacss:NameSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Provides the base class from which the classes that represent name syntax nodes are derived. This is an abstract class.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:PredefinedTypeSyntax"
                  Title="Predefined Type"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax"
                      Type="mcacss:PredefinedTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for predefined types.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ArrayTypeSyntax"
                  Title="Array Type"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax"
                      Type="mcacss:ArrayTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for the array type.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:PointerTypeSyntax"
                  Title="Pointer Type"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax"
                      Type="mcacss:PointerTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for pointer type.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:NullableTypeSyntax"
                  Title="Nullable Type"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax"
                      Type="mcacss:NullableTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for a nullable type.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:TupleTypeSyntax"
                  Title="Tuple Type"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax"
                      Type="mcacss:TupleTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for tuple type.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:OmittedTypeArgumentSyntax"
                  Title="Omitted Type Argument"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax"
                      Type="mcacss:OmittedTypeArgumentSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents a placeholder in the type argument list of an unbound generic type.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:RefTypeSyntax"
                  Title="Ref Type" ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax"
                      Type="mcacss:RefTypeSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>The ref modifier of a method's return value or a local.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"
                  Type="mcacss:TypeSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Provides the base class from which the classes that represent type syntax nodes are derived. This is an abstract class.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ParenthesizedExpressionSyntax"
              Title="Parenthesized Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax"
                  Type="mcacss:ParenthesizedExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for parenthesized expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:TupleExpressionSyntax"
              Title="Tuple Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax"
                  Type="mcacss:TupleExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for tuple expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:PrefixUnaryExpressionSyntax"
              Title="Prefix Unary Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax"
                  Type="mcacss:PrefixUnaryExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for prefix unary expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:AwaitExpressionSyntax"
              Title="Await Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax"
                  Type="mcacss:AwaitExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for an "await" expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:PostfixUnaryExpressionSyntax"
              Title="Postfix Unary Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax"
                  Type="mcacss:PostfixUnaryExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for postfix unary expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:MemberAccessExpressionSyntax"
              Title="Member Access Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax"
                  Type="mcacss:MemberAccessExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for member access expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ConditionalAccessExpressionSyntax"
              Title="Conditional Access Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax"
                  Type="mcacss:ConditionalAccessExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for conditional access expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:MemberBindingExpressionSyntax"
              Title="Member Binding Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax"
                  Type="mcacss:MemberBindingExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for member binding expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ElementBindingExpressionSyntax"
              Title="Element Binding Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax"
                  Type="mcacss:ElementBindingExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for element binding expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:RangeExpressionSyntax"
              Title="Range Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax"
                  Type="mcacss:RangeExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for a range expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ImplicitElementAccessSyntax"
              Title="Implicit Element Access"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax"
                  Type="mcacss:ImplicitElementAccessSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for implicit element access expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BinaryExpressionSyntax"
              Title="Binary Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax"
                  Type="mcacss:BinaryExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents an expression that has a binary operator.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:AssignmentExpressionSyntax"
              Title="Assignment Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax"
                  Type="mcacss:AssignmentExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents an expression that has an assignment operator.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ConditionalExpressionSyntax"
              Title="Conditional Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax"
                  Type="mcacss:ConditionalExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for conditional expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:InstanceExpressionSyntax"
              Title="Instance Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:ThisExpressionSyntax"
                  Title="This Expression"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax"
                      Type="mcacss:ThisExpressionSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for a this expression.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:BaseExpressionSyntax"
                  Title="Base Expression"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax"
                      Type="mcacss:BaseExpressionSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for a base expression.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax"
                  Type="mcacss:InstanceExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Provides the base class from which the classes that represent instance expression syntax nodes are derived. This is an abstract class.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:LiteralExpressionSyntax"
              Title="Literal Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax"
                  Type="mcacss:LiteralExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for a literal expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:MakeRefExpressionSyntax"
              Title="Make Ref Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax"
                  Type="mcacss:MakeRefExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for MakeRef expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:RefTypeExpressionSyntax"
              Title="Ref Type Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax"
                  Type="mcacss:RefTypeExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for RefType expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:RefValueExpressionSyntax"
              Title="Ref Value Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax"
                  Type="mcacss:RefValueExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for RefValue expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CheckedExpressionSyntax"
              Title="Checked Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax"
                  Type="mcacss:CheckedExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for Checked or Unchecked expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DefaultExpressionSyntax"
              Title="Default Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax"
                  Type="mcacss:DefaultExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for Default expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:TypeOfExpressionSyntax"
              Title="Type Of Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax"
                  Type="mcacss:TypeOfExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for TypeOf expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:SizeOfExpressionSyntax"
              Title="Size Of Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax"
                  Type="mcacss:SizeOfExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for SizeOf expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:InvocationExpressionSyntax"
              Title="Invocation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax"
                  Type="mcacss:InvocationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for invocation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ElementAccessExpressionSyntax"
              Title="Element Access Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax"
                  Type="mcacss:ElementAccessExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for element access expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DeclarationExpressionSyntax"
              Title="Declaration Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax"
                  Type="mcacss:DeclarationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for the variable declaration in an out var declaration or a deconstruction declaration.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CastExpressionSyntax"
              Title="Cast Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax"
                  Type="mcacss:CastExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for cast expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:AnonymousFunctionExpressionSyntax"
              Title="Anonymous Function Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:AnonymousMethodExpressionSyntax"
                  Title="Anonymous Method Expression"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax"
                      Type="mcacss:AnonymousMethodExpressionSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Class which represents the syntax node for anonymous method expression.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:LambdaExpressionSyntax"
                  Title="Lambda Expression"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfo
                      Type="mcacss:SimpleLambdaExpressionSyntax"
                      Title="Simple Lambda Expression"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax"
                          Type="mcacss:SimpleLambdaExpressionSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Class which represents the syntax node for a simple lambda expression.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:ParenthesizedLambdaExpressionSyntax"
                      Title="Parenthesized Lambda Expression"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax"
                          Type="mcacss:ParenthesizedLambdaExpressionSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Class which represents the syntax node for parenthesized lambda expression.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax"
                      Type="mcacss:LambdaExpressionSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Provides the base class from which the classes that represent lambda expressions are derived.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax"
                  Type="mcacss:AnonymousFunctionExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Provides the base class from which the classes that represent anonymous function expressions are derived.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:RefExpressionSyntax"
              Title="Ref Expression"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:InitializerExpressionSyntax"
              Title="Initializer Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax"
                  Type="mcacss:InitializerExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for initializer expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ObjectCreationExpressionSyntax"
              Title="Object Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax"
                  Type="mcacss:ObjectCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for object creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:AnonymousObjectCreationExpressionSyntax"
              Title="Anonymous Object Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax"
                  Type="mcacss:AnonymousObjectCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for anonymous object creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ArrayCreationExpressionSyntax"
              Title="Array Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax"
                  Type="mcacss:ArrayCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for array creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ImplicitArrayCreationExpressionSyntax"
              Title="Implicit Array Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax"
                  Type="mcacss:ImplicitArrayCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for implicit array creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:StackAllocArrayCreationExpressionSyntax"
              Title="Stack Alloc Array Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax"
                  Type="mcacss:StackAllocArrayCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for stackalloc array creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax"
              Title="Implicit Stack Alloc Array Creation Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax"
                  Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for implicit stackalloc array creation expression.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:QueryExpressionSyntax"
              Title="Query Expression"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:OmittedArraySizeExpressionSyntax"
              Title="Omitted Array Size Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax"
                  Type="mcacss:OmittedArraySizeExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents a placeholder in an array size list.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:InterpolatedStringExpressionSyntax"
              Title="Interpolated String Expression"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:IsPatternExpressionSyntax"
              Title="Is Pattern Expression"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax"
                  Type="mcacss:IsPatternExpressionSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents a simple pattern-matching expression using the "is" keyword.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ThrowExpressionSyntax"
              Title="Throw Expression"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:SwitchExpressionSyntax"
              Title="Switch Expression"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"
              Type="mcacss:ExpressionSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Provides the base class from which the classes that represent expression syntax nodes are derived. This is an abstract class.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:BaseArgumentListSyntax"
          Title="Base Argument List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:ArgumentListSyntax"
              Title="Argument List" ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax"
                  Type="mcacss:ArgumentListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for the list of arguments.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BracketedArgumentListSyntax"
              Title="Bracketed Argument List"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax"
                  Type="mcacss:BracketedArgumentListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Class which represents the syntax node for bracketed argument list.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax"
              Type="mcacss:BaseArgumentListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Provides the base class from which the classes that represent argument list syntax nodes are derived. This is an abstract class.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:ArgumentSyntax"
                          Title="Argument"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax"
              Type="mcacss:ArgumentSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class which represents the syntax node for argument.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:NameColonSyntax"
                          Title="Name Colon"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax"
              Type="mcacss:NameColonSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class which represents the syntax node for name colon syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:AnonymousObjectMemberDeclaratorSyntax"
          Title="Anonymous Object Member Declarator"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:QueryClauseSyntax"
                          Title="Query Clause"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:FromClauseSyntax"
              Title="From Clause" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo Type="mcacss:LetClauseSyntax"
                              Title="Let Clause"
                              ColorValue="4290286632"
                              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:JoinClauseSyntax"
              Title="Join Clause" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:WhereClauseSyntax"
              Title="Where Clause" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:OrderByClauseSyntax"
              Title="Order By Clause"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:SelectOrGroupClauseSyntax"
          Title="Select Or Group Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:SelectClauseSyntax"
              Title="Select Clause" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:GroupClauseSyntax"
              Title="Group Clause" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:QueryBodySyntax"
                          Title="Query Body"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:JoinIntoClauseSyntax"
          Title="Join Into Clause" ColorValue="4286080130"
          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:OrderingSyntax"
                          Title="Ordering"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:QueryContinuationSyntax"
          Title="Query Continuation"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:WhenClauseSyntax"
                          Title="When Clause"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:PatternSyntax"
                          Title="Pattern"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:DiscardPatternSyntax"
              Title="Discard Pattern"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DeclarationPatternSyntax"
              Title="Declaration Pattern"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:VarPatternSyntax"
              Title="Var Pattern" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:RecursivePatternSyntax"
              Title="Recursive Pattern"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ConstantPatternSyntax"
              Title="Constant Pattern"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:PositionalPatternClauseSyntax"
          Title="Positional Pattern Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:PropertyPatternClauseSyntax"
          Title="Property Pattern Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:SubpatternSyntax"
                          Title="Subpattern"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:InterpolatedStringContentSyntax"
          Title="Interpolated String Content"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:InterpolatedStringTextSyntax"
              Title="Interpolated String Text"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:InterpolationSyntax"
              Title="Interpolation" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:InterpolationAlignmentClauseSyntax"
          Title="Interpolation Alignment Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:InterpolationFormatClauseSyntax"
          Title="Interpolation Format Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:StatementSyntax"
                          Title="Statement"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo Type="mcacss:BlockSyntax"
                              Title="Block"
                              ColorValue="4290286632"
                              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:LocalFunctionStatementSyntax"
              Title="Local Function Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:LocalDeclarationStatementSyntax"
              Title="Local Declaration Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ExpressionStatementSyntax"
              Title="Expression Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:EmptyStatementSyntax"
              Title="Empty Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:LabeledStatementSyntax"
              Title="Labeled Statement"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax"
                  Type="mcacss:LabeledStatementSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Represents a labeled statement syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:GotoStatementSyntax"
              Title="Goto Statement"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax"
                  Type="mcacss:GotoStatementSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            Represents a goto statement syntax
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BreakStatementSyntax"
              Title="Break Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ContinueStatementSyntax"
              Title="Continue Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ReturnStatementSyntax"
              Title="Return Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ThrowStatementSyntax"
              Title="Throw Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:YieldStatementSyntax"
              Title="Yield Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:WhileStatementSyntax"
              Title="While Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DoStatementSyntax"
              Title="Do Statement" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ForStatementSyntax"
              Title="For Statement" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CommonForEachStatementSyntax"
              Title="Common For Each Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:ForEachStatementSyntax"
                  Title="For Each Statement"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ForEachVariableStatementSyntax"
                  Title="For Each Variable Statement"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:UsingStatementSyntax"
              Title="Using Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:FixedStatementSyntax"
              Title="Fixed Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CheckedStatementSyntax"
              Title="Checked Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:UnsafeStatementSyntax"
              Title="Unsafe Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:LockStatementSyntax"
              Title="Lock Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:IfStatementSyntax"
              Title="If Statement" ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax"
                  Type="mcacss:IfStatementSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            Represents an if statement syntax.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:SwitchStatementSyntax"
              Title="Switch Statement"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax"
                  Type="mcacss:SwitchStatementSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Represents a switch statement syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:TryStatementSyntax"
              Title="Try Statement" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax"
              Type="mcacss:StatementSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Represents the base class for all statements syntax classes.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:VariableDeclarationSyntax"
          Title="Variable Declaration"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:VariableDeclaratorSyntax"
          Title="Variable Declarator"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:EqualsValueClauseSyntax"
          Title="Equals Value Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:VariableDesignationSyntax"
          Title="Variable Designation"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:SingleVariableDesignationSyntax"
              Title="Single Variable Designation"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DiscardDesignationSyntax"
              Title="Discard Designation"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ParenthesizedVariableDesignationSyntax"
              Title="Parenthesized Variable Designation"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:ElseClauseSyntax"
                          Title="Else Clause"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax"
              Type="mcacss:ElseClauseSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Represents an else statement syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:SwitchSectionSyntax"
                          Title="Switch Section"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax"
              Type="mcacss:SwitchSectionSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Represents a switch section syntax of a switch statement.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:SwitchLabelSyntax"
                          Title="Switch Label"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:CasePatternSwitchLabelSyntax"
              Title="Case Pattern Switch Label"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax"
                  Type="mcacss:CasePatternSwitchLabelSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Represents a case label within a switch statement.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CaseSwitchLabelSyntax"
              Title="Case Switch Label"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax"
                  Type="mcacss:CaseSwitchLabelSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Represents a case label within a switch statement.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DefaultSwitchLabelSyntax"
              Title="Default Switch Label"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax"
                  Type="mcacss:DefaultSwitchLabelSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Represents a default label within a switch statement.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax"
              Type="mcacss:SwitchLabelSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Represents a switch label within a switch statement.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:SwitchExpressionArmSyntax"
          Title="Switch Expression Arm"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:CatchClauseSyntax"
                          Title="Catch Clause"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:CatchDeclarationSyntax"
          Title="Catch Declaration" ColorValue="4286080130"
          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:CatchFilterClauseSyntax"
          Title="Catch Filter Clause"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:FinallyClauseSyntax"
                          Title="Finally Clause"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:CompilationUnitSyntax"
          Title="Compilation Unit" ColorValue="4286080130"
          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:ExternAliasDirectiveSyntax"
          Title="Extern Alias Directive"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax"
              Type="mcacss:ExternAliasDirectiveSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText xml:space="preserve">
            Represents an ExternAlias directive syntax, e.g. "extern alias MyAlias;" with specifying "/r:MyAlias=SomeAssembly.dll " on the compiler command line.
            </XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:UsingDirectiveSyntax"
          Title="Using Directive" ColorValue="4286080130"
          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:MemberDeclarationSyntax"
          Title="Member Declaration"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:GlobalStatementSyntax"
              Title="Global Statement"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:NamespaceDeclarationSyntax"
              Title="Namespace Declaration"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BaseTypeDeclarationSyntax"
              Title="Base Type Declaration"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:TypeDeclarationSyntax"
                  Title="Type Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfo
                      Type="mcacss:ClassDeclarationSyntax"
                      Title="Class Declaration"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"
                          Type="mcacss:ClassDeclarationSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Class type declaration syntax.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:StructDeclarationSyntax"
                      Title="Struct Declaration"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax"
                          Type="mcacss:StructDeclarationSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Struct type declaration syntax.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:InterfaceDeclarationSyntax"
                      Title="Interface Declaration"
                      ColorValue="4282150525">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                      <anal:AppTypeInfo.DocInfo>
                        <TypeDocumentation
                          ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax"
                          Type="mcacss:InterfaceDeclarationSyntax">
                          <TypeDocumentation.XmlDoc>
                            <Summary>
                              <Summary.DocumentElementCollection>
                                <XmlDocText>Interface type declaration syntax.</XmlDocText>
                              </Summary.DocumentElementCollection>
                            </Summary>
                          </TypeDocumentation.XmlDoc>
                        </TypeDocumentation>
                      </anal:AppTypeInfo.DocInfo>
                    </anal:AppTypeInfo>
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"
                      Type="mcacss:TypeDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Base class for type declaration syntax (class, struct, interface).</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:EnumDeclarationSyntax"
                  Title="Enum Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax"
                      Type="mcacss:EnumDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Enum type declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax"
                  Type="mcacss:BaseTypeDeclarationSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Base class for type declaration syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DelegateDeclarationSyntax"
              Title="Delegate Declaration"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax"
                  Type="mcacss:DelegateDeclarationSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Delegate declaration syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:EnumMemberDeclarationSyntax"
              Title="Enum Member Declaration"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BaseFieldDeclarationSyntax"
              Title="Base Field Declaration"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:FieldDeclarationSyntax"
                  Title="Field Declaration"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:EventFieldDeclarationSyntax"
                  Title="Event Field Declaration"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BaseMethodDeclarationSyntax"
              Title="Base Method Declaration"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:MethodDeclarationSyntax"
                  Title="Method Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax"
                      Type="mcacss:MethodDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Method declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:OperatorDeclarationSyntax"
                  Title="Operator Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax"
                      Type="mcacss:OperatorDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Operator declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ConversionOperatorDeclarationSyntax"
                  Title="Conversion Operator Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax"
                      Type="mcacss:ConversionOperatorDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Conversion operator declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ConstructorDeclarationSyntax"
                  Title="Constructor Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax"
                      Type="mcacss:ConstructorDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Constructor declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:DestructorDeclarationSyntax"
                  Title="Destructor Declaration"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax"
                      Type="mcacss:DestructorDeclarationSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText>Destructor declaration syntax.</XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax"
                  Type="mcacss:BaseMethodDeclarationSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Base type for method declaration syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BasePropertyDeclarationSyntax"
              Title="Base Property Declaration"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:PropertyDeclarationSyntax"
                  Title="Property Declaration"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:EventDeclarationSyntax"
                  Title="Event Declaration"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:IndexerDeclarationSyntax"
                  Title="Indexer Declaration"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax"
                  Type="mcacss:BasePropertyDeclarationSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Base type for property declaration syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:IncompleteMemberSyntax"
              Title="Incomplete Member"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"
              Type="mcacss:MemberDeclarationSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Member declaration syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:AttributeListSyntax"
                          Title="Attribute List"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax"
              Type="mcacss:AttributeListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class representing one or more attributes applied to a language construct.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:AttributeTargetSpecifierSyntax"
          Title="Attribute Target Specifier"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax"
              Type="mcacss:AttributeTargetSpecifierSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class representing what language construct an attribute targets.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:AttributeSyntax"
                          Title="Attribute"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax"
              Type="mcacss:AttributeSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Attribute syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:AttributeArgumentListSyntax"
          Title="Attribute Argument List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax"
              Type="mcacss:AttributeArgumentListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Attribute argument list syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:AttributeArgumentSyntax"
          Title="Attribute Argument"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax"
              Type="mcacss:AttributeArgumentSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Attribute argument syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:NameEqualsSyntax"
                          Title="Name Equals"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax"
              Type="mcacss:NameEqualsSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Class representing an identifier name followed by an equals token.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:TypeParameterListSyntax"
          Title="Type Parameter List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax"
              Type="mcacss:TypeParameterListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Type parameter list syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:TypeParameterSyntax"
                          Title="Type Parameter"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax"
              Type="mcacss:TypeParameterSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Type parameter syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:BaseListSyntax"
                          Title="Base List"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax"
              Type="mcacss:BaseListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Base list syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:BaseTypeSyntax"
                          Title="Base Type"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:SimpleBaseTypeSyntax"
              Title="Simple Base Type"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax"
              Type="mcacss:BaseTypeSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Provides the base class from which the classes that represent base type syntax nodes are derived. This is an abstract class.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:TypeParameterConstraintClauseSyntax"
          Title="Type Parameter Constraint Clause"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax"
              Type="mcacss:TypeParameterConstraintClauseSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Type parameter constraint clause.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:TypeParameterConstraintSyntax"
          Title="Type Parameter Constraint"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:ConstructorConstraintSyntax"
              Title="Constructor Constraint"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax"
                  Type="mcacss:ConstructorConstraintSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Constructor constraint syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:ClassOrStructConstraintSyntax"
              Title="Class Or Struct Constraint"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax"
                  Type="mcacss:ClassOrStructConstraintSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Base type for class or struct constraint syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:TypeConstraintSyntax"
              Title="Type Constraint"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax"
                  Type="mcacss:TypeConstraintSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Type constraint syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax"
              Type="mcacss:TypeParameterConstraintSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Base type for type parameter constraint syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:ExplicitInterfaceSpecifierSyntax"
          Title="Explicit Interface Specifier"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:ConstructorInitializerSyntax"
          Title="Constructor Initializer"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax"
              Type="mcacss:ConstructorInitializerSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Constructor initializer syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:ArrowExpressionClauseSyntax"
          Title="Arrow Expression Clause"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax"
              Type="mcacss:ArrowExpressionClauseSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>The syntax for the expression body of an expression-bodied member.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:AccessorListSyntax"
                          Title="Accessor List"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:AccessorDeclarationSyntax"
          Title="Accessor Declaration"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:BaseParameterListSyntax"
          Title="Base Parameter List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:ParameterListSyntax"
              Title="Parameter List"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax"
                  Type="mcacss:ParameterListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Parameter list syntax.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:BracketedParameterListSyntax"
              Title="Bracketed Parameter List"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax"
                  Type="mcacss:BracketedParameterListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText>Parameter list syntax with surrounding brackets.</XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax"
              Type="mcacss:BaseParameterListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Base type for parameter list syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:ParameterSyntax"
                          Title="Parameter"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax"
              Type="mcacss:ParameterSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText>Parameter syntax.</XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:CrefSyntax"
                          Title="Cref"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo Type="mcacss:TypeCrefSyntax"
                              Title="Type Cref"
                              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax"
                  Type="mcacss:TypeCrefSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            A symbol reference that definitely refers to a type.
            For example, "int", "A::B", "A.B", "A&lt;T&gt;", but not "M()" (has parameter list) or "this" (indexer).
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:QualifiedCrefSyntax"
              Title="Qualified Cref"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax"
                  Type="mcacss:QualifiedCrefSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            A symbol reference to a type or non-type member that is qualified by an enclosing type or namespace.
            For example, cref="System.String.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:MemberCrefSyntax"
              Title="Member Cref" ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:NameMemberCrefSyntax"
                  Title="Name Member Cref"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax"
                      Type="mcacss:NameMemberCrefSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText
                              xml:space="preserve">
            A MemberCrefSyntax specified by a name (an identifier, predefined type keyword, or an alias-qualified name,
            with an optional type parameter list) and an optional parameter list.
            For example, "M", "M&lt;T&gt;" or "M(int)".
            Also, "A::B()" or "string()".
            </XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:IndexerMemberCrefSyntax"
                  Title="Indexer Member Cref"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax"
                      Type="mcacss:IndexerMemberCrefSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText
                              xml:space="preserve">
            A MemberCrefSyntax specified by a this keyword and an optional parameter list.
            For example, "this" or "this[int]".
            </XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:OperatorMemberCrefSyntax"
                  Title="Operator Member Cref"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax"
                      Type="mcacss:OperatorMemberCrefSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText
                              xml:space="preserve">
            A MemberCrefSyntax specified by an operator keyword, an operator symbol and an optional parameter list.
            For example, "operator +" or "operator -[int]".
            NOTE: the operator must be overloadable.
            </XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ConversionOperatorMemberCrefSyntax"
                  Title="Conversion Operator Member Cref"
                  ColorValue="4288594572">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                  <anal:AppTypeInfo.DocInfo>
                    <TypeDocumentation
                      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax"
                      Type="mcacss:ConversionOperatorMemberCrefSyntax">
                      <TypeDocumentation.XmlDoc>
                        <Summary>
                          <Summary.DocumentElementCollection>
                            <XmlDocText
                              xml:space="preserve">
            A MemberCrefSyntax specified by an implicit or explicit keyword, an operator keyword, a destination type, and an optional parameter list.
            For example, "implicit operator int" or "explicit operator MyType(int)".
            </XmlDocText>
                          </Summary.DocumentElementCollection>
                        </Summary>
                      </TypeDocumentation.XmlDoc>
                    </TypeDocumentation>
                  </anal:AppTypeInfo.DocInfo>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax"
                  Type="mcacss:MemberCrefSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            The unqualified part of a CrefSyntax.
            For example, "ToString()" in "object.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax"
              Type="mcacss:CrefSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText xml:space="preserve">
            A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or &lt;seealso&gt; documentation comment tag).
            For example, the M in &lt;see cref="M" /&gt;.
            </XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:BaseCrefParameterListSyntax"
          Title="Base Cref Parameter List"
          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:CrefParameterListSyntax"
              Title="Cref Parameter List"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax"
                  Type="mcacss:CrefParameterListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            A parenthesized list of cref parameters.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:CrefBracketedParameterListSyntax"
              Title="Cref Bracketed Parameter List"
              ColorValue="4290286632">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
              <anal:AppTypeInfo.DocInfo>
                <TypeDocumentation
                  ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax"
                  Type="mcacss:CrefBracketedParameterListSyntax">
                  <TypeDocumentation.XmlDoc>
                    <Summary>
                      <Summary.DocumentElementCollection>
                        <XmlDocText xml:space="preserve">
            A bracketed list of cref parameters.
            </XmlDocText>
                      </Summary.DocumentElementCollection>
                    </Summary>
                  </TypeDocumentation.XmlDoc>
                </TypeDocumentation>
              </anal:AppTypeInfo.DocInfo>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax"
              Type="mcacss:BaseCrefParameterListSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText xml:space="preserve">
            A list of cref parameters with surrounding punctuation.
            Unlike regular parameters, cref parameters do not have names.
            </XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:CrefParameterSyntax"
                          Title="Cref Parameter"
                          ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax"
              Type="mcacss:CrefParameterSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText xml:space="preserve">
            An element of a BaseCrefParameterListSyntax.
            Unlike a regular parameter, a cref parameter has only an optional ref or out keyword and a type -
            there is no name and there are no attributes or other modifiers.
            </XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:XmlNodeSyntax"
                          Title="Xml Node"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:XmlElementSyntax"
              Title="Xml Element" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlEmptyElementSyntax"
              Title="Xml Empty Element"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo Type="mcacss:XmlTextSyntax"
                              Title="Xml Text"
                              ColorValue="4290286632"
                              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlCDataSectionSyntax"
              Title="Xml CData Section"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlProcessingInstructionSyntax"
              Title="Xml Processing Instruction"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlCommentSyntax"
              Title="Xml Comment" ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:XmlElementStartTagSyntax"
          Title="Xml Element Start Tag"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:XmlElementEndTagSyntax"
          Title="Xml Element End Tag"
          ColorValue="4286080130" DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:XmlNameSyntax"
                          Title="Xml Name"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:XmlPrefixSyntax"
                          Title="Xml Prefix"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfoCollection />
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo Type="mcacss:XmlAttributeSyntax"
                          Title="Xml Attribute"
                          ColorValue="4286080130"
                          DocInfo="{assembly:Null}">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:XmlTextAttributeSyntax"
              Title="Xml Text Attribute"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlCrefAttributeSyntax"
              Title="Xml Cref Attribute"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:XmlNameAttributeSyntax"
              Title="Xml Name Attribute"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
        </anal:AppTypeInfo>
        <anal:AppTypeInfo
          Type="mcacss:StructuredTriviaSyntax"
          Title="Structured Trivia" ColorValue="4286080130">
          <anal:AppTypeInfo.SubTypeInfos>
            <anal:AppTypeInfo
              Type="mcacss:SkippedTokensTriviaSyntax"
              Title="Skipped Tokens Trivia"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DocumentationCommentTriviaSyntax"
              Title="Documentation Comment Trivia"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfoCollection />
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
            <anal:AppTypeInfo
              Type="mcacss:DirectiveTriviaSyntax"
              Title="Directive Trivia"
              ColorValue="4290286632"
              DocInfo="{assembly:Null}">
              <anal:AppTypeInfo.SubTypeInfos>
                <anal:AppTypeInfo
                  Type="mcacss:BranchingDirectiveTriviaSyntax"
                  Title="Branching Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfo
                      Type="mcacss:ConditionalDirectiveTriviaSyntax"
                      Title="Conditional Directive Trivia"
                      ColorValue="4282150525"
                      DocInfo="{assembly:Null}">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfo
                          Type="mcacss:IfDirectiveTriviaSyntax"
                          Title="If Directive Trivia"
                          ColorValue="4283645091"
                          DocInfo="{assembly:Null}">
                          <anal:AppTypeInfo.SubTypeInfos>
                            <anal:AppTypeInfoCollection />
                          </anal:AppTypeInfo.SubTypeInfos>
                        </anal:AppTypeInfo>
                        <anal:AppTypeInfo
                          Type="mcacss:ElifDirectiveTriviaSyntax"
                          Title="Elif Directive Trivia"
                          ColorValue="4283645091"
                          DocInfo="{assembly:Null}">
                          <anal:AppTypeInfo.SubTypeInfos>
                            <anal:AppTypeInfoCollection />
                          </anal:AppTypeInfo.SubTypeInfos>
                        </anal:AppTypeInfo>
                      </anal:AppTypeInfo.SubTypeInfos>
                    </anal:AppTypeInfo>
                    <anal:AppTypeInfo
                      Type="mcacss:ElseDirectiveTriviaSyntax"
                      Title="Else Directive Trivia"
                      ColorValue="4282150525"
                      DocInfo="{assembly:Null}">
                      <anal:AppTypeInfo.SubTypeInfos>
                        <anal:AppTypeInfoCollection />
                      </anal:AppTypeInfo.SubTypeInfos>
                    </anal:AppTypeInfo>
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:EndIfDirectiveTriviaSyntax"
                  Title="End If Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:RegionDirectiveTriviaSyntax"
                  Title="Region Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:EndRegionDirectiveTriviaSyntax"
                  Title="End Region Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ErrorDirectiveTriviaSyntax"
                  Title="Error Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:WarningDirectiveTriviaSyntax"
                  Title="Warning Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:BadDirectiveTriviaSyntax"
                  Title="Bad Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:DefineDirectiveTriviaSyntax"
                  Title="Define Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:UndefDirectiveTriviaSyntax"
                  Title="Undef Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:LineDirectiveTriviaSyntax"
                  Title="Line Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:PragmaWarningDirectiveTriviaSyntax"
                  Title="Pragma Warning Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:PragmaChecksumDirectiveTriviaSyntax"
                  Title="Pragma Checksum Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ReferenceDirectiveTriviaSyntax"
                  Title="Reference Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:LoadDirectiveTriviaSyntax"
                  Title="Load Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:ShebangDirectiveTriviaSyntax"
                  Title="Shebang Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
                <anal:AppTypeInfo
                  Type="mcacss:NullableDirectiveTriviaSyntax"
                  Title="Nullable Directive Trivia"
                  ColorValue="4288594572"
                  DocInfo="{assembly:Null}">
                  <anal:AppTypeInfo.SubTypeInfos>
                    <anal:AppTypeInfoCollection />
                  </anal:AppTypeInfo.SubTypeInfos>
                </anal:AppTypeInfo>
              </anal:AppTypeInfo.SubTypeInfos>
            </anal:AppTypeInfo>
          </anal:AppTypeInfo.SubTypeInfos>
          <anal:AppTypeInfo.DocInfo>
            <TypeDocumentation
              ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax"
              Type="mcacss:StructuredTriviaSyntax">
              <TypeDocumentation.XmlDoc>
                <Summary>
                  <Summary.DocumentElementCollection>
                    <XmlDocText xml:space="preserve">
            It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it.
            </XmlDocText>
                  </Summary.DocumentElementCollection>
                </Summary>
              </TypeDocumentation.XmlDoc>
            </TypeDocumentation>
          </anal:AppTypeInfo.DocInfo>
        </anal:AppTypeInfo>
      </anal:AppTypeInfo.SubTypeInfos>
      <anal:AppTypeInfo.DocInfo>
        <TypeDocumentation
          ElementId="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode"
          Type="mcacs:CSharpSyntaxNode">
          <TypeDocumentation.XmlDoc>
            <Summary>
              <Summary.DocumentElementCollection>
                <XmlDocText xml:space="preserve">
            Represents a non-terminal node in the syntax tree.
            </XmlDocText>
              </Summary.DocumentElementCollection>
            </Summary>
          </TypeDocumentation.XmlDoc>
        </TypeDocumentation>
      </anal:AppTypeInfo.DocInfo>
    </anal:AppTypeInfo>
  </TypesViewModel.Root>
  <TypesViewModel.DocumentCollection>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode"
      Type="mcacs:CSharpSyntaxNode">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Represents a non-terminal node in the syntax tree.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax"
      Type="mcacss:TypeArgumentListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for type argument list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax"
      Type="mcacss:TupleElementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Tuple type element.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"
      Type="mcacss:ExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent expression syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax"
      Type="mcacss:TypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent type syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax"
      Type="mcacss:NameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent name syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax"
      Type="mcacss:SimpleNameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent simple name syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax"
      Type="mcacss:IdentifierNameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for identifier name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax"
      Type="mcacss:GenericNameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for generic name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax"
      Type="mcacss:QualifiedNameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for qualified name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax"
      Type="mcacss:AliasQualifiedNameSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for alias qualified name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax"
      Type="mcacss:PredefinedTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for predefined types.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax"
      Type="mcacss:ArrayTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for the array type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax"
      Type="mcacss:PointerTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for pointer type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax"
      Type="mcacss:NullableTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a nullable type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax"
      Type="mcacss:TupleTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for tuple type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax"
      Type="mcacss:OmittedTypeArgumentSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents a placeholder in the type argument list of an unbound generic type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax"
      Type="mcacss:RefTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The ref modifier of a method's return value or a local.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax"
      Type="mcacss:ParenthesizedExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for parenthesized expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax"
      Type="mcacss:TupleExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for tuple expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax"
      Type="mcacss:PrefixUnaryExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for prefix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax"
      Type="mcacss:AwaitExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for an "await" expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax"
      Type="mcacss:PostfixUnaryExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for postfix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax"
      Type="mcacss:MemberAccessExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for member access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax"
      Type="mcacss:ConditionalAccessExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for conditional access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax"
      Type="mcacss:MemberBindingExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for member binding expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax"
      Type="mcacss:ElementBindingExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for element binding expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax"
      Type="mcacss:RangeExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a range expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax"
      Type="mcacss:ImplicitElementAccessSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for implicit element access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax"
      Type="mcacss:BinaryExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents an expression that has a binary operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax"
      Type="mcacss:AssignmentExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents an expression that has an assignment operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax"
      Type="mcacss:ConditionalExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for conditional expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax"
      Type="mcacss:InstanceExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent instance expression syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax"
      Type="mcacss:ThisExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a this expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax"
      Type="mcacss:BaseExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a base expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax"
      Type="mcacss:LiteralExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a literal expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax"
      Type="mcacss:MakeRefExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for MakeRef expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax"
      Type="mcacss:RefTypeExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for RefType expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax"
      Type="mcacss:RefValueExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for RefValue expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax"
      Type="mcacss:CheckedExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for Checked or Unchecked expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax"
      Type="mcacss:DefaultExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for Default expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax"
      Type="mcacss:TypeOfExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for TypeOf expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax"
      Type="mcacss:SizeOfExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for SizeOf expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax"
      Type="mcacss:InvocationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for invocation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax"
      Type="mcacss:ElementAccessExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for element access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax"
      Type="mcacss:DeclarationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for the variable declaration in an out var declaration or a deconstruction declaration.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax"
      Type="mcacss:CastExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for cast expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax"
      Type="mcacss:AnonymousFunctionExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent anonymous function expressions are derived.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax"
      Type="mcacss:AnonymousMethodExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for anonymous method expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax"
      Type="mcacss:LambdaExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent lambda expressions are derived.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax"
      Type="mcacss:SimpleLambdaExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for a simple lambda expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax"
      Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for parenthesized lambda expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax"
      Type="mcacss:InitializerExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for initializer expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax"
      Type="mcacss:ObjectCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for object creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax"
      Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for anonymous object creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax"
      Type="mcacss:ArrayCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax"
      Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for implicit array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax"
      Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for stackalloc array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax"
      Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for implicit stackalloc array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax"
      Type="mcacss:OmittedArraySizeExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents a placeholder in an array size list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax"
      Type="mcacss:IsPatternExpressionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents a simple pattern-matching expression using the "is" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax"
      Type="mcacss:BaseArgumentListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent argument list syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax"
      Type="mcacss:ArgumentListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for the list of arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax"
      Type="mcacss:BracketedArgumentListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for bracketed argument list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax"
      Type="mcacss:ArgumentSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for argument.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax"
      Type="mcacss:NameColonSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class which represents the syntax node for name colon syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax"
      Type="mcacss:StatementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents the base class for all statements syntax classes.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax"
      Type="mcacss:LabeledStatementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a labeled statement syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax"
      Type="mcacss:GotoStatementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Represents a goto statement syntax
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax"
      Type="mcacss:IfStatementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Represents an if statement syntax.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax"
      Type="mcacss:SwitchStatementSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a switch statement syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax"
      Type="mcacss:ElseClauseSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents an else statement syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax"
      Type="mcacss:SwitchSectionSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a switch section syntax of a switch statement.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax"
      Type="mcacss:SwitchLabelSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a switch label within a switch statement.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax"
      Type="mcacss:CasePatternSwitchLabelSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a case label within a switch statement.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax"
      Type="mcacss:CaseSwitchLabelSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a case label within a switch statement.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax"
      Type="mcacss:DefaultSwitchLabelSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Represents a default label within a switch statement.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax"
      Type="mcacss:ExternAliasDirectiveSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Represents an ExternAlias directive syntax, e.g. "extern alias MyAlias;" with specifying "/r:MyAlias=SomeAssembly.dll " on the compiler command line.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"
      Type="mcacss:MemberDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Member declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax"
      Type="mcacss:BaseTypeDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base class for type declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"
      Type="mcacss:TypeDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base class for type declaration syntax (class, struct, interface).</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"
      Type="mcacss:ClassDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class type declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax"
      Type="mcacss:StructDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Struct type declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax"
      Type="mcacss:InterfaceDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Interface type declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax"
      Type="mcacss:EnumDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Enum type declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax"
      Type="mcacss:DelegateDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Delegate declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax"
      Type="mcacss:BaseMethodDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base type for method declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax"
      Type="mcacss:MethodDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Method declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax"
      Type="mcacss:OperatorDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Operator declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax"
      Type="mcacss:ConversionOperatorDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Conversion operator declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax"
      Type="mcacss:ConstructorDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Constructor declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax"
      Type="mcacss:DestructorDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Destructor declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax"
      Type="mcacss:BasePropertyDeclarationSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base type for property declaration syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax"
      Type="mcacss:AttributeListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class representing one or more attributes applied to a language construct.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax"
      Type="mcacss:AttributeTargetSpecifierSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class representing what language construct an attribute targets.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax"
      Type="mcacss:AttributeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Attribute syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax"
      Type="mcacss:AttributeArgumentListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Attribute argument list syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax"
      Type="mcacss:AttributeArgumentSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Attribute argument syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax"
      Type="mcacss:NameEqualsSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Class representing an identifier name followed by an equals token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax"
      Type="mcacss:TypeParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Type parameter list syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax"
      Type="mcacss:TypeParameterSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Type parameter syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax"
      Type="mcacss:BaseListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base list syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax"
      Type="mcacss:BaseTypeSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Provides the base class from which the classes that represent base type syntax nodes are derived. This is an abstract class.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax"
      Type="mcacss:TypeParameterConstraintClauseSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Type parameter constraint clause.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax"
      Type="mcacss:TypeParameterConstraintSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base type for type parameter constraint syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax"
      Type="mcacss:ConstructorConstraintSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Constructor constraint syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax"
      Type="mcacss:ClassOrStructConstraintSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base type for class or struct constraint syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax"
      Type="mcacss:TypeConstraintSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Type constraint syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax"
      Type="mcacss:ConstructorInitializerSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Constructor initializer syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax"
      Type="mcacss:ArrowExpressionClauseSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The syntax for the expression body of an expression-bodied member.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax"
      Type="mcacss:BaseParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Base type for parameter list syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax"
      Type="mcacss:ParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Parameter list syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax"
      Type="mcacss:BracketedParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Parameter list syntax with surrounding brackets.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax"
      Type="mcacss:ParameterSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Parameter syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax"
      Type="mcacss:CrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A symbol referenced by a cref attribute (e.g. in a &lt;see&gt; or &lt;seealso&gt; documentation comment tag).
            For example, the M in &lt;see cref="M" /&gt;.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax"
      Type="mcacss:TypeCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A symbol reference that definitely refers to a type.
            For example, "int", "A::B", "A.B", "A&lt;T&gt;", but not "M()" (has parameter list) or "this" (indexer).
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax"
      Type="mcacss:QualifiedCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A symbol reference to a type or non-type member that is qualified by an enclosing type or namespace.
            For example, cref="System.String.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax"
      Type="mcacss:MemberCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            The unqualified part of a CrefSyntax.
            For example, "ToString()" in "object.ToString()".
            NOTE: TypeCrefSyntax, QualifiedCrefSyntax, and MemberCrefSyntax overlap.  The syntax in a TypeCrefSyntax
            will always be bound as type, so it's safer to use QualifiedCrefSyntax or MemberCrefSyntax if the symbol
            might be a non-type member.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax"
      Type="mcacss:NameMemberCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a name (an identifier, predefined type keyword, or an alias-qualified name,
            with an optional type parameter list) and an optional parameter list.
            For example, "M", "M&lt;T&gt;" or "M(int)".
            Also, "A::B()" or "string()".
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax"
      Type="mcacss:IndexerMemberCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by a this keyword and an optional parameter list.
            For example, "this" or "this[int]".
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax"
      Type="mcacss:OperatorMemberCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an operator keyword, an operator symbol and an optional parameter list.
            For example, "operator +" or "operator -[int]".
            NOTE: the operator must be overloadable.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax"
      Type="mcacss:ConversionOperatorMemberCrefSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A MemberCrefSyntax specified by an implicit or explicit keyword, an operator keyword, a destination type, and an optional parameter list.
            For example, "implicit operator int" or "explicit operator MyType(int)".
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax"
      Type="mcacss:BaseCrefParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A list of cref parameters with surrounding punctuation.
            Unlike regular parameters, cref parameters do not have names.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax"
      Type="mcacss:CrefParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A parenthesized list of cref parameters.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax"
      Type="mcacss:CrefBracketedParameterListSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            A bracketed list of cref parameters.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax"
      Type="mcacss:CrefParameterSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            An element of a BaseCrefParameterListSyntax.
            Unlike a regular parameter, a cref parameter has only an optional ref or out keyword and a type -
            there is no name and there are no attributes or other modifiers.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <TypeDocumentation
      ElementId="T:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax"
      Type="mcacss:StructuredTriviaSyntax">
      <TypeDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            It's a non terminal Trivia CSharpSyntaxNode that has a tree underneath it.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </TypeDocumentation.XmlDoc>
    </TypeDocumentation>
    <MethodDocumentation MemberName="ParseName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseName(System.String,System.Int32,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a NameSyntax node using the grammar rule for names.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseTypeName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseTypeName(System.String,System.Int32,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a TypeNameSyntax node using the grammar rule for type names.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseExpression(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse an ExpressionSyntax node using the lowest precedence grammar rule for expressions.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseStatement(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a StatementSyntaxNode using grammar rule for statements.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParseMemberDeclaration"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseMemberDeclaration(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a MemberDeclarationSyntax. This includes all of the kinds of members that could occur in a type declaration.
            If nothing resembling a valid member declaration is found in the input, returns null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseCompilationUnit"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseCompilationUnit(System.String,System.Int32,Microsoft.CodeAnalysis.CSharp.CSharpParseOptions)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a CompilationUnitSyntax using the grammar rule for an entire compilation unit (file). To produce a
            SyntaxTree instance, use CSharpSyntaxTree.ParseText instead.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseParameterList"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a ParameterListSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParseBracketedParameterList"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedParameterList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a BracketedParameterListSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ParseArgumentList"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse an ArgumentListSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParseBracketedArgumentList"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseBracketedArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse a BracketedArgumentListSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParseAttributeArgumentList"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseAttributeArgumentList(System.String,System.Int32,Microsoft.CodeAnalysis.ParseOptions,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Parse an AttributeArgumentListSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="offset">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="options">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="consumeFullText">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="GetStandaloneExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetStandaloneExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets the containing expression that is actually a language expression and not just typed
            as an ExpressionSyntax for convenience. For example, NameSyntax nodes on the right side
            of qualified names and member access expressions are not language expressions, yet the
            containing qualified names or member access expressions are indeed expressions.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="GetNonGenericExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GetNonGenericExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Converts a generic name expression into one without the generic arguments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="expression">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <assembly:Null />
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CaseSwitchLabel"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Block"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Block(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BlockSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UsingDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UsingDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ClassOrStructConstraint"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SwitchStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SwitchStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlSeeElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a see element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlSeeAlsoElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSeeAlsoElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a seealso element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="XmlThreadSafetyElement"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlThreadSafetyElement(System.Boolean,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a threadsafety element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="isStatic">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="isInstance">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlNameAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a syntax node for a name attribute in a xml element within a xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="parameterName">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCrefAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCrefAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a syntax node for a cref attribute within a xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="quoteKind">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlRemarksElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlRemarksElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a remarks element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlReturnsElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlReturnsElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a returns element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlValueElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlValueElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the the syntax representation of an xml value element (e.g. for xml documentation comments).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlExceptionElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExceptionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an exception element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlPermissionElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPermissionElement(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a permission element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="cref">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlExampleElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlExampleElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an example element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlParaElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParaElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a para element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlParamElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamElement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a param element within xml documentation comments (e.g. for
            documentation of method parameters).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="parameterName">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlParamRefElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlParamRefElement(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a paramref element within xml documentation comments (e.g. for
            referencing particular parameters of a method).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="parameterName">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlPlaceholderElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPlaceholderElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a placeholder element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlEmptyElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of a named empty xml element within xml documentation comments.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="localName">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="name">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="value">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.SyntaxToken[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="name">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="textTokens">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(System.String,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="name">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="quoteKind">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="textTokens">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text attribute.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="name">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="quoteKind">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
        <Param Name="textTokens">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlNewLine"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNewLine(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates the syntax representation of an xml text that contains a newline token with a documentation comment 
            exterior trivia at the end (continued documentation comment).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="text">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlText"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="value">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlText"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxToken[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Generates the syntax representation of a xml text node (e.g. for xml documentation comments).
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="textTokens">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IdentifierName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates an IdentifierNameSyntax node.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="name">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ShebangDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ShebangDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ShebangDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ShebangDirectiveTrivia(System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ShebangDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="NullableDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="NullableDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="NullableDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NullableDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AccessorDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AccessorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DocumentationComment"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DocumentationComment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates an xml documentation comment that abstracts xml syntax creation.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlSummaryElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlSummaryElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax[])"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Creates a summary element within an xml documentation comment.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <Param Name="content">
          <Param.DocumentElementCollection>
            <XmlDocumentElementCollection />
          </Param.DocumentElementCollection>
        </Param>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IndexerMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IndexerMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IndexerMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerMemberCref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IndexerMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="OperatorMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="OperatorMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="OperatorMemberCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConversionOperatorMemberCref"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConversionOperatorMemberCref"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConversionOperatorMemberCref"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorMemberCref(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConversionOperatorMemberCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CrefParameter"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CrefParameterSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CrefParameter"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CrefParameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CrefParameterSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlElementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlElementStartTag"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementStartTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlElementStartTagSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlElementEndTag"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlElementEndTagSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlElementEndTag"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlElementEndTag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlElementEndTagSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlEmptyElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlEmptyElement(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlEmptyElementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlName(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlPrefix"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlPrefixSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlPrefix"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlPrefixSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlPrefix"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlPrefix(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlPrefixSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlTextAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlTextAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlTextAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlTextAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlTextAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCrefAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCrefAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCrefAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCrefAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCrefAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlNameAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlNameAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlNameAttribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlNameAttribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.String,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlNameAttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlText"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlText(Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlTextSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCDataSection"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCDataSectionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlCDataSection"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlCDataSection(Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCDataSectionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="XmlProcessingInstruction"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="XmlProcessingInstruction"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax,Microsoft.CodeAnalysis.SyntaxTokenList)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="XmlProcessingInstruction"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlProcessingInstruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlProcessingInstructionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlComment"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCommentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="XmlComment"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.XmlComment(Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new XmlCommentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IfDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IfDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IfDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IfDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElifDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElifDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElifDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElifDirectiveTrivia(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Boolean,System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElifDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElseDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElseDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElseDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseDirectiveTrivia(System.Boolean,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElseDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EndIfDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EndIfDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EndIfDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndIfDirectiveTrivia(System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EndIfDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RegionDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RegionDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RegionDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RegionDirectiveTrivia(System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RegionDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="EndRegionDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EndRegionDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="EndRegionDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EndRegionDirectiveTrivia(System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EndRegionDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ErrorDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ErrorDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ErrorDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ErrorDirectiveTrivia(System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ErrorDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="WarningDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WarningDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="WarningDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WarningDirectiveTrivia(System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WarningDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="BadDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BadDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="BadDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BadDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefineDirectiveTrivia(System.String,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UndefDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UndefDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UndefDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UndefDirectiveTrivia(System.String,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UndefDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LineDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LineDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LineDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="PragmaWarningDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaWarningDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PragmaWarningDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="PragmaChecksumDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="PragmaChecksumDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PragmaChecksumDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PragmaChecksumDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ReferenceDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ReferenceDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ReferenceDirectiveTrivia"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReferenceDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ReferenceDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LoadDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LoadDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LoadDirectiveTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LoadDirectiveTrivia(Microsoft.CodeAnalysis.SyntaxToken,System.Boolean)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LoadDirectiveTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EnumDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EnumDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EnumDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EnumDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DelegateDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DelegateDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DelegateDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DelegateDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DelegateDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EnumMemberDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EnumMemberDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EnumMemberDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EnumMemberDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EnumMemberDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SimpleBaseType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleBaseType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SimpleBaseTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="TypeParameterConstraintClause"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeParameterConstraintClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="TypeParameterConstraintClause"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameterConstraintClause(System.String)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeParameterConstraintClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ConstructorConstraint"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorConstraint(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstructorConstraintSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ClassOrStructConstraint"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ClassOrStructConstraint"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassOrStructConstraint(Microsoft.CodeAnalysis.CSharp.SyntaxKind)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ClassOrStructConstraintSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeConstraint"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeConstraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeConstraintSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FieldDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FieldDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EventFieldDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventFieldDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EventFieldDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ExplicitInterfaceSpecifier"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExplicitInterfaceSpecifierSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ExplicitInterfaceSpecifier"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExplicitInterfaceSpecifier(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExplicitInterfaceSpecifierSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="MethodDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MethodDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="MethodDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MethodDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MethodDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="OperatorDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OperatorDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OperatorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConversionOperatorDeclaration"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConversionOperatorDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConversionOperatorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConstructorDeclaration"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstructorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConstructorDeclaration"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorDeclaration(System.String)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstructorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConstructorInitializer"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstructorInitializerSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConstructorInitializer"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstructorInitializer(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstructorInitializerSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DestructorDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DestructorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DestructorDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DestructorDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DestructorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PropertyDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PropertyDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PropertyDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PropertyDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PropertyDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ArrowExpressionClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrowExpressionClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ArrowExpressionClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrowExpressionClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrowExpressionClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EventDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EventDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EventDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EventDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EventDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IndexerDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IndexerDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IndexerDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AccessorDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AccessorDeclaration(Microsoft.CodeAnalysis.CSharp.SyntaxKind)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AccessorDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Parameter"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Parameter(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ParameterSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IncompleteMember"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IncompleteMember(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IncompleteMemberSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SkippedTokensTrivia"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SkippedTokensTrivia(Microsoft.CodeAnalysis.SyntaxTokenList)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SkippedTokensTriviaSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QualifiedCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QualifiedCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QualifiedCref"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedCref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QualifiedCrefSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CheckedStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CheckedStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UnsafeStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UnsafeStatement(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UnsafeStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LockStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LockStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LockStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IfStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IfStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElseClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElseClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ElseClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElseClause(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElseClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="CasePatternSwitchLabel"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="CasePatternSwitchLabel"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="CasePatternSwitchLabel"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CasePatternSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CasePatternSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CaseSwitchLabel"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CaseSwitchLabel"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CaseSwitchLabel(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CaseSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefaultSwitchLabel"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefaultSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefaultSwitchLabel"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultSwitchLabel(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefaultSwitchLabelSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SwitchExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SwitchExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SwitchExpressionArm"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SwitchExpressionArm"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SwitchExpressionArm"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SwitchExpressionArm(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SwitchExpressionArmSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchClause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchFilterClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchFilterClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CatchFilterClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CatchFilterClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CatchFilterClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FinallyClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FinallyClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FinallyClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FinallyClause(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FinallyClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ExternAliasDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ExternAliasDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ExternAliasDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExternAliasDirective(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExternAliasDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UsingDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UsingDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UsingDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UsingDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UsingDirective"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingDirective(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UsingDirectiveSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NamespaceDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NamespaceDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NamespaceDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="AttributeTargetSpecifier"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeTargetSpecifierSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="AttributeTargetSpecifier"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeTargetSpecifier(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeTargetSpecifierSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Attribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Attribute"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AttributeArgument"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeArgumentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AttributeArgument"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AttributeArgument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AttributeArgumentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameEquals"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameEqualsSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameEquals"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameEqualsSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameEquals"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameEquals(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameEqualsSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeParameter"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeParameterSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeParameter"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeParameter(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeParameterSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ClassDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ClassDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ClassDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ClassDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ClassDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="StructDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new StructDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="StructDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StructDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new StructDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="InterfaceDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterfaceDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="InterfaceDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterfaceDeclaration(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterfaceDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="WhenClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WhenClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DiscardPattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardPattern(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DiscardPatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DeclarationPattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationPattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DeclarationPatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VarPattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VarPattern(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VarPatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VarPattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VarPattern(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VarPatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RecursivePattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RecursivePattern(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RecursivePatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Subpattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Subpattern(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SubpatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Subpattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Subpattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SubpatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ConstantPattern"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConstantPattern(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConstantPatternSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="InterpolatedStringText"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringText(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolatedStringTextSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Interpolation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Interpolation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Interpolation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="InterpolationAlignmentClause"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationAlignmentClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationAlignmentClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="InterpolationFormatClause"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationFormatClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="InterpolationFormatClause"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolationFormatClause(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolationFormatClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GlobalStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GlobalStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GlobalStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="LocalFunctionStatement"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LocalFunctionStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="LocalFunctionStatement"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalFunctionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LocalFunctionStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="LocalDeclarationStatement"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LocalDeclarationStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LocalDeclarationStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VariableDeclaration"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VariableDeclarationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VariableDeclarator"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VariableDeclaratorSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VariableDeclarator"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VariableDeclaratorSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="VariableDeclarator"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VariableDeclarator(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new VariableDeclaratorSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EqualsValueClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EqualsValueClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="EqualsValueClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.EqualsValueClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new EqualsValueClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="SingleVariableDesignation"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SingleVariableDesignation(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SingleVariableDesignationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DiscardDesignation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DiscardDesignation(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DiscardDesignationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ExpressionStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ExpressionStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ExpressionStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LabeledStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LabeledStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LabeledStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LabeledStatement(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LabeledStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GotoStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GotoStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GotoStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ReturnStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ReturnStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ReturnStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ThrowStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ThrowStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="YieldStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.YieldStatement(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new YieldStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="WhileStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhileStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WhileStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DoStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DoStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DoStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ForStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ForStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ForEachStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ForEachStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ForEachStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachStatement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ForEachStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ForEachVariableStatement"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ForEachVariableStatement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ForEachVariableStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="UsingStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.UsingStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new UsingStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FixedStatement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FixedStatement(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FixedStatementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="InvocationExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InvocationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ElementAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElementAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ElementAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElementAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Argument"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArgumentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Argument"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArgumentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameColon"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameColonSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameColon"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameColonSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NameColon"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NameColon(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NameColonSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DeclarationExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DeclarationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DeclarationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CastExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CastExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CastExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CastExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CastExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="AnonymousMethodExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousMethodExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AnonymousMethodExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="SimpleLambdaExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="SimpleLambdaExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="SimpleLambdaExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SimpleLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SimpleLambdaExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParenthesizedLambdaExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ParenthesizedLambdaExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParenthesizedLambdaExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedLambdaExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ParenthesizedLambdaExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ObjectCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ObjectCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ObjectCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ObjectCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ObjectCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="AnonymousObjectMemberDeclarator"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="AnonymousObjectMemberDeclarator"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AnonymousObjectMemberDeclarator(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AnonymousObjectMemberDeclaratorSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ImplicitArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ImplicitArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxTokenList,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ImplicitArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="StackAllocArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="StackAllocArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="StackAllocArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.StackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new StackAllocArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ImplicitStackAllocArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitStackAllocArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ImplicitStackAllocArrayCreationExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitStackAllocArrayCreationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitStackAllocArrayCreationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QueryExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryExpression(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QueryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QueryBody"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryBody(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QueryBodySyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FromClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FromClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FromClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FromClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FromClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FromClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="FromClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.FromClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new FromClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LetClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LetClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LetClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LetClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LetClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LetClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LetClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinClause(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinIntoClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinIntoClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinIntoClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinIntoClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="JoinIntoClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.JoinIntoClause(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new JoinIntoClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="WhereClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WhereClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="WhereClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhereClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WhereClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Ordering"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OrderingSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="Ordering"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Ordering(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OrderingSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SelectClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SelectClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SelectClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SelectClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SelectClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GroupClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GroupClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GroupClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GroupClause(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GroupClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QueryContinuation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QueryContinuationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QueryContinuation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QueryContinuationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QueryContinuation"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QueryContinuation(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QueryContinuationSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="OmittedArraySizeExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedArraySizeExpression(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OmittedArraySizeExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="InterpolatedStringExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InterpolatedStringExpression(Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InterpolatedStringExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IsPatternExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IsPatternExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IsPatternExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IsPatternExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IsPatternExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ThrowExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ThrowExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ThrowExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThrowExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ThrowExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="WhenClause"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.WhenClause(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new WhenClauseSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="IdentifierName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.IdentifierName(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new IdentifierNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QualifiedName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QualifiedNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="QualifiedName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.QualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new QualifiedNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GenericName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GenericNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GenericName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GenericNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="GenericName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.GenericName(System.String)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new GenericNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AliasQualifiedName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AliasQualifiedName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AliasQualifiedName"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AliasQualifiedName(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AliasQualifiedNameSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PredefinedType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PredefinedType(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PredefinedTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ArrayType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ArrayType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ArrayTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PointerType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PointerTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PointerType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PointerType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PointerTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NullableType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NullableTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="NullableType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.NullableType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new NullableTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TupleElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TupleElementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TupleElement"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TupleElement(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TupleElementSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="OmittedTypeArgument"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.OmittedTypeArgument(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new OmittedTypeArgumentSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefType"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefTypeSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParenthesizedExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ParenthesizedExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ParenthesizedExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParenthesizedExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ParenthesizedExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PrefixUnaryExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PrefixUnaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="PrefixUnaryExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PrefixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PrefixUnaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AwaitExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AwaitExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AwaitExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AwaitExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AwaitExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="PostfixUnaryExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PostfixUnaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="PostfixUnaryExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.PostfixUnaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new PostfixUnaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="MemberAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MemberAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="MemberAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberAccessExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MemberAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConditionalAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConditionalAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ConditionalAccessExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalAccessExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConditionalAccessExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="MemberBindingExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MemberBindingExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="MemberBindingExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MemberBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MemberBindingExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation
      MemberName="ElementBindingExpression"
      ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ElementBindingExpression(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)"
      Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ElementBindingExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RangeExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RangeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RangeExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RangeExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RangeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RangeExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ImplicitElementAccess"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ImplicitElementAccess(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ImplicitElementAccessSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="BinaryExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BinaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="BinaryExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BinaryExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BinaryExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AssignmentExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AssignmentExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="AssignmentExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.AssignmentExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new AssignmentExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ConditionalExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConditionalExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ConditionalExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ConditionalExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ConditionalExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="ThisExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ThisExpression(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new ThisExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="BaseExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.BaseExpression(Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new BaseExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LiteralExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LiteralExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="LiteralExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.LiteralExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new LiteralExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="MakeRefExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MakeRefExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="MakeRefExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.MakeRefExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new MakeRefExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefTypeExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefTypeExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefTypeExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefTypeExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefTypeExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefValueExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefValueExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="RefValueExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.RefValueExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new RefValueExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CheckedExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CheckedExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="CheckedExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.CheckedExpression(Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new CheckedExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefaultExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefaultExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="DefaultExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.DefaultExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new DefaultExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeOfExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeOfExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="TypeOfExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.TypeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new TypeOfExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SizeOfExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,Microsoft.CodeAnalysis.SyntaxToken)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SizeOfExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="SizeOfExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.SizeOfExpression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new SizeOfExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <MethodDocumentation MemberName="InvocationExpression"
                         ElementId="M:Microsoft.CodeAnalysis.CSharp.SyntaxFactory.InvocationExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)"
                         Type="mcacs:SyntaxFactory">
      <MethodDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Creates a new InvocationExpressionSyntax instance.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </MethodDocumentation.XmlDoc>
    </MethodDocumentation>
    <PropertyDocumentation MemberName="LessThanToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.LessThanToken"
                           Type="mcacss:TypeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing less than.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.Arguments"
                           Type="mcacss:TypeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of TypeSyntax node representing the type arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="GreaterThanToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax.GreaterThanToken"
                           Type="mcacss:TypeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing greater than.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Type"
                           Type="mcacss:TupleElementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type of the tuple element.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax.Identifier"
                           Type="mcacss:TupleElementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the name of the tuple element.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax.Identifier"
                           Type="mcacss:IdentifierNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the keyword for the kind of the identifier name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Identifier"
                           Type="mcacss:GenericNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the name of the identifier of the generic name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="TypeArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.TypeArgumentList"
                           Type="mcacss:GenericNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeArgumentListSyntax node representing the list of type arguments of the generic name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax.Identifier"
                           Type="mcacss:SimpleNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the identifier of the simple name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Left"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Left"
                           Type="mcacss:QualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>NameSyntax node representing the name on the left side of the dot token of the qualified name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="DotToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.DotToken"
                           Type="mcacss:QualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the dot.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Right"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax.Right"
                           Type="mcacss:QualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SimpleNameSyntax node representing the name on the right side of the dot token of the qualified name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Alias"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Alias"
                           Type="mcacss:AliasQualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>IdentifierNameSyntax node representing the name of the alias</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.ColonColonToken"
                           Type="mcacss:AliasQualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing colon colon.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax.Name"
                           Type="mcacss:AliasQualifiedNameSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SimpleNameSyntax node representing the name that is being alias qualified.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax.Keyword"
                           Type="mcacss:PredefinedTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken which represents the keyword corresponding to the predefined type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ElementType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.ElementType"
                           Type="mcacss:ArrayTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax node representing the type of the element of the array.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="RankSpecifiers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax.RankSpecifiers"
                           Type="mcacss:ArrayTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxList of ArrayRankSpecifierSyntax nodes representing the list of rank specifiers for the array.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ElementType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.ElementType"
                           Type="mcacss:PointerTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax node that represents the element type of the pointer.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AsteriskToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax.AsteriskToken"
                           Type="mcacss:PointerTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the asterisk.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ElementType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.ElementType"
                           Type="mcacss:NullableTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax node representing the type of the element.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="QuestionToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax.QuestionToken"
                           Type="mcacss:NullableTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the question mark.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.OpenParenToken"
                           Type="mcacss:TupleTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax.CloseParenToken"
                           Type="mcacss:TupleTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="OmittedTypeArgumentToken"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax.OmittedTypeArgumentToken"
      Type="mcacss:OmittedTypeArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the omitted type argument.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ReadOnlyKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax.ReadOnlyKeyword"
                           Type="mcacss:RefTypeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional "readonly" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.OpenParenToken"
                           Type="mcacss:ParenthesizedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.Expression"
                           Type="mcacss:ParenthesizedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression enclosed within the parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax.CloseParenToken"
                           Type="mcacss:ParenthesizedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.OpenParenToken"
                           Type="mcacss:TupleExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.Arguments"
                           Type="mcacss:TupleExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax.CloseParenToken"
                           Type="mcacss:TupleExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.OperatorToken"
                           Type="mcacss:PrefixUnaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the kind of the operator of the prefix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Operand"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Operand"
                           Type="mcacss:PrefixUnaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax representing the operand of the prefix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AwaitKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.AwaitKeyword"
                           Type="mcacss:AwaitExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the kind "await" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax.Expression"
                           Type="mcacss:AwaitExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax representing the operand of the "await" operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Operand"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.Operand"
                           Type="mcacss:PostfixUnaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax representing the operand of the postfix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax.OperatorToken"
                           Type="mcacss:PostfixUnaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the kind of the operator of the postfix unary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Expression"
                           Type="mcacss:MemberAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the object that the member belongs to.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.OperatorToken"
                           Type="mcacss:MemberAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the kind of the operator in the member access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax.Name"
                           Type="mcacss:MemberAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SimpleNameSyntax node representing the member being accessed.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.Expression"
                           Type="mcacss:ConditionalAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the object conditionally accessed.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.OperatorToken"
                           Type="mcacss:ConditionalAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the question mark.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="WhenNotNull"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax.WhenNotNull"
                           Type="mcacss:ConditionalAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the access expression to be executed when the object is not null.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.OperatorToken"
                           Type="mcacss:MemberBindingExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing dot.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax.Name"
                           Type="mcacss:MemberBindingExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SimpleNameSyntax node representing the member being bound to.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax.ArgumentList"
                           Type="mcacss:ElementBindingExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the element binding expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="LeftOperand"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.LeftOperand"
                           Type="mcacss:RangeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the left of the range operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.OperatorToken"
                           Type="mcacss:RangeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the operator of the range expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="RightOperand"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax.RightOperand"
                           Type="mcacss:RangeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the right of the range operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax.ArgumentList"
                           Type="mcacss:ImplicitElementAccessSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the implicit element access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Left"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Left"
                           Type="mcacss:BinaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the left of the binary operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.OperatorToken"
                           Type="mcacss:BinaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the operator of the binary expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Right"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax.Right"
                           Type="mcacss:BinaryExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the right of the binary operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Left"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Left"
                           Type="mcacss:AssignmentExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the left of the assignment operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.OperatorToken"
                           Type="mcacss:AssignmentExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the operator of the assignment expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Right"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax.Right"
                           Type="mcacss:AssignmentExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the right of the assignment operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Condition"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.Condition"
                           Type="mcacss:ConditionalExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the condition of the conditional expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="QuestionToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.QuestionToken"
                           Type="mcacss:ConditionalExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the question mark.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="WhenTrue"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenTrue"
                           Type="mcacss:ConditionalExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression to be executed when the condition is true.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.ColonToken"
                           Type="mcacss:ConditionalExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the colon.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="WhenFalse"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax.WhenFalse"
                           Type="mcacss:ConditionalExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression to be executed when the condition is false.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Token"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax.Token"
                           Type="mcacss:ThisExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the this keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Token"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax.Token"
                           Type="mcacss:BaseExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the base keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Token"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax.Token"
                           Type="mcacss:LiteralExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the keyword corresponding to the kind of the literal expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Keyword"
                           Type="mcacss:MakeRefExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the MakeRefKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.OpenParenToken"
                           Type="mcacss:MakeRefExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.Expression"
                           Type="mcacss:MakeRefExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Argument of the primary function.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax.CloseParenToken"
                           Type="mcacss:MakeRefExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Keyword"
                           Type="mcacss:RefTypeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the RefTypeKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.OpenParenToken"
                           Type="mcacss:RefTypeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.Expression"
                           Type="mcacss:RefTypeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Argument of the primary function.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax.CloseParenToken"
                           Type="mcacss:RefTypeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Keyword"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the RefValueKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.OpenParenToken"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Expression"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Typed reference expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Comma"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Comma"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Comma separating the arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.Type"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The type of the value.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax.CloseParenToken"
                           Type="mcacss:RefValueExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Keyword"
                           Type="mcacss:CheckedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the checked or unchecked keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.OpenParenToken"
                           Type="mcacss:CheckedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.Expression"
                           Type="mcacss:CheckedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Argument of the primary function.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax.CloseParenToken"
                           Type="mcacss:CheckedExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Keyword"
                           Type="mcacss:DefaultExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the DefaultKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.OpenParenToken"
                           Type="mcacss:DefaultExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.Type"
                           Type="mcacss:DefaultExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Argument of the primary function.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax.CloseParenToken"
                           Type="mcacss:DefaultExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Keyword"
                           Type="mcacss:TypeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the TypeOfKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.OpenParenToken"
                           Type="mcacss:TypeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.Type"
                           Type="mcacss:TypeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The expression to return type of.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax.CloseParenToken"
                           Type="mcacss:TypeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Keyword"
                           Type="mcacss:SizeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the SizeOfKeyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.OpenParenToken"
                           Type="mcacss:SizeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.Type"
                           Type="mcacss:SizeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Argument of the primary function.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax.CloseParenToken"
                           Type="mcacss:SizeOfExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Expression"
                           Type="mcacss:InvocationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression part of the invocation.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.ArgumentList"
                           Type="mcacss:InvocationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ArgumentListSyntax node representing the list of arguments of the invocation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Expression"
                           Type="mcacss:ElementAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression which is accessing the element.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.ArgumentList"
                           Type="mcacss:ElementAccessExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>BracketedArgumentListSyntax node representing the list of arguments of the element access expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Designation"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax.Designation"
                           Type="mcacss:DeclarationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Declaration representing the variable declared in an out parameter or deconstruction.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.OpenParenToken"
                           Type="mcacss:CastExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Type"
                           Type="mcacss:CastExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax node representing the type to which the expression is being cast.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.CloseParenToken"
                           Type="mcacss:CastExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax.Expression"
                           Type="mcacss:CastExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression that is being casted.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AsyncKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.AsyncKeyword"
                           Type="mcacss:AnonymousMethodExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "async" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="DelegateKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.DelegateKeyword"
                           Type="mcacss:AnonymousMethodExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the delegate keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParameterList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.ParameterList"
                           Type="mcacss:AnonymousMethodExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>List of parameters of the anonymous method expression, or null if there no parameters are specified.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Block"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.Block"
                           Type="mcacss:AnonymousMethodExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the anonymous function.
            This will never be null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExpressionBody"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax.ExpressionBody"
                           Type="mcacss:AnonymousMethodExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Inherited from AnonymousFunctionExpressionSyntax, but not used for
            AnonymousMethodExpressionSyntax.  This will always be null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AsyncKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.AsyncKeyword"
                           Type="mcacss:SimpleLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "async" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Parameter"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Parameter"
                           Type="mcacss:SimpleLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ParameterSyntax node representing the parameter of the lambda expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArrowToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.ArrowToken"
                           Type="mcacss:SimpleLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing equals greater than.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Block"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.Block"
                           Type="mcacss:SimpleLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExpressionBody"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax.ExpressionBody"
                           Type="mcacss:SimpleLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AsyncKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.AsyncKeyword"
                           Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "async" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParameterList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ParameterList"
                           Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ParameterListSyntax node representing the list of parameters for the lambda expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArrowToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ArrowToken"
                           Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing equals greater than.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Block"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.Block"
                           Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExpressionBody"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax.ExpressionBody"
                           Type="mcacss:ParenthesizedLambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the lambda.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArrowToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax.ArrowToken"
                           Type="mcacss:LambdaExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing equals greater than.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AsyncKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.AsyncKeyword"
                           Type="mcacss:AnonymousFunctionExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "async" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Block"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Block"
                           Type="mcacss:AnonymousFunctionExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            BlockSyntax node representing the body of the anonymous function.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExpressionBody"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.ExpressionBody"
                           Type="mcacss:AnonymousFunctionExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            ExpressionSyntax node representing the body of the anonymous function.
            Only one of Block or ExpressionBody will be non-null.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Body"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Body"
                           Type="mcacss:AnonymousFunctionExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Either the </XmlDocText>
            <Crossref
              XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.Block">
              <Crossref.DocumentElementCollection>
                <XmlDocumentElementCollection />
              </Crossref.DocumentElementCollection>
            </Crossref>
            <XmlDocText xml:space="preserve"> if it is not </XmlDocText>
            <Code>
              <Code.DocumentElementCollection>
                <XmlDocText>null</XmlDocText>
              </Code.DocumentElementCollection>
            </Code>
            <XmlDocText xml:space="preserve"> or the
            </XmlDocText>
            <Crossref
              XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax.ExpressionBody">
              <Crossref.DocumentElementCollection>
                <XmlDocumentElementCollection />
              </Crossref.DocumentElementCollection>
            </Crossref>
            <XmlDocText xml:space="preserve"> otherwise.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.OpenBraceToken"
                           Type="mcacss:InitializerExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open brace.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expressions"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.Expressions"
                           Type="mcacss:InitializerExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of ExpressionSyntax representing the list of expressions in the initializer expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax.CloseBraceToken"
                           Type="mcacss:InitializerExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close brace.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NewKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.NewKeyword"
                           Type="mcacss:ObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the new keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Type"
                           Type="mcacss:ObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax representing the type of the object being created.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ArgumentList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.ArgumentList"
                           Type="mcacss:ObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ArgumentListSyntax representing the list of arguments passed as part of the object creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializer"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax.Initializer"
                           Type="mcacss:ObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>InitializerExpressionSyntax representing the initializer expression for the object being created.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NewKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.NewKeyword"
                           Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the new keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.OpenBraceToken"
                           Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open brace.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.Initializers"
                           Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of AnonymousObjectMemberDeclaratorSyntax representing the list of object member initializers.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax.CloseBraceToken"
                           Type="mcacss:AnonymousObjectCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close brace.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NewKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.NewKeyword"
                           Type="mcacss:ArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the new keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Type"
                           Type="mcacss:ArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ArrayTypeSyntax node representing the type of the array.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializer"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax.Initializer"
                           Type="mcacss:ArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>InitializerExpressionSyntax node representing the initializer of the array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NewKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.NewKeyword"
                           Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the new keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.OpenBracketToken"
                           Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Commas"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Commas"
                           Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxList of SyntaxToken representing the commas in the implicit array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.CloseBracketToken"
                           Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializer"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax.Initializer"
                           Type="mcacss:ImplicitArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>InitializerExpressionSyntax representing the initializer expression of the implicit array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="StackAllocKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.StackAllocKeyword"
                           Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the stackalloc keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Type"
                           Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>TypeSyntax node representing the type of the stackalloc array.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializer"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax.Initializer"
                           Type="mcacss:StackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>InitializerExpressionSyntax node representing the initializer of the stackalloc array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="StackAllocKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.StackAllocKeyword"
                           Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the stackalloc keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.OpenBracketToken"
                           Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the open bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.CloseBracketToken"
                           Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the close bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Initializer"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax.Initializer"
                           Type="mcacss:ImplicitStackAllocArrayCreationExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>InitializerExpressionSyntax representing the initializer expression of the implicit stackalloc array creation expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="OmittedArraySizeExpressionToken"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax.OmittedArraySizeExpressionToken"
      Type="mcacss:OmittedArraySizeExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the omitted array size expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="StringStartToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringStartToken"
                           Type="mcacss:InterpolatedStringExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The first part of an interpolated string, $" or $@"</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Contents"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.Contents"
                           Type="mcacss:InterpolatedStringExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>List of parts of the interpolated string, each one is either a literal part or an interpolation.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="StringEndToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax.StringEndToken"
                           Type="mcacss:InterpolatedStringExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The closing quote of the interpolated string.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Expression"
                           Type="mcacss:IsPatternExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the expression on the left of the "is" operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Pattern"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax.Pattern"
                           Type="mcacss:IsPatternExpressionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>PatternSyntax node representing the pattern on the right of the "is" operator.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.OpenParenToken"
                           Type="mcacss:ArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.Arguments"
                           Type="mcacss:ArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax.CloseParenToken"
                           Type="mcacss:ArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close parenthesis.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.OpenBracketToken"
                           Type="mcacss:BracketedArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing open bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Arguments"
                           Type="mcacss:BracketedArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of ArgumentSyntax representing the list of arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.CloseBracketToken"
                           Type="mcacss:BracketedArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing close bracket.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax.Arguments"
                           Type="mcacss:BaseArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SeparatedSyntaxList of ArgumentSyntax nodes representing the list of arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NameColon"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.NameColon"
                           Type="mcacss:ArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>NameColonSyntax node representing the optional name arguments.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="RefKindKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefKindKeyword"
                           Type="mcacss:ArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the optional ref or out keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Expression"
                           Type="mcacss:ArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the argument.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="RefOrOutKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefOrOutKeyword"
                           Type="mcacss:ArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Pre C# 7.2 back-compat overload, which simply calls the replacement property </XmlDocText>
            <Crossref
              XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.RefKindKeyword">
              <Crossref.DocumentElementCollection>
                <XmlDocumentElementCollection />
              </Crossref.DocumentElementCollection>
            </Crossref>
            <XmlDocText xml:space="preserve">.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.Name"
                           Type="mcacss:NameColonSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>IdentifierNameSyntax representing the identifier name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax.ColonToken"
                           Type="mcacss:NameColonSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing colon.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NameEquals"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.NameEquals"
                           Type="mcacss:AnonymousObjectMemberDeclaratorSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>NameEqualsSyntax representing the optional name of the member being initialized.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax.Expression"
                           Type="mcacss:AnonymousObjectMemberDeclaratorSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax representing the value the member is initialized with.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax.Identifier"
                           Type="mcacss:FromClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax.Identifier"
                           Type="mcacss:LetClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax.Identifier"
                           Type="mcacss:JoinClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax.Identifier"
                           Type="mcacss:JoinIntoClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax.Identifier"
                           Type="mcacss:QueryContinuationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax.Expression"
                           Type="mcacss:ConstantPatternSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>ExpressionSyntax node representing the constant expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="TextToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax.TextToken"
                           Type="mcacss:InterpolatedStringTextSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The text contents of a part of the interpolated string.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="FormatStringToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax.FormatStringToken"
                           Type="mcacss:InterpolationFormatClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>The text contents of the format specifier for an interpolation.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.Identifier"
                           Type="mcacss:LocalFunctionStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax.SemicolonToken"
                           Type="mcacss:LocalFunctionStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Modifiers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Modifiers"
                           Type="mcacss:LocalDeclarationStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the modifier list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AllowsAnyExpression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.AllowsAnyExpression"
                           Type="mcacss:ExpressionStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Returns true if the </XmlDocText>
            <Crossref
              XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax.Expression">
              <Crossref.DocumentElementCollection>
                <XmlDocumentElementCollection />
              </Crossref.DocumentElementCollection>
            </Crossref>
            <XmlDocText xml:space="preserve"> property is allowed by the rules of the
            language to be an arbitrary expression, not just a statement expression.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
        <assembly:Null />
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.Identifier"
                           Type="mcacss:LabeledStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax.ColonToken"
                           Type="mcacss:LabeledStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets a SyntaxToken that represents the colon following the statement's label.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="GotoKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.GotoKeyword"
                           Type="mcacss:GotoStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the goto keyword.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="CaseOrDefaultKeyword"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.CaseOrDefaultKeyword"
      Type="mcacss:GotoStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the case or default keywords if any exists.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.Expression"
                           Type="mcacss:GotoStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a constant expression for a goto case statement.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax.SemicolonToken"
                           Type="mcacss:GotoStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the semi-colon at the end of the statement.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Identifier"
                           Type="mcacss:ForEachStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Variable"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax.Variable"
                           Type="mcacss:ForEachVariableStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            The variable(s) of the loop. In correct code this is a tuple
            literal, declaration expression with a tuple designator, or
            a discard syntax in the form of a simple identifier. In broken
            code it could be something else.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="IfKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.IfKeyword"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the if keyword.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.OpenParenToken"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open parenthesis before the if statement's condition expression.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Condition"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Condition"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax that represents the condition of the if statement.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.CloseParenToken"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the close parenthesis after the if statement's condition expression.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Statement"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Statement"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a StatementSyntax the represents the statement to be executed when the condition is true.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Else"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Else"
                           Type="mcacss:IfStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets an ElseClauseSyntax that represents the statement to be executed when the condition is false if such statement exists.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SwitchKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.SwitchKeyword"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the switch keyword.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenParenToken"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open parenthesis preceding the switch governing expression.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Expression"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax representing the expression of the switch statement.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseParenToken"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the close parenthesis following the switch governing expression.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.OpenBraceToken"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open braces preceding the switch sections.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Sections"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.Sections"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxList of SwitchSectionSyntax's that represents the switch sections of the switch statement.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax.CloseBraceToken"
                           Type="mcacss:SwitchStatementSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the open braces following the switch sections.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Identifier"
                           Type="mcacss:VariableDeclaratorSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ElseKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax.ElseKeyword"
                           Type="mcacss:ElseClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a syntax token
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Labels"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Labels"
                           Type="mcacss:SwitchSectionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxList of SwitchLabelSyntax's the represents the possible labels that control can transfer to within the section.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Statements"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax.Statements"
                           Type="mcacss:SwitchSectionSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxList of StatementSyntax's the represents the statements to be executed when control transfer to a label the belongs to the section.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Keyword"
                           Type="mcacss:CasePatternSwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the case keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Pattern"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax.Pattern"
                           Type="mcacss:CasePatternSwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a PatternSyntax that represents the pattern that gets matched for the case label.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Keyword"
                           Type="mcacss:CaseSwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the case keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Value"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax.Value"
                           Type="mcacss:CaseSwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets an ExpressionSyntax that represents the constant expression that gets matched for the case label.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax.Keyword"
                           Type="mcacss:DefaultSwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the default keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.Keyword"
                           Type="mcacss:SwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents a case or default keyword that belongs to a switch label.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax.ColonToken"
                           Type="mcacss:SwitchLabelSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Gets a SyntaxToken that represents the colon that terminates the switch label.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AttributeLists"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.AttributeLists"
                           Type="mcacss:CompilationUnitSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExternKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.ExternKeyword"
                           Type="mcacss:ExternAliasDirectiveSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the extern keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AliasKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.AliasKeyword"
                           Type="mcacss:ExternAliasDirectiveSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the alias keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.Identifier"
                           Type="mcacss:ExternAliasDirectiveSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax.SemicolonToken"
                           Type="mcacss:ExternAliasDirectiveSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.SemicolonToken"
                           Type="mcacss:NamespaceDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Keyword"
                           Type="mcacss:ClassDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the class keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax.Keyword"
                           Type="mcacss:StructDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the struct keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax.Keyword"
                           Type="mcacss:InterfaceDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the interface keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Keyword"
                           Type="mcacss:TypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type keyword token ("class", "struct", "interface").</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ConstraintClauses"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.ConstraintClauses"
                           Type="mcacss:TypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type constraint list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Members"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax.Members"
                           Type="mcacss:TypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the member declarations.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="EnumKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.EnumKeyword"
                           Type="mcacss:EnumDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the enum keyword token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Members"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.Members"
                           Type="mcacss:EnumDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the members declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax.SemicolonToken"
                           Type="mcacss:EnumDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.Identifier"
                           Type="mcacss:BaseTypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="BaseList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.BaseList"
                           Type="mcacss:BaseTypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the base type list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.OpenBraceToken"
                           Type="mcacss:BaseTypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open brace token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBraceToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.CloseBraceToken"
                           Type="mcacss:BaseTypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close brace token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax.SemicolonToken"
                           Type="mcacss:BaseTypeDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="DelegateKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.DelegateKeyword"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "delegate" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ReturnType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ReturnType"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the return type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.Identifier"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParameterList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ParameterList"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ConstraintClauses"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.ConstraintClauses"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the constraint clause list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax.SemicolonToken"
                           Type="mcacss:DelegateDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax.Identifier"
                           Type="mcacss:EnumMemberDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ReturnType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ReturnType"
                           Type="mcacss:MethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the return type syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Identifier"
                           Type="mcacss:MethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ConstraintClauses"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.ConstraintClauses"
                           Type="mcacss:MethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the constraint clause list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.SemicolonToken"
                           Type="mcacss:MethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ReturnType"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.ReturnType"
                           Type="mcacss:OperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the return type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorKeyword"
                           Type="mcacss:OperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "operator" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.OperatorToken"
                           Type="mcacss:OperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the operator token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax.SemicolonToken"
                           Type="mcacss:OperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="ImplicitOrExplicitKeyword"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.ImplicitOrExplicitKeyword"
      Type="mcacss:ConversionOperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "implicit" or "explicit" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.OperatorKeyword"
                           Type="mcacss:ConversionOperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "operator" token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.Type"
                           Type="mcacss:ConversionOperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax.SemicolonToken"
                           Type="mcacss:ConversionOperatorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.Identifier"
                           Type="mcacss:ConstructorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax.SemicolonToken"
                           Type="mcacss:ConstructorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="TildeToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.TildeToken"
                           Type="mcacss:DestructorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the tilde token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.Identifier"
                           Type="mcacss:DestructorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax.SemicolonToken"
                           Type="mcacss:DestructorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParameterList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.ParameterList"
                           Type="mcacss:BaseMethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax.SemicolonToken"
                           Type="mcacss:BaseMethodDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.Identifier"
                           Type="mcacss:PropertyDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax.Identifier"
                           Type="mcacss:EventDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParameterList"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax.ParameterList"
                           Type="mcacss:IndexerDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.Type"
                           Type="mcacss:BasePropertyDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="ExplicitInterfaceSpecifier"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax.ExplicitInterfaceSpecifier"
      Type="mcacss:BasePropertyDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional explicit interface specifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AttributeLists"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax.AttributeLists"
                           Type="mcacss:MemberDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Modifiers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax.Modifiers"
                           Type="mcacss:MemberDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the modifier list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.OpenBracketToken"
                           Type="mcacss:AttributeListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Target"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Target"
                           Type="mcacss:AttributeListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional construct targeted by the attribute.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Attributes"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.Attributes"
                           Type="mcacss:AttributeListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax.CloseBracketToken"
                           Type="mcacss:AttributeListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.Identifier"
                           Type="mcacss:AttributeTargetSpecifierSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax.ColonToken"
                           Type="mcacss:AttributeTargetSpecifierSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the colon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax.Name"
                           Type="mcacss:AttributeSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.OpenParenToken"
                           Type="mcacss:AttributeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Arguments"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.Arguments"
                           Type="mcacss:AttributeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the arguments syntax list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax.CloseParenToken"
                           Type="mcacss:AttributeArgumentListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Expression"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax.Expression"
                           Type="mcacss:AttributeArgumentSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the expression.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax.Name"
                           Type="mcacss:NameEqualsSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier name.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="LessThanToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.LessThanToken"
                           Type="mcacss:TypeParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the &lt; token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Parameters"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.Parameters"
                           Type="mcacss:TypeParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="GreaterThanToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax.GreaterThanToken"
                           Type="mcacss:TypeParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the &gt; token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AttributeLists"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.AttributeLists"
                           Type="mcacss:TypeParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax.Identifier"
                           Type="mcacss:TypeParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.ColonToken"
                           Type="mcacss:BaseListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the colon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Types"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax.Types"
                           Type="mcacss:BaseListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the base type references.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Name"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Name"
                           Type="mcacss:TypeParameterConstraintClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.ColonToken"
                           Type="mcacss:TypeParameterConstraintClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the colon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Constraints"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax.Constraints"
                           Type="mcacss:TypeParameterConstraintClauseSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the constraints list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="NewKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.NewKeyword"
                           Type="mcacss:ConstructorConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "new" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.OpenParenToken"
                           Type="mcacss:ConstructorConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open paren keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax.CloseParenToken"
                           Type="mcacss:ConstructorConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close paren keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation
      MemberName="ClassOrStructKeyword"
      ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.ClassOrStructKeyword"
      Type="mcacss:ClassOrStructConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the constraint keyword ("class" or "struct").</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="QuestionToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax.QuestionToken"
                           Type="mcacss:ClassOrStructConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>SyntaxToken representing the question mark.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Type"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax.Type"
                           Type="mcacss:TypeConstraintSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the type syntax.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ColonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ColonToken"
                           Type="mcacss:ConstructorInitializerSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the colon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ThisOrBaseKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax.ThisOrBaseKeyword"
                           Type="mcacss:ConstructorInitializerSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the "this" or "base" keyword.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AttributeLists"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.AttributeLists"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Modifiers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Modifiers"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the modifier list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Keyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Keyword"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the keyword token, or identifier if an erroneous accessor declaration.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Body"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.Body"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional body block which may be empty, but it is null if there are no braces.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ExpressionBody"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.ExpressionBody"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional expression body.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="SemicolonToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax.SemicolonToken"
                           Type="mcacss:AccessorDeclarationSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the optional semicolon token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.OpenParenToken"
                           Type="mcacss:ParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax.CloseParenToken"
                           Type="mcacss:ParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.OpenBracketToken"
                           Type="mcacss:BracketedParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax.CloseBracketToken"
                           Type="mcacss:BracketedParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Parameters"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax.Parameters"
                           Type="mcacss:BaseParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="AttributeLists"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.AttributeLists"
                           Type="mcacss:ParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the attribute declaration list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Modifiers"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Modifiers"
                           Type="mcacss:ParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the modifier list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Identifier"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax.Identifier"
                           Type="mcacss:ParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the identifier.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OperatorToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax.OperatorToken"
                           Type="mcacss:OperatorMemberCrefSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the operator token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.OpenParenToken"
                           Type="mcacss:CrefParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseParenToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax.CloseParenToken"
                           Type="mcacss:CrefParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close paren token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="OpenBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.OpenBracketToken"
                           Type="mcacss:CrefBracketedParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the open bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="CloseBracketToken"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax.CloseBracketToken"
                           Type="mcacss:CrefBracketedParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the close bracket token.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="Parameters"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax.Parameters"
                           Type="mcacss:BaseCrefParameterListSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText>Gets the parameter list.</XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="RefOrOutKeyword"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.RefOrOutKeyword"
                           Type="mcacss:CrefParameterSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Pre C# 7.2 back-compat overload, which simply calls the replacement property </XmlDocText>
            <Crossref
              XRefId="P:Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax.RefKindKeyword">
              <Crossref.DocumentElementCollection>
                <XmlDocumentElementCollection />
              </Crossref.DocumentElementCollection>
            </Crossref>
            <XmlDocText xml:space="preserve">.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
    <PropertyDocumentation MemberName="ParentTrivia"
                           ElementId="P:Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax.ParentTrivia"
                           Type="mcacss:StructuredTriviaSyntax">
      <PropertyDocumentation.XmlDoc>
        <Summary>
          <Summary.DocumentElementCollection>
            <XmlDocText xml:space="preserve">
            Get parent trivia.
            </XmlDocText>
          </Summary.DocumentElementCollection>
        </Summary>
      </PropertyDocumentation.XmlDoc>
    </PropertyDocumentation>
  </TypesViewModel.DocumentCollection>
</TypesViewModel>