
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
  <SolidColorBrush x:Key="í" Color="#B8FFFFFF"/>
  <SolidColorBrush x:Key="Ë" Color="#FF9E9E9E"/>
  <SolidColorBrush x:Key="Ò" Color="#FFE5EFF9"/>
  <DrawingBrush x:Key="Ĩ" Viewbox="0,0,3,3" Viewport="0,0,3,3" TileMode="Tile" ViewportUnits="Absolute"
                ViewboxUnits="Absolute">
    <DrawingBrush.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Brush="{StaticResource ħ}" Geometry="M 0,0 L 2,0 2,2 0,2 Z"/>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingBrush.Drawing>
  </DrawingBrush>
  <ControlTemplate x:Key="Ħ" TargetType="{x:Type RibbonToggleButton}">
    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
      <Border x:Name="OuterBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="{TemplateBinding Control.Background}"
              BorderBrush="{TemplateBinding Control.BorderBrush}"
              BorderThickness="{TemplateBinding Control.BorderThickness}"/>
      <Border x:Name="MiddleBorder"
              CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}"
              Background="Transparent" BorderBrush="Transparent"
              BorderThickness="{TemplateBinding Control.BorderThickness}">
        <Border x:Name="InnerBorder" Background="Transparent" BorderBrush="Transparent"
                BorderThickness="{TemplateBinding Control.BorderThickness}"
                Padding="{TemplateBinding Control.Padding}"
                CornerRadius="{TemplateBinding RibbonToggleButton.CornerRadius}">
          <StackPanel x:Name="StackPanel"
                      HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
            <Image x:Name="PART_Image" Source="{TemplateBinding RibbonToggleButton.LargeImageSource}"
                   Width="32" Height="32" RenderOptions.BitmapScalingMode="NearestNeighbor" VerticalAlignment="Center"
                   HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type Ribbon}, ResourceId=LargeImageMargin}}"/>
            <Grid x:Name="Grid" VerticalAlignment="Center" HorizontalAlignment="Center">
              <RibbonTwoLineText x:Name="TwoLineText" Text="{TemplateBinding RibbonToggleButton.Label}"
                                        TextAlignment="Center" VerticalAlignment="Top" HorizontalAlignment="Center" LineHeight="13px"
                                        LineStackingStrategy="BlockLineHeight"
                                        HasTwoLines="{TemplateBinding RibbonTwoLineText.HasTwoLines}"
                                        PathData="{TemplateBinding RibbonTwoLineText.PathData}"
                                        PathFill="{TemplateBinding Control.Foreground}" Margin="1,1,1,0"/>
            </Grid>
          </StackPanel>
        </Border>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Value="Large"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Property="FrameworkElement.MinWidth" Value="44"/>
        <Setter Property="FrameworkElement.Height" Value="66"/>
        <Setter TargetName="Grid" Property="FrameworkElement.MinHeight" Value="26"/>
        <Setter TargetName="TwoLineText" Property="RibbonTwoLineText.HasTwoLines" Value="true"/>
      </DataTrigger>
      <DataTrigger Value="Small"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter Value="{StaticResource Ć}" Property="FrameworkElement.Height"/>
        <Setter TargetName="PART_Image" Property="FrameworkElement.Margin" Value="1,0,1,0"/>
        <Setter TargetName="PART_Image"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"
                        Property="Image.Source"/>
        <Setter TargetName="PART_Image" Property="FrameworkElement.Width" Value="16"/>
        <Setter TargetName="PART_Image" Property="FrameworkElement.Height" Value="16"/>
        <Setter TargetName="TwoLineText" Property="FrameworkElement.HorizontalAlignment" Value="Left"/>
        <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="1"/>
        <Setter TargetName="StackPanel" Property="StackPanel.Orientation" Value="Horizontal"/>
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
                             Value="Small"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter Property="FrameworkElement.Height" Value="Auto"/>
      </MultiDataTrigger>
      <DataTrigger Value="False"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}">
        <Setter TargetName="TwoLineText" Value="{x:Null}" Property="RibbonTwoLineText.Text"/>
        <Setter TargetName="TwoLineText" Property="FrameworkElement.Margin" Value="0"/>
      </DataTrigger>
      <DataTrigger Value="Collapsed"
                           Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}">
        <Setter TargetName="PART_Image" Property="UIElement.Visibility" Value="Collapsed"/>
      </DataTrigger>
      <Trigger Property="UIElement.IsMouseOver" Value="true">
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Value="{StaticResource ë}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="PART_Image" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="MainGrid" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText" Value="{StaticResource Ë}"
                        Property="RibbonTwoLineText.PathFill"/>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Value="{StaticResource Ă}" Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="true">
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True"/>
          <Condition Property="UIElement.IsMouseOver" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True"/>
          <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ButtonBase.IsPressed" Value="true"/>
          <Condition Property="UIElement.IsKeyboardFocused" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="MiddleBorder" Value="{StaticResource ď}" Property="Border.Background"/>
      </MultiTrigger>
      <Trigger Property="RibbonToggleButton.IsInControlGroup" Value="true">
        <Setter TargetName="OuterBorder"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="OuterBorder" Property="Border.BorderThickness" Value="0,0,1,0"/>
        <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
        <Setter TargetName="InnerBorder" Property="Border.CornerRadius" Value="0"/>
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
        <Setter TargetName="OuterBorder" Property="Border.CornerRadius" Value="0"/>
        <Setter TargetName="OuterBorder" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}"
                             Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="False"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="InnerBorder" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="MiddleBorder" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="OuterBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="MainGrid"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="TwoLineText"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="RibbonTwoLineText.PathFill"/>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Color x:Key="Ö">#71000000</Color>
  <Style x:Key="Ó" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Width" Value="11"/>
    <Setter Property="FrameworkElement.Height" Value="11"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Right"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeNWSE"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="0,0,2,2" Data="M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z"
                  Fill="{StaticResource Ĩ}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="FrameworkElement.FlowDirection" Value="RightToLeft">
        <Setter Property="FrameworkElement.Cursor" Value="SizeNESW"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="Ô" TargetType="{x:Type Thumb}">
    <Setter Property="FrameworkElement.Height" Value="11"/>
    <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Background="Transparent">
            <Path Margin="0,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Bottom"
                  Fill="{StaticResource Ĩ}">
              <Path.Data>
                <RectangleGeometry Rect="0,0,11,3"/>
              </Path.Data>
            </Path>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Geometry x:Key="ï">
    M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z
  </Geometry>
  <Geometry x:Key="ð">
    M 0,0 L 4,3.5 L 0,7 Z
  </Geometry>
  <SolidColorBrush x:Key="ë" Color="#80FFFFFF"/>
  <Geometry x:Key="ñ">
    M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z
  </Geometry>

  <BooleanToVisibilityConverter x:Key="à"/>
  <ControlTemplate x:Key="î" TargetType="{x:Type RibbonApplicationMenuItem}">
    <Border x:Name="Border" Background="{TemplateBinding Control.Background}"
            BorderThickness="{TemplateBinding Control.BorderThickness}"
            BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="2"
            SnapsToDevicePixels="true">
      <Grid Margin="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
          <ColumnDefinition Width="*" MinWidth="44"/>
          <ColumnDefinition Width="22"/>
        </Grid.ColumnDefinitions>
        <Image x:Name="Image" Margin="6,4,6,4" Width="32" Height="32"
               Source="{TemplateBinding RibbonMenuItem.ImageSource}" VerticalAlignment="Center"
               HorizontalAlignment="Center" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding RibbonMenuItem.CheckedBackground}"
                BorderBrush="{TemplateBinding RibbonMenuItem.CheckedBorderBrush}"
                BorderThickness="1" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Center"
                Margin="1" Width="30" Height="30" CornerRadius="2">
          <Path x:Name="CheckMark" Margin="4,0,6,0" Visibility="Hidden" VerticalAlignment="Center"
                HorizontalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"
                FlowDirection="LeftToRight" Data="{StaticResource ï}">
            <UIElement.RenderTransform>
              <ScaleTransform ScaleX="1.5" ScaleY="1.5"/>
            </UIElement.RenderTransform>
          </Path>
        </Border>
        <ContentPresenter Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Left"
                          Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"/>
        <Path x:Name="Arrow" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center"
              Fill="{TemplateBinding Control.Foreground}" Data="{StaticResource ð}"
              Visibility="{TemplateBinding HasItems, Converter={StaticResource à}}"/>
        <Popup x:Name="PART_Popup" AllowsTransparency="true"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative" Focusable="false" SnapsToDevicePixels="true"
               IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
          <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" KeyTipService.IsKeyTipScope="true"
                                          RenderOptions.ClearTypeHint="Enabled">
            <Grid>
              <Border x:Name="PopupBorder" BorderThickness="{TemplateBinding Control.BorderThickness}"
                      CornerRadius="2"
                      BorderBrush="{Binding Path=Ribbon.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"
                      Background="{Binding Path=Ribbon.Background, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Border x:Name="PopupOverlayBorder" BorderBrush="{StaticResource ë}"
                      Background="{StaticResource í}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <ScrollViewer x:Name="PART_SubMenuScrollViewer" CanContentScroll="true" HorizontalScrollBarVisibility="Disabled"
                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                    <Grid RenderOptions.ClearTypeHint="Enabled">
                      <Canvas x:Name="BackgroundCanvas" Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Rectangle x:Name="OpaqueRect" RadiusX="2" RadiusY="2"
                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=PopupBorder, Path=Background}"/>
                        <Rectangle x:Name="OverlayRect" RadiusX="2" RadiusY="2"
                                   Height="{Binding ElementName=PopupBorder, Path=ActualHeight}"
                                   Width="{Binding ElementName=PopupBorder, Path=ActualWidth}"
                                   Fill="{Binding ElementName=PopupOverlayBorder, Path=Background}"/>
                      </Canvas>
                      <ItemsPresenter x:Name="ItemsPresenter" Margin="2" KeyboardNavigation.TabNavigation="Cycle"
                                      KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true"/>
                    </Grid>
                  </ScrollViewer>
                  <Border Name="ResizeControl" Grid.Row="1" Visibility="Collapsed" Background="{StaticResource Ò}"
                          BorderThickness="0,1,0,0"
                          BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                    <Thumb x:Name="PART_ResizeThumb" Style="{StaticResource Ó}"/>
                  </Border>
                </Grid>
              </Border>
            </Grid>
          </classic:SystemDropShadowChrome>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger SourceName="PART_SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
        <Setter TargetName="OpaqueRect" Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}"
                        Property="Canvas.Top"/>
        <Setter TargetName="OpaqueRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
        <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" Property="Canvas.Top"/>
        <Setter TargetName="OverlayRect"
                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}"
                        Property="Canvas.Left"/>
      </Trigger>
      <Trigger Property="RibbonMenuItem.HasGallery" Value="true">
        <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.HorizontalScrollBarVisibility"
                        Value="Disabled"/>
        <Setter TargetName="PART_SubMenuScrollViewer" Property="ScrollViewer.VerticalScrollBarVisibility"
                        Value="Disabled"/>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="true"/>
          <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="RibbonMenuItem.CanUserResizeHorizontally" Value="false"/>
          <Condition Property="RibbonMenuItem.CanUserResizeVertically" Value="true"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="ResizeControl" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="PART_ResizeThumb" Value="{StaticResource Ô}"
                        Property="FrameworkElement.Style"/>
      </MultiTrigger>
      <Trigger Value="{x:Null}" Property="RibbonMenuItem.ImageSource">
        <Setter TargetName="Image" Property="UIElement.Visibility" Value="Collapsed"/>
      </Trigger>
      <Trigger Property="MenuItem.IsCheckable" Value="true">
        <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger Property="MenuItem.IsChecked" Value="true">
        <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="CheckMarkBorder" Property="UIElement.Visibility" Value="Visible"/>
        <Setter TargetName="Image" Property="UIElement.Visibility" Value="Hidden"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
        <Setter TargetName="Shadow" Property="FrameworkElement.Margin" Value="0,0,5,5"/>
        <Setter TargetName="Shadow" Value="{StaticResource Ö}"
                        Property="classic:SystemDropShadowChrome.Color"/>
      </Trigger>
      <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="false">
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="MenuItem.IsHighlighted" Value="true">
        <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}"
                        Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="MenuItem.IsPressed" Value="true">
        <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}"
                        Property="Border.Background"/>
        <Setter TargetName="Border"
                        Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"
                        Property="Border.BorderBrush"/>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="false">
        <Setter TargetName="Image" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="CheckMarkBorder" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="Arrow" Property="UIElement.Opacity" Value="0.5"/>
        <Setter TargetName="Border" Value="{StaticResource Ë}" Property="TextElement.Foreground"/>
      </Trigger>
      <DataTrigger Value="True" Binding="{Binding Path=(SystemParameters.HighContrast)}">
        <Setter TargetName="BackgroundCanvas" Property="UIElement.Visibility" Value="Collapsed"/>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
        <Setter TargetName="Border" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="Border" Property="Border.BorderBrush" Value="Transparent"/>
        <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
        <Setter TargetName="CheckMark"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                        Property="Shape.Fill"/>
        <Setter TargetName="CheckMark" Value="{StaticResource ñ}" Property="Path.Data"/>
        <Setter TargetName="CheckMarkBorder" Property="Border.CornerRadius" Value="0"/>
        <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="CheckMarkBorder"
                        Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="Shadow" Property="classic:SystemDropShadowChrome.Color" Value="Transparent"/>
        <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
        <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="PopupBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="PopupOverlayBorder" Property="Border.Background" Value="Transparent"/>
        <Setter TargetName="PopupOverlayBorder"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="ResizeControl"
                        Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                        Property="Border.Background"/>
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
        <Setter TargetName="Arrow"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Shape.Fill"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="TextElement.Foreground"/>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                        Property="Border.Background"/>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                        Property="Border.BorderBrush"/>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
          <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="Border"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                        Property="TextElement.Foreground"/>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>
