using System ;
using System.Collections ;
using System.Collections.ObjectModel ;
using System.Windows ;
using System.Windows.Controls ;
using System.Windows.Input ;
using System.Windows.Navigation ;
using KayMcCormick.Lib.Wpf ;
using NLog ;
using WpfApp.Application ;
using WpfApp.Controls ;

namespace WpfApp
{
    /// <summary>
    ///     Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // ReSharper disable once InconsistentNaming
        // ReSharper disable once FieldCanBeMadeReadOnly.Local
        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private static Logger Logger = LogManager.GetCurrentClassLogger ( ) ;

        /// <summary>Initializes a new instance of the <see cref="MainWindow" /> class.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MainWindow ( )
        {
            InitializeComponent ( ) ;

            // SetValue (
            // AppShared.Props.LifetimeScopeProperty
            // , ( Application.Current as App )?.LifetimeScope
            // ) ;
            try
            {
                if ( TryFindResource ( "ResolveServices" ) is ResolveServiceList resolveServiceList
                )
                {
                    foreach ( var resolveService in resolveServiceList )
                    {
                        var valueSource = DependencyPropertyHelper.GetValueSource (
                                                                                   resolveService
                                                                                 , AttachedProperties
                                                                                      .LifetimeScopeProperty
                                                                                  ) ;
                        var lifetimeScope = AttachedProperties.GetLifetimeScope ( resolveService ) ;
                        Logger.Warn (
                                     $"{resolveService.ServiceType} {lifetimeScope} {valueSource}"
                                    ) ;
                    }
                }
            }
            catch ( Exception )
            {
                // ignored
            }


        }

        public ObservableCollection < ResourceNodeInfo > AllResources { get ; } =
            new ObservableCollection < ResourceNodeInfo > ( ) ;


        /// <summary>Gets the type frame.</summary>
        /// <value>The type frame.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for TypeFrame
        // ReSharper disable once UnusedMember.Global
        // public object TypeFrame => frame ;

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void Frame_OnNavigationFailed ( object sender , NavigationFailedEventArgs e )
        {
            var msg = $"{e.Exception.Message}; {e.ExtraData}" ;
            Logger.Error ( $"Nav failed: {msg}" ) ;
        }

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void Frame_OnNavigating ( object sender , NavigatingCancelEventArgs e )
        {
            Logger.Info ( e.ContentStateToSave ) ;
        }

        // ReSharper disable once InternalOrPrivateMemberNotDocumented
        private void VisitType ( object sender , ExecutedRoutedEventArgs e )
        {
            var eParameter = e.Parameter as Type ;
            if ( eParameter != null )
            {
                var typeControl2 = new TypeControl2 ( ) ;
                typeControl2.SetValue ( Props.RenderedTypeProperty , eParameter ) ;
                var findName = FindName ( "frame" ) as Frame ;
                findName?.Navigate ( typeControl2 ) ;
            }
        }


        private void Registrations_Loaded ( object sender , RoutedEventArgs e ) { }

        private void MainWindow_OnLoaded ( object sender , RoutedEventArgs e )
        {
            PopulateResourcesTree ( ) ;
        }

        private void PopulateResourcesTree ( )
        {
            try
            {
                var current = ( App ) System.Windows.Application.Current ;
                var appNode = new ResourceNodeInfo { Key = "Application" , Data = current } ;
                var appResources = new ResourceNodeInfo
                                   {
                                       Key = "Resources" , Data = current.Resources
                                   } ;
                appNode.Children.Add ( appResources ) ;
                AddResourceNodeInfos(appResources);
                AllResources.Add(appNode);

                foreach ( Window w in current.Windows )
                {
                    var winNode = new ResourceNodeInfo { Key = w.GetType ( ) , Data = new ControlWrap<Window>(w) } ;
                    appNode.Children.Add ( winNode ) ;
                    var winRes = new ResourceNodeInfo { Key = "Resources" , Data = w.Resources } ;
                    winNode.Children.Add ( winRes ) ;
                    AddResourceNodeInfos(winRes);
                }
            }
            catch ( Exception ex )
            {
            }
        }

        private void AddResourceNodeInfos ( ResourceNodeInfo appResources )
        {
            var res = ( ResourceDictionary ) appResources.Data ;
            appResources.SourceUri = res.Source ;

            foreach ( var md in res.MergedDictionaries )
            {
                var mdr = new ResourceNodeInfo { Key = md.Source , Data = md } ;
                AddResourceNodeInfos ( mdr ) ;
                appResources.Children.Add ( mdr ) ;
            }

            foreach ( DictionaryEntry haveResourcesResource in res )
            {
                if ( haveResourcesResource.Key      != null
                     && haveResourcesResource.Value != null )
                {   
                    var resourceInfo = new ResourceNodeInfo
                                       {
                                           Key  = haveResourcesResource.Key
                                         , Data = haveResourcesResource.Value
                                       } ;
                    appResources.Children.Add ( resourceInfo ) ;
                }
            }
        }
    }

    internal class ControlWrap<T> where T : FrameworkElement
    {
        public T Control { get ; }
        public ControlWrap ( T c ) { Control = c ; }
    }
}