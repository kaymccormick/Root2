using System ;
using System.Windows ;
using System.Windows.Markup ;
using System.Xaml ;
using Autofac ;
using NLog ;

namespace KayMcCormick.Lib.Wpf
{
    /// <summary></summary>
    /// <seealso cref="System.Windows.Markup.MarkupExtension" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for LifetimeScopeExtension
    [ MarkupExtensionReturnType ( typeof ( ILifetimeScope ) ) ]
    // ReSharper disable once UnusedType.Global
    public class LifetimeScopeExtension : MarkupExtension
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger ( ) ;


        /// <summary>
        ///     Initializes a new instance of the
        ///     <see cref="LifetimeScopeExtension" /> class.
        /// </summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public LifetimeScopeExtension ( ) { Logger.Info ( nameof ( LifetimeScopeExtension ) ) ; }

        /// <summary>
        ///     When implemented in a derived class, returns an object that is
        ///     provided as the value of the target property for this markup extension.
        /// </summary>
        /// <param name="serviceProvider">
        ///     A service provider helper that can provide
        ///     services for the markup extension.
        /// </param>
        /// <returns>
        ///     The object value to set on the property where the extension is
        ///     applied.
        /// </returns>
        public override object ProvideValue ( IServiceProvider serviceProvider )
        {
            if ( serviceProvider == null )
            {
                throw new ArgumentNullException ( nameof ( serviceProvider ) ) ;
            }


            // ReSharper disable once UnusedVariable
            var p = ( IAmbientProvider ) serviceProvider.GetService (
                                                                     typeof ( IAmbientProvider )
                                                                    ) ;
            ILifetimeScope scope = null ;
            var service = serviceProvider.GetService ( typeof ( IProvideValueTarget ) ) ;
            if ( service != null )
            {
                var pp = ( IProvideValueTarget ) service ;

                var o = pp.TargetObject ;
                if ( o is DependencyObject d )
                {
                    scope = ( ILifetimeScope ) d.GetValue (
                                                           AttachedProperties.LifetimeScopeProperty
                                                          ) ;
                }
            }

            if ( scope != null )
            {
                return scope ;
            }

            {
                var svc = serviceProvider.GetService ( typeof ( IRootObjectProvider ) ) ;
                if ( svc == null )
                {
                    return ( ILifetimeScope ) null ;
                }

                var rootP = ( IRootObjectProvider ) svc ;
                if ( rootP.RootObject is DependencyObject d )
                {
                    scope = ( ILifetimeScope ) d.GetValue (
                                                           AttachedProperties
                                                              .LifetimeScopeProperty
                                                          ) ;
                }
            }

            return scope ;
        }
    }
}