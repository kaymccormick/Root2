<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AnalysisAppLib</name>
    </assembly>
    <members>
        <member name="T:AnalysisAppLib.ActivationInfo">
            <summary>
            Activation informatio 
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.CreatedDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.ManagedThreadId">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.InstanceType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ActivationInfo.Context">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AnalysisAppLibModule">
            <summary>
                Autofac module for the base Analysis App Lib.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AnalysisAppLibModule.#ctor">
            <summary>
                Parameter-less constructor.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalysisAppLibModule.RegisterExplorerTypes">
            <summary>
                Boolean indicating whether or not to register the "File explorer" types.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AnalysisAppLibModule.AttachToComponentRegistration(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
            </summary>
            <param name="componentRegistry"></param>
            <param name="registration"></param>
        </member>
        <member name="M:AnalysisAppLib.AnalysisAppLibModule.DoLoad(Autofac.ContainerBuilder)">
            <summary>
            </summary>
            <param name="builder"></param>
        </member>
        <member name="P:AnalysisAppLib.AnalysisAppLibModule.RegisterConcreteBlockProviders">
            <summary>
            
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:AnalysisAppLib.AnalysisIntermediate">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalysisIntermediate.Workspace">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AnalysisRequest">
            <summary>
            A request to the analysis service.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalysisRequest.Info">
            <summary>
            Related <see cref="T:AnalysisAppLib.Project.IProjectBrowserNode"/>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AnalysisService">
            <summary>
            Generic analysis service.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.CreateCompilation(System.String,Microsoft.CodeAnalysis.SyntaxTree,System.Boolean)">
            <summary>
            Create a compilation.
            </summary>
            <param name="assemblyName"></param>
            <param name="syntaxTree"></param>
            <param name="extraRefs"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.CreateFromCompilation(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.CSharp.CSharpCompilation)">
            <summary>
            Create a context from a compilation.
            </summary>
            <param name="syntaxTree"></param>
            <param name="compilation"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.CreateFromCompilationAsync(Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.CSharp.CSharpCompilation)">
            <summary>
            
            </summary>
            <param name="syntaxTree"></param>
            <param name="compilation"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.Parse(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a context from code to parse.
            </summary>
            <param name="code"></param>
            <param name="assemblyName"></param>
            <param name="extraRefs"></param>
            <param name="filename"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.Load(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="assemblyName"></param>
            <param name="extraRefs"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.AnalysisService.LoadAsync(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="s"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.AnalyzeCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AnalyzeCommand.#ctor(System.Lazy{AnalysisAppLib.Pipeline},KayMcCormick.Dev.IAddRuntimeResource)">
            <summary>
            Constructor. Takes pipeline instance.
            </summary>
            <param name="pipeline"></param>
            <param name="add"></param>
        </member>
        <member name="M:AnalysisAppLib.AnalyzeCommand.AnalyzeCommandAsync(AnalysisAppLib.Project.IProjectBrowserNode,System.Threading.Tasks.Dataflow.ITargetBlock{FindLogUsages.RejectedItem})">
            <summary>
            Async analyze routine.
            </summary>
            <param name="projectNode"></param>
            <param name="rejectTarget"></param>
            <returns></returns>
            <exception cref="T:AnalysisAppLib.AnalyzeException"></exception>
        </member>
        <member name="P:AnalysisAppLib.AnalyzeCommand.LogInvocations">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalyzeCommand.RejectDestination">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalyzeCommand.Pipeline">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AnalyzeCommandWrap">
            <summary>
            Generic analyze command.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AnalyzeCommandWrap.#ctor(AnalysisAppLib.AnalyzeCommand,AnalysisAppLib.Project.IProjectBrowserNode)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="projectNode"></param>
        </member>
        <member name="P:AnalysisAppLib.AnalyzeCommandWrap.Argument">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.AnalyzeCommandWrap.ExecuteAsync">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.AnalyzeCommandWrap.OnFault(System.AggregateException)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.AppContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AppContext.#ctor(Autofac.ILifetimeScope,AnalysisAppLib.Project.IProjectBrowserViewModel,AnalysisAppLib.AppDbContextHelper)">
            <summary>
            
            </summary>
            <param name="scope"></param>
            <param name="projectBrowserViewModel"></param>
            <param name="helper"></param>
        </member>
        <member name="P:AnalysisAppLib.AppContext.Scope">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AppContext.BrowserViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AppDbContextHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AppDbContextHelper.FindOrAddClrType(AnalysisAppLib.IAppDbContext1,System.Type)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.AppDbContextHelper.AddClrType(AnalysisAppLib.IAppDbContext1,System.Type)">
            <summary>
            
            </summary>
            <param name="db"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.AppTypeInfoTypeConverter">
            <summary>
            Prototypical Type converter for <see cref="T:AnalysisAppLib.Syntax.AppTypeInfo"/>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.AppTypeInfoTypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.AppTypeInfoTypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.AppTypeInfoTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.AppTypeInfoTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.CallerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CallerInfo.CalledSymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CallerInfo.CallingSymbol">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CallerInfo.IsDirect">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CallerInfo.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{AnalysisAppLib.LocationInfo})">
            <summary>
            
            </summary>
            <param name="calledSymbol"></param>
            <param name="callingSymbol"></param>
            <param name="isDirect"></param>
            <param name="select"></param>
        </member>
        <member name="P:AnalysisAppLib.CallerInfo.Locations">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Category.LogUsage">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Category.Infrastructure">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Category.Management">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Category.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.CategoryMetadataAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CategoryMetadataAttribute.#ctor(AnalysisAppLib.Category)">
            <summary>
            
            </summary>
            <param name="logUsage"></param>
        </member>
        <member name="P:AnalysisAppLib.CategoryMetadataAttribute.Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.GroupMetadataAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.GroupMetadataAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:AnalysisAppLib.GroupMetadataAttribute.Group">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.CommandInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CommandInfo.Metadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CommandInfo.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CommandInfo.TheCommand">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CommandInfo.Command">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.CommandInfo.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CommandInfo.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:AnalysisAppLib.CommandInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.CustomModifierInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CustomModifierInfo.IsOptional">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CustomModifierInfo.DisplayString">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CustomModifierInfo.#ctor(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="isOptional"></param>
            <param name="displayString"></param>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.IHaveRejectBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.IHaveRejectBlock.GetRejectBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.Example1TransformFuncProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.Example1TransformFuncProvider.#ctor(System.Func{AnalysisAppLib.Dataflow.Example1Out})">
            <summary>
            
            </summary>
            <param name="invocationFactory"></param>
        </member>
        <member name="P:AnalysisAppLib.Dataflow.Example1TransformFuncProvider.RejectBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.Example1TransformFuncProvider.GetRejectBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.Example1TransformFuncProvider.GetAsyncTransformFunction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.Example1Out">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Dataflow.Example1Out.Symbol">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.AnalysisBlockProvider`3">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <typeparam name="TBlock"></typeparam>
            unused
        </member>
        <member name="M:AnalysisAppLib.Dataflow.AnalysisBlockProvider`3.GetDataflowBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.AnalysisBlockProvider`3.GetDataflowBlockObj">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Dataflow.BlockFactory`3">
            <summary>
            
            </summary>
            <param name="transform"></param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <typeparam name="TBlock"></typeparam>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.ConcreteAnalysisBlockProvider`3">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <typeparam name="TBlock"></typeparam>
            Unused right now
        </member>
        <member name="M:AnalysisAppLib.Dataflow.ConcreteAnalysisBlockProvider`3.#ctor(AnalysisAppLib.Dataflow.BlockFactory{`0,`1,`2},AnalysisAppLib.Dataflow.IDataflowTransformFuncProvider{`0,`1})">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="funcProvider"></param>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.ConcreteAnalysisBlockProvider`3.GetDataflowBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.ConcreteAnalysisBlockProvider`3.GetDataflowBlockObj">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Dataflow.DataflowTransformFuncProvider`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.DataflowTransformFuncProvider`2.GetAsyncTransformFunction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.FindLogUsagesFuncProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.FindLogUsagesFuncProvider.#ctor(System.Func{FindLogUsages.ILogInvocation},System.Collections.Generic.IEnumerable{System.Action{FindLogUsages.ILogInvocation}})">
            <summary>
            
            </summary>
            <param name="invocationFactory"></param>
            <param name="invocActions"></param>
        </member>
        <member name="P:AnalysisAppLib.Dataflow.FindLogUsagesFuncProvider.RejectBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.FindLogUsagesFuncProvider.GetRejectBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.FindLogUsagesFuncProvider.GetAsyncTransformFunction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.IAnalysisBlockProvider`3">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <typeparam name="TBlock"></typeparam>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.IAnalysisBlockProvider`3.GetDataflowBlock">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.IAnalysisBlockProvider1">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.IAnalysisBlockProvider1.GetDataflowBlockObj">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.IDataflowTransformFuncProvider`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.IDataflowTransformFuncProvider`2.GetAsyncTransformFunction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.TransformFunc`2">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.TransformManyFunc`2">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:AnalysisAppLib.Dataflow.ConcreteDataflowTransformFuncProvider`2">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.ConcreteDataflowTransformFuncProvider`2.#ctor(AnalysisAppLib.Dataflow.TransformFunc{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
            <summary>
            
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:AnalysisAppLib.Dataflow.ConcreteDataflowTransformFuncProvider`2.GetAsyncTransformFunction">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ExampleDict">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ExampleSyntax">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ExampleTokens">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ExampleTokens.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.ExampleTokens.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.FindLogUsagesAnalysisDefinition">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.FindLogUsagesAnalysisDefinition.DataflowOutputType">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.IAnalysisDefinition`1">
            <summary>
            </summary>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="P:AnalysisAppLib.IAnalysisDefinition`1.DataflowOutputType">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.IAppDbContext1">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IAppDbContext1.AppTypeInfos">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IAppDbContext1.AppClrType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IAppDbContext1.Projects">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IAppDbContext1.SyntaxFieldInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IAppDbContext1.LogInvocation">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.IAppDbContext1.SaveChanges">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.IAppDbContext1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ICodeElementDocumentation">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICodeElementDocumentation.ElementId">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICodeElementDocumentation.Type">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICodeElementDocumentation.NeedsAttention">
            <summary>
            Flag indicating that this documentation element needs attention.
            </summary>
        </member>
        <member name="T:AnalysisAppLib.BaseInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Info1">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Info1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info1.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info1.Infos">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info1.Ungrouped">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Info2">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info2.Group">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info2.Infos">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info2.Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Info3">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info3.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Info3.Group">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.LConf`1">
            <summary>
            
            </summary>kay@satoridev@onmicrosoft.com
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AnalysisAppLib.DocInterface">
            <summary>
            Implementation of <see cref="T:AnalysisAppLib.IDocInterface"/>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.DocInterface.GetTypeDocumentation(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.DocInterface.CollectDoc(AnalysisAppLib.ICodeElementDocumentation)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.DocInterface.DocumentCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.DocumentCollection">
            <summary>
            Collection of documents for XAML serialization purposes.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.#ctor(System.Collections.IList)">
            <summary>
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.Count">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.SyncRoot">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.IsSynchronized">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.Add(System.Object)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.Contains(System.Object)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.IndexOf(System.Object)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.Insert(System.Int32,System.Object)">
            <summary>
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.Remove(System.Object)">
            <summary>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.DocumentCollection.RemoveAt(System.Int32)">
            <summary>
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.Item(System.Int32)">
            <summary>
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.DocumentCollection.IsFixedSize">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Explorer.AppExplorerItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Link">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.IsDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.HasChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.AppExplorerItem.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.AppExplorerItem.Push(System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="path"></param>
        </member>
        <member name="M:AnalysisAppLib.Explorer.AppExplorerItem.Pull(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AnalysisAppLib.Explorer.AppExplorerItem.CreateFolder(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:AnalysisAppLib.Explorer.FileSystemAppExplorerItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="inputPath"></param>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.IsHidden">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.GetCanOpen">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Push(System.IO.Stream,System.String)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="path"></param>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Pull(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.CreateFolder(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Link">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.Date">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.IsDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.HasChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemAppExplorerItem.IconsResources">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Explorer.FileSystemExplorerItemProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemExplorerItemProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Explorer.FileSystemExplorerItemProvider.DefaultInputPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.FileSystemExplorerItemProvider.GetRootItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Explorer.IExplorerItemProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Explorer.IExplorerItemProvider.GetRootItems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.IDocInterface">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.IDocInterface.GetTypeDocumentation(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.IDocInterface.CollectDoc(AnalysisAppLib.ICodeElementDocumentation)">
            <summary>
            
            </summary>
            <param name="methodDocumentation"></param>
        </member>
        <member name="T:AnalysisAppLib.IEventMisc">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.ThreadId">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.Obj">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.RawJson">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.File">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc.PropKeys">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.IEventMisc2`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AnalysisAppLib.IEventMisc2`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.InvocationMisc">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.InvocationMisc.#ctor(System.String,FindLogUsages.ILogInvocation)">
            <summary>
            
            </summary>
            <param name="rawJson"></param>
            <param name="instance"></param>
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.ThreadId">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.Obj">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.Message">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.Level">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.RawJson">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.PropKeys">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.File">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.InvocationMisc.Instance">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.ISyntaxTypesService">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ISyntaxTypesService.GetAppTypeInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.ISyntaxTypesService.CollectionMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.LocationInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.CharStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.LineStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.CharEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.LineEnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LocationInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="metadataModuleMetadataName"></param>
            <param name="sourceSpanStart"></param>
            <param name="sourceSpanEnd"></param>
        </member>
        <member name="M:AnalysisAppLib.LocationInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="charStart"></param>
            <param name="lineStart"></param>
            <param name="charEnd"></param>
            <param name="lineEnd"></param>
            <param name="metadataModuleMetadataName"></param>
            <param name="sourceSpanStart"></param>
            <param name="sourceSpanEnd"></param>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.MetadataModuleMetadataName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.SourceSpanStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LocationInfo.SourceSpanEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.LogEventMisc">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.ThreadId">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.PropKeys">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.File">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.LogEventMisc.#ctor(KayMcCormick.Dev.Logging.LogEventInstance,System.String)">
            <summary>
            
            </summary>
            <param name="inst"></param>
            <param name="rawJson"></param>
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.Obj">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.Message">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.Level">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.LogEventMisc.RawJson">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.LogInvocation2`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.SourceLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.FollowingCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.PrecedingCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.LoggerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.MethodName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.MethodDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.TransformedRelevantNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogInvocation2`1.Location">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.MetaHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.MetaHelper.GetProps(Autofac.Features.Metadata.Meta{System.Lazy{KayMcCormick.Dev.IBaseLibCommand}})">
            <summary>
            
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.MetaHelper.GetMetadataProps(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="metaMetadata"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.MethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.MethodInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{AnalysisAppLib.ParameterInfo})">
            <summary>
            
            </summary>
            <param name="methodSymbolName"></param>
            <param name="select"></param>
        </member>
        <member name="P:AnalysisAppLib.MethodInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.MethodInfo.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.MiscLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.MiscLevel.INFO">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.MiscLevel.Warn">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.MiscLevel.ERROR">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.MiscLevel.CRIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.MiscLevel.DEBUG">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ParameterInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ParameterInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ParameterInfo.TypeDisplayString">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ParameterInfo.TypeFullName">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.ParameterInfo.CustomModifiers">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ParameterInfo.#ctor(System.String,Microsoft.CodeAnalysis.ITypeSymbol,System.Collections.Generic.IEnumerable{AnalysisAppLib.CustomModifierInfo},System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="typeSymbol"></param>
            <param name="select"></param>
            <param name="typeDisplayString"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:AnalysisAppLib.Project.ProjectInfo">
            <summary>
            Project representation
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectInfo.Id">
            <summary>
            Primary key ID
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Project.ProjectInfo.Language">
            <summary>
            Project language
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectInfo.Name">
            <summary>
            PRoject name
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectInfo.SolutionPath">
            <summary>
            Solution file
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectInfo.RepositoryUrl">
            <summary>
            Repository url
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectInfo.Platform">
            <summary>
            Platform
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.ProjectLanguage">
            <summary>
            Project Language
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectLanguage.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectLanguage.ProjectName">
            <summary>
            Name of project
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectLanguage.SolutionPath">
            <summary>
            Solution path
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.BrowserNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.BrowserNode.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.IBrowserNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.IBrowserNode.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.IBrowserNodeCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.IProjectBrowserNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.IProjectBrowserNode.RepositoryUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.IProjectBrowserNode.Platform">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.IProjectBrowserNode.SolutionPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.IProjectBrowserViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.IProjectBrowserViewModel.RootCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.ProjectBrowserNode">
            <summary>
            Project Browser node
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectBrowserNode.RepositoryUrl">
            <summary>
            Repository URL for project
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectBrowserNode.Platform">
            <summary>
            Platform configuration setting for project.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectBrowserNode.SolutionPath">
            <summary>
            Path to solution file.
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Project.ProjectBrowserViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Project.ProjectBrowserViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectBrowserViewModel.RootCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Project.ProjectBrowserViewModel.Projects">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Project.ProjectBrowserViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.Props">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Props.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Props.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Props.TabHeader">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Props.ToString">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Serialization.JsonSymbolConverterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonSymbolConverterFactory.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonSymbolConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Serialization.JsonElementCodeConverter">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonElementCodeConverter.ConvertJsonElementToCode(System.Text.Json.JsonElement)">
            <summary>
            </summary>
            <param name="element"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:AnalysisAppLib.Serialization.JsonSyntaxNodeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonSyntaxNodeConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonSyntaxNodeConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Serialization.JsonSyntaxNodeConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Serialization.LogInvocationConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Serialization.LogInvocationConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Serialization.LogInvocationConverter.Write(System.Text.Json.Utf8JsonWriter,FindLogUsages.ILogInvocation,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:AnalysisAppLib.SToken">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SToken.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SToken.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tokenKind"></param>
            <param name="tokenValue"></param>
        </member>
        <member name="P:AnalysisAppLib.SToken.TokenKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.SToken.TokenValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.SyntaxFieldInfoTypeConverter">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.SyntaxFieldInfoTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.SyntaxFieldInfoTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.SyntaxInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.SyntaxInfo.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.SyntaxInfo.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.SyntaxTypesService">
            <summary>
            Syntax types service.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.GetAppTypeInfo(System.Object)">
            <summary>
            Get the <see cref="T:AnalysisAppLib.Syntax.AppTypeInfo"/> instance for a particular identifier.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.SyntaxTypesService.Map">
            <summary>
            -
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.BeginInit">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.EndInit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.SyntaxTypesService.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.SyntaxTypesService.Initialized">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.FieldPocoCollectionType(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},AnalysisAppLib.Syntax.AppTypeInfo)">
            <summary>
            
            </summary>
            <param name="typeSyntax"></param>
            <param name="collectionMap"></param>
            <param name="appTypeInfo"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.CollectionMap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.LoadSyntax(AnalysisAppLib.ITypesViewModel,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="model1"></param>
            <param name="collectionMap"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AnalysisAppLib.SyntaxTypesService.WithCollectionUsings(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            
            </summary>
            <param name="compilation"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.LoginAuthenticationViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.LoginAuthenticationViewModel.#ctor(System.Func{System.String,Microsoft.Graph.GraphServiceClient},Microsoft.Identity.Client.IPublicClientApplication)">
            <summary>
            
            </summary>
            <param name="graphFunc"></param>
            <param name="publicClient"></param>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.LoginAuthenticationViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.MicrosoftUserViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.#ctor(System.Func{System.Guid,Microsoft.Identity.Client.IPublicClientApplication},System.Func{System.String,Microsoft.Graph.GraphServiceClient})">
            <summary>
            
            </summary>
            <param name="publicClientFunc"></param>
            <param name="graphFunc"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.CanLogin">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.Account">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.GraphClient">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.LoginAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.LoginSilentAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.MicrosoftUserViewModel.OnPropertyChanged(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.CacheTargetViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.CacheTargetViewModel.#ctor(KayMcCormick.Dev.Logging.MyCacheTarget2)">
            <summary>
            
            </summary>
            <param name="cacheTarget"></param>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.CacheTargetViewModel.Events">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.CacheTargetViewModel.Attach">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.ILogUsageAnalysisViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ILogUsageAnalysisViewModel.LogInvocations">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ILogUsageAnalysisViewModel.PipelineResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ILogUsageAnalysisViewModel.Events">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.ILogUsageAnalysisViewModel.AnalyzeCommand(System.Object)">
            <summary>
            
            </summary>
            <param name="viewCurrentItem"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.ISpanToolTipViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ISpanToolTipViewModel.Spans">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ISpanToolTipViewModel.Location">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.ISyntaxPanelViewModel">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ISyntaxPanelViewModel.CompilationUnitSyntax">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ISyntaxPanelViewModel.SelectedItem">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.ISyntaxTokenViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.ISyntaxTokenViewModel.SyntaxItems">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel.LogInvocations">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel.PipelineResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel.Events">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.LogUsageAnalysisViewModel.AnalyzeCommand(System.Object)">
            <summary>
            
            </summary>
            <param name="viewCurrentItem"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.SyntaxPanelViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.PropertyChanging">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.#ctor(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            
            </summary>
            <param name="compilationUnitSyntax"></param>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.CompilationUnitSyntax">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.SyntaxPanelViewModel.SelectedItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ViewModel.SyntaxTokenViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.SyntaxTokenViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewModel.SyntaxTokenViewModel.SyntaxItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ViewModel.SyntaxTokenViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppTypeInfo">
            <summary>
                <para>Represents a Syntax Node type in the application.</para>
                <para></para>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfo.#ctor(AnalysisAppLib.Syntax.AppTypeInfoCollection)">
            <summary>
            </summary>
            <param name="subTypeInfos"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfo.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.AppClrType">
            <summary>
            CLR Type
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Type">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Kinds">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.SyntaxKinds">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Title">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.SubTypeInfos">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.SubTypeNames">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.FactoryMethods">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.ParentInfo">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.HierarchyLevel">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.ColorValue">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.DocInfo">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.ElementName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.UpdatedDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.CreatedDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.KeyValue">
            <summary>
            Key for the Type that isn't the object itself.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.AllTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfo.Model">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.Syntax.AppTypeInfo.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppClrType">
            <summary>
            Representation of CLR type.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.FullName">
            <summary>
            Type full name
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.AssemblyQualifiedName">
            <summary>
            Assembly qualified name
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.Assembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.BaseType">
            <summary>
            Base type
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.IsAbstract">
            <summary>
            Is Abstract
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.IsClass">
            <summary>
            Is Class
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.IsConstructedGenericType">
            <summary>
            Is constructed generic type
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.IsGenericTypeDefinition">
            <summary>
            Is generic type definition
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppClrType.IsGenericType">
            <summary>
            Is generic type
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppAssembly">
            <summary>
            Assembly
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppAssembly.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxFieldCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Remove(AnalysisAppLib.Syntax.SyntaxFieldInfo)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Add(AnalysisAppLib.Syntax.SyntaxFieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Contains(AnalysisAppLib.Syntax.SyntaxFieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.CopyTo(AnalysisAppLib.Syntax.SyntaxFieldInfo[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.IndexOf(AnalysisAppLib.Syntax.SyntaxFieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.Insert(System.Int32,AnalysisAppLib.Syntax.SyntaxFieldInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxFieldInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="typeName"></param>
            <param name="kinds"></param>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Kinds">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Types">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.ClrTypes">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Override">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Optional">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.ClrTypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.ElementTypeMetadataName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.IsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.AppTypeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxFieldInfo.Model">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxFieldTypeTypeConverter">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxFieldTypeValueSerializer">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldTypeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxFieldTypeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxKindCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.SyntaxKindCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxKindCollection.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppTypeInfoCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.Add(AnalysisAppLib.Syntax.AppTypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.Contains(AnalysisAppLib.Syntax.AppTypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.CopyTo(AnalysisAppLib.Syntax.AppTypeInfo[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.Remove(AnalysisAppLib.Syntax.AppTypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoCollection.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoCollection.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.IndexOf(AnalysisAppLib.Syntax.AppTypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.Insert(System.Int32,AnalysisAppLib.Syntax.AppTypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppMethodInfo">
            <summary>
            Wrapper class around <see cref="P:AnalysisAppLib.Syntax.AppMethodInfo.MethodInfo"/>. Supplies extra information if necessary and other potentially =
            useful information and facilities. Method parameters are individually wrapped in <see cref="T:AnalysisAppLib.Syntax.AppParameterInfo"/>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.MethodInfo">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.ReflectedType">
            <summary>
            </summary>
            
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.DeclaringType">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.MethodName">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.ReturnType">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.Parameters">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.XmlDoc">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppMethodInfo.Id">
            <summary>
            Primary key
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppParameterCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppParameterCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterCollection.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppParameterInfo">
            <summary>
            See <see cref="T:AnalysisAppLib.Syntax.AppMethodInfo"/>.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterInfo.ParameterType">
            <summary>
            Type of parameter.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterInfo.IsOptional">
            <summary>
            Is parameter optional?
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterInfo.Name">
            <summary>
            Name of parameter
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterInfo.Index">
            <summary>
            Zero-based index of parameter.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppParameterInfo.Id">
            <summary>
            Public key
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Syntax.AppTypeInfoKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.AppTypeInfoKey.StringValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.CompareTo(AnalysisAppLib.Syntax.AppTypeInfoKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="unqualifiedTypeName"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.Equals(AnalysisAppLib.Syntax.AppTypeInfoKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.AppTypeInfoKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Syntax.Ext">
            <summary>Extension class</summary>
        </member>
        <member name="M:AnalysisAppLib.Syntax.Ext.TypeInfos(Microsoft.CodeAnalysis.TypeInfo)">
            <summary>Types the infos.</summary>
            <param name="me">Me.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TypeInfos
        </member>
        <member name="M:AnalysisAppLib.Syntax.Ext.Deconstruct(Microsoft.CodeAnalysis.TypeInfo,Microsoft.CodeAnalysis.ITypeSymbol@,Microsoft.CodeAnalysis.ITypeSymbol@)">
            <summary>Deconstructs the specified type1.</summary>
            <param name="me">Me.</param>
            <param name="type1">The type1.</param>
            <param name="type2">The type2.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Deconstruct
        </member>
        <member name="M:AnalysisAppLib.Syntax.Ext.ShortenedPath(Microsoft.CodeAnalysis.Document)">
            <summary>
            
            </summary>
            <param name="doc"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AnalysisAppLib.Syntax.Ext.RelativePath(Microsoft.CodeAnalysis.Document)">
            <summary>
            
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Syntax.Ext.GetRelativePath(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="relativeTo"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Syntax.SyntaxItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxItem.SyntaxKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxItem.Token">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Syntax.SyntaxItem.RawKind">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Xaml.TypeMapDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Xaml.TypeMapDictionary.Dict">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.Add(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.Item(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Xaml.TypeMapDictionary2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.Xaml.TypeMapDictionary2.Dict">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.Add(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.Item(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Xaml.TypeMapDictionary2.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Xaml.TypeMapDictionary2.GetAppTypeInfoForType(AnalysisAppLib.Syntax.AppTypeInfoKey)">
            <summary>
            
            </summary>
            <param name="typeKey"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:AnalysisAppLib.GenericAnalyzeCommand`1">
            <summary>
            Generic analyze command.
            </summary>
            <typeparam name="TOutput">Type instances generated by analysis..</typeparam>
        </member>
        <member name="M:AnalysisAppLib.GenericAnalyzeCommand`1.#ctor(System.Threading.Tasks.Dataflow.ITargetBlock{AnalysisAppLib.AnalysisRequest},System.Threading.Tasks.Dataflow.ISourceBlock{`0})">
            <summary>
            
            </summary>
            <param name="acceptorBlock"></param>
            <param name="outputBlock"></param>
        </member>
        <member name="M:AnalysisAppLib.GenericAnalyzeCommand`1.AnalyzeCommandAsync(AnalysisAppLib.Project.IProjectBrowserNode)">
            <summary>
            
            </summary>
            <param name="projectNode"></param>
            <returns></returns>
            <exception cref="T:AnalysisAppLib.AnalyzeException"></exception>
        </member>
        <member name="P:AnalysisAppLib.GenericAnalyzeCommand`1.RejectDestination">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.IAnalyzeCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.IAnalyzeCommand.AnalyzeCommandAsync(AnalysisAppLib.Project.IProjectBrowserNode,System.Threading.Tasks.Dataflow.ITargetBlock{FindLogUsages.RejectedItem})">
            <summary>
            
            </summary>
            <param name="projectNode"></param>
            <param name="rejectTarget"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.IAnalyzeCommand2`1">
            <summary>
            
            </summary>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="T:AnalysisAppLib.IAnalyzeCommand3">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.IAnalyzeCommand3.AnalyzeCommandAsync(AnalysisAppLib.Project.IProjectBrowserNode)">
            <summary>
            
            </summary>
            <param name="projectNode"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.ICodeRenderer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ICodeRenderer.AddToken(System.UInt16,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rawKind"></param>
            <param name="text"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:AnalysisAppLib.ICodeRenderer.AddTrivia(System.Int32,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rawKind"></param>
            <param name="text"></param>
            <param name="newLine"></param>
        </member>
        <member name="M:AnalysisAppLib.ICodeRenderer.NewLine">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ICodeRenderer.StartNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AnalysisAppLib.ICodeRenderer.EndNode(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AnalysisAppLib.ITypesViewModel">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.Root">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.ShowBordersIsChecked">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.HierarchyColors">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.Map">
            <summary>
            Home of all the <see cref="T:AnalysisAppLib.Syntax.AppTypeInfo"/> instances.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.StructureRoot">
            <summary>
            <see cref="T:AnalysisAppLib.Syntax.AppTypeInfo"/> ordered by structure and natural containment.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.DocInfo">
            <summary>
            `
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.InitializationDateTime">
            <summary>
                An approximate time as to when the view model was initialized and/or
                populated with extended information.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ITypesViewModel.Map2">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ITypesViewModel.GetAppTypeInfo(System.Object)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.ITypesViewModel.GetAppTypeInfos">
            <summary>
            Get all app type infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.ITypesViewModel.LoadTypeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ITypesViewModel.DetailFields">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.ITypesViewModel.TryGetAppTypeInfo(System.Object,AnalysisAppLib.Syntax.AppTypeInfo@)">
            <summary>
            
            </summary>
            <param name="identifier"></param>
            <param name="appTypeInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.JsonPocoSyntaxConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.JsonPocoSyntaxConverter.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.JsonPocoSyntaxConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.JsonPocoSyntaxConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.JsonPocoSyntaxConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.AnalysisService_Parse_Empty_code_supplied">
            <summary>
              Looks up a localized string similar to Empty code supplied.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.ContextualTabGroup1_ContextualTabGroup1_Code_Analysis">
            <summary>
              Looks up a localized string similar to Code Analysis.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.doc">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;doc&gt;
                &lt;assembly&gt;
                    &lt;name&gt;Microsoft.CodeAnalysis.CSharp&lt;/name&gt;
                &lt;/assembly&gt;
                &lt;members&gt;
                    &lt;member name=&quot;T:Microsoft.CodeAnalysis.CSharp.Binder&quot;&gt;
                        &lt;summary&gt;
                        A Binder converts names in to symbols and syntax nodes into bound trees. It is context
                        dependent, relative to a location in source code.
                        &lt;/summary&gt;
                        &lt;summary&gt;
                        This portion of the binder converts a AnonymousObjectCreationExpressionSy [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Program_LoadSyntaxExamplesAsync_">
            <summary>
              Looks up a localized string similar to {0} = {1}.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Program_LoadSyntaxExamplesAsync__0_">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Program_Main_Logger_async_complete_">
            <summary>
              Looks up a localized string similar to Logger async complete..
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Program_Main_Please_contact_your_administrator_for_assistance_">
            <summary>
              Looks up a localized string similar to Please contact your administrator for assistance..
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Program_Parse">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            using NLog ;
            
            namespace LogTest
            {
                public static class Program
                {
                    private static readonly  Logger Logger = LogManager.GetCurrentClassLogger();
                    static void Main(string[] args) {
                        Action&lt;string&gt; xx = Logger.Info;
                        xx(&quot;hi&quot;);
                        Logger.Debug ( $&quot;Hello {1}&quot; ) ;
                        try {
                            string xxx = null;
                            [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AnalysisAppLib.Properties.Resources.Syntax">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE file in the project root for more information. --&gt;
            
            &lt;!-- 
             To re-generate source from this file, run eng/generate-compiler-code.cmd
            --&gt;
            
            &lt;Tree Root=&quot;SyntaxNode&quot;&gt;
              &lt;PredefinedNode Name=&quot;CSharpSyntaxNode&quot; Base=&quot;SyntaxNode&quot;/&gt;
              &lt;PredefinedNode Name=&quot;SyntaxToken&quot; Base=&quot;CSharpSyntaxNode&quot;/&gt;
              &lt;PredefinedNode Name=&quot; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:AnalysisAppLib.RefactorLogUsage">
            <summary>
                Refactoring for logging.
            </summary>
        </member>
        <member name="M:AnalysisAppLib.RefactorLogUsage.ComputeRefactoringsAsync(Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringContext)">
            <summary>
                Main refactoring routine.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Span.ActiveSpans">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.RemoveAll(System.Object)">
            <summary>
            </summary>
            <param name="node"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.AddSpan(System.Object,Microsoft.CodeAnalysis.Text.TextSpan,AnalysisAppLib.Span.ISpanViewModel)">
            <summary>
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="spanObject"></param>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.OverlapsWith(Microsoft.CodeAnalysis.Text.TextSpan)">
            <summary>
            </summary>
            <param name="span"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel}})">
            <summary>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel}})">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel}}[],System.Int32)">
            <summary>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel}})">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.Span.ActiveSpans.Count">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Span.ActiveSpans.IsReadOnly">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.ContainsKey(System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Add(System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel})">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.Remove(System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.Span.ActiveSpans.TryGetValue(System.Object,System.Collections.Generic.IDictionary{System.Object,AnalysisAppLib.Span.ISpanViewModel}@)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.Span.ActiveSpans.Item(System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:AnalysisAppLib.Span.ActiveSpans.Keys">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Span.ActiveSpans.Values">
            <summary>
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Span.ISpanObject`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AnalysisAppLib.Span.ISpanObject`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Span.ISpanViewModel">
            <summary>
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Span.ISpanViewModel.Span">
            <summary>
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.ISpanViewModel.GetInstance">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.Span.LogInvocationSpan">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.LogInvocationSpan.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,FindLogUsages.ILogInvocation)">
            <summary>
            
            </summary>
            <param name="span"></param>
            <param name="instance"></param>
        </member>
        <member name="T:AnalysisAppLib.Span.SpanObject`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AnalysisAppLib.Span.SpanObject`1.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,`0)">
            <summary>
            
            </summary>
            <param name="span"></param>
            <param name="instance"></param>
        </member>
        <member name="P:AnalysisAppLib.Span.SpanObject`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.SpanObject`1.GetInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.Span.SpanObject`1.Span">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Span.SyntaxNodeSpanObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.SyntaxNodeSpanObject.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            
            </summary>
            <param name="span"></param>
            <param name="instance"></param>
        </member>
        <member name="P:AnalysisAppLib.Span.SyntaxNodeSpanObject.Kind">
             <summary>
            
             
             </summary>
        </member>
        <member name="T:AnalysisAppLib.Span.TokenSpanObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.TokenSpanObject.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            
            </summary>
            <param name="span"></param>
            <param name="instance"></param>
        </member>
        <member name="T:AnalysisAppLib.Span.TriviaSpanObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Span.TriviaSpanObject.#ctor(Microsoft.CodeAnalysis.Text.TextSpan,Microsoft.CodeAnalysis.SyntaxTrivia)">
            <summary>
            
            </summary>
            <param name="span"></param>
            <param name="instance"></param>
        </member>
        <member name="T:AnalysisAppLib.TypeWriter">
            <summary>
                Class to write type information to XML file.
            </summary>
        </member>
        <member name="F:AnalysisAppLib.TypeWriter.MethodNamespaceUri">
            <summary>
                Method namespace URI
            </summary>
        </member>
        <member name="F:AnalysisAppLib.TypeWriter.PropertyNamespaceUri">
            <summary>
                Property namespace URI
            </summary>
        </member>
        <member name="P:AnalysisAppLib.TypeWriter.Proxy">
            <summary>
                Enable proxy
            </summary>
        </member>
        <member name="M:AnalysisAppLib.TypeWriter.MethodXmlElement(System.Func{System.String,System.Xml.XmlElement},System.Func{System.String,System.String,System.Xml.XmlElement},System.Reflection.MethodInfo,AnalysisAppLib.WriteStyle)">
            <summary>
                Get XmlElement for Method
            </summary>
            <param name="c"></param>
            <param name="c2"></param>
            <param name="m"></param>
            <param name="style"></param>
            <returns></returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"></exception>
        </member>
        <member name="M:AnalysisAppLib.TypeWriter.DiscoverTypes(AnalysisAppLib.WriteStyle)">
            <summary>
                Main routine to "discover" types and write them out to XML.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:AnalysisAppLib.TypeWriter.GetXmlId(System.Object)">
            <summary>
                Get the document ID for an code element.
            </summary>
            <param name="o"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:AnalysisAppLib.TypeWriter.SubIdForGenericType(System.Type)">
            <summary>
                Get a subordinate ID for a generic type.
            </summary>
            <param name="t"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AnalysisAppLib.WriteStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.WriteStyle.Verbose">
            <summary>
                Write verbose XML.
            </summary>
        </member>
        <member name="F:AnalysisAppLib.WriteStyle.Compact">
            <summary>
                Write compact XML.
            </summary>
        </member>
        <member name="T:AnalysisAppLib.UnrecognizedElementException">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.UnrecognizedElementException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.UnrecognizedElementException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AnalysisAppLib.UnrecognizedElementException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:AnalysisAppLib.UnrecognizedElementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.CodeAnalyseContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.CodeAnalyseContext.Factory1">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="assemblyName"></param>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.Compilation">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CodeAnalyseContext.#ctor(Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxTree,System.String,Microsoft.CodeAnalysis.CSharp.CSharpCompilation)">
            <summary>
            
            </summary>
            <param name="currentModel"></param>
            <param name="statement"></param>
            <param name="node"></param>
            <param name="syntaxTree"></param>
            <param name="assemblyName"></param>
            <param name="compilation"></param>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.Node">
            <summary>
            SyntaxNode for analysis
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.CurrentModel">
            <summary>
            Semantic model for analysis
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.SyntaxTree">
            <summary>
            Syntax tree for analysis
            </summary>
        </member>
        <member name="M:AnalysisAppLib.CodeAnalyseContext.Deconstruct(Microsoft.CodeAnalysis.SyntaxTree@,Microsoft.CodeAnalysis.SemanticModel@,Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax@)">
            <summary>
            
            </summary>
            <param name="syntaxTree"></param>
            <param name="model"></param>
            <param name="compilationUnitSyntax"></param>
        </member>
        <member name="M:AnalysisAppLib.CodeAnalyseContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.CodeAnalyseContext.FromSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree,System.String,Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)">
            <summary>
            
            </summary>
            <param name="tree"></param>
            <param name="assemblyName"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:AnalysisAppLib.CodeAnalyseContext.FromSyntaxNode(Microsoft.CodeAnalysis.SyntaxNode,System.String,Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="assemblyName"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.CompilationUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.CodeAnalyseContext.Lazy">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ICodeAnalyseContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ICompilationContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICompilationContext.Compilation">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ICompilationUnitRootContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICompilationUnitRootContext.CompilationUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ICompilationUnitRootContext.Node">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ISemanticModelContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ISemanticModelContext.CurrentModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ISyntaxTreeContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ISyntaxTreeContext.SyntaxTree">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.LogInvocationCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogInvocationCollection.InsertItem(System.Int32,FindLogUsages.ILogInvocation)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AnalysisAppLib.LogInvocationCollection.SetItem(System.Int32,FindLogUsages.ILogInvocation)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:AnalysisAppLib.LogListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogListener.#ctor(System.Int32,AnalysisAppLib.LogViewModel,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="viewModel"></param>
            <param name="options"></param>
        </member>
        <member name="M:AnalysisAppLib.LogListener.#ctor(System.Int32,AnalysisAppLib.LogViewModel)">
            <summary>
            
            </summary>
            <param name="port"></param>
            <param name="logViewModel"></param>
        </member>
        <member name="M:AnalysisAppLib.LogListener.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogListener.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogListener.Listen">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogListener.JavaTimeStampToDateTime(System.Double)">
            <summary>
            
            </summary>
            <param name="javaTimeStamp"></param>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.LogViewerAppViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogViewerAppViewModel.LogViewModels">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogViewerAppViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.LogViewerConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogViewerConfig.#ctor(System.UInt16)">
            <summary>
            
            </summary>
            <param name="port"></param>
        </member>
        <member name="P:AnalysisAppLib.LogViewerConfig.Port">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.LogViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogViewModel.RootLogger">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogViewModel.RootNodes">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogViewModel.LogEntries">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.LogViewModel.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="E:AnalysisAppLib.LogViewModel.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.LogViewModel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:AnalysisAppLib.LogViewModel.ParseLoggerName(System.String)">
            <summary>
            
            </summary>
            <param name="loggerName"></param>
        </member>
        <member name="M:AnalysisAppLib.LogViewModel.AddEntry(KayMcCormick.Dev.Logging.LogEventInstance)">
            <summary>
            
            </summary>
            <param name="logEvent"></param>
        </member>
        <member name="T:AnalysisAppLib.Pipeline">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Pipeline.#ctor(KayMcCormick.Dev.IAddRuntimeResource)">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.PipelineInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.ResultBufferBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.LinkOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.CurrentBlock">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Pipeline.#ctor(System.Func{FindLogUsages.ILogInvocation},System.Collections.Generic.IEnumerable{System.Action{System.Tuple{Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Document}}},System.Collections.Generic.IEnumerable{System.Action{Microsoft.CodeAnalysis.Document}},System.Collections.Generic.IEnumerable{System.Action{FindLogUsages.ILogInvocation}},System.Collections.Generic.IEnumerable{System.Action{AnalysisAppLib.IEventMisc}},KayMcCormick.Dev.IAddRuntimeResource)">
            <summary>
            
            </summary>
            <param name="invocationFactory"></param>
            <param name="documentAction1"></param>
            <param name="documentAction"></param>
            <param name="invocActions"></param>
            <param name="miscs"></param>
            <param name="add"></param>
        </member>
        <member name="M:AnalysisAppLib.Pipeline.BuildPipeline">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Pipeline.ConfigureInput">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.Head">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.RejectBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.Blocks">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.Input">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Pipeline.Block">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.AnalysisContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalysisContext.Model">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.AnalysisContext.Node">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Myw">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Myw.#ctor(System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="unknown"></param>
        </member>
        <member name="M:AnalysisAppLib.Myw.CreateLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.Myw.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AnalysisAppLib.MyL">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.MyL.#ctor(System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="unknown"></param>
        </member>
        <member name="M:AnalysisAppLib.MyL.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.MyL.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:AnalysisAppLib.MyL.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <typeparam name="TState"></typeparam>
            <returns></returns>
        </member>
        <member name="T:AnalysisAppLib.PipelineResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.PipelineResult.#ctor(AnalysisAppLib.ResultStatus,System.Exception)">
            <summary>
            
            </summary>
            <param name="status"></param>
            <param name="taskException"></param>
        </member>
        <member name="P:AnalysisAppLib.PipelineResult.Status">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.PipelineResult.TaskException">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.ResultStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnalysisAppLib.ResultStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:AnalysisAppLib.ResultStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:AnalysisAppLib.ResultStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:AnalysisAppLib.ResultStatus.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:AnalysisAppLib.UnableToInitializeWorkspace">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.UnableToInitializeWorkspace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.UnableToInitializeWorkspace.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AnalysisAppLib.UnableToInitializeWorkspace.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:AnalysisAppLib.UnableToInitializeWorkspace.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AnalysisAppLib.ViewerLoggerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.ChildrenLoggers">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.LoggerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.PartName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.ViewerLoggerInfo.IsExpanded">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnalysisAppLib.Visitor2">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Visitor2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AnalysisAppLib.Visitor2.ActiveSpans">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnalysisAppLib.Visitor2.VisitToken(Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            
            </summary>
            <param name="toke"></param>
        </member>
        <member name="M:AnalysisAppLib.Visitor2.DefaultVisit(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:PocoSyntax.PocoSyntaxTokenList">
            <summary>
            
            </summary>
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.Clear">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.Count">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:PocoSyntax.PocoSyntaxTokenList.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="M:PocoSyntax.PocoSyntaxTokenList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:PocoSyntax.PocoSyntaxToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:PocoSyntax.PocoSyntaxToken.RawKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:PocoSyntax.PocoSyntaxToken.Kind">
            <summary>
            
            </summary>
        </member>
        <member name="P:PocoSyntax.PocoSyntaxToken.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:PocoSyntax.PocoSyntaxToken.ValueText">
            <summary>
            
            </summary>
        </member>
        <member name="T:PocoSyntax.PocoAccessorDeclarationSyntaxCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:GenTransforms">
            <summary/>
        </member>
        <member name="M:GenTransforms.Transform_Type_Argument_List(Microsoft.CodeAnalysis.CSharp.Syntax.TypeArgumentListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Array_Rank_Specifier(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayRankSpecifierSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Tuple_Element(Microsoft.CodeAnalysis.CSharp.Syntax.TupleElementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Identifier_Name(Microsoft.CodeAnalysis.CSharp.Syntax.IdentifierNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Generic_Name(Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Simple_Name(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Qualified_Name(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Alias_Qualified_Name(Microsoft.CodeAnalysis.CSharp.Syntax.AliasQualifiedNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Name(Microsoft.CodeAnalysis.CSharp.Syntax.NameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Predefined_Type(Microsoft.CodeAnalysis.CSharp.Syntax.PredefinedTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Array_Type(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Pointer_Type(Microsoft.CodeAnalysis.CSharp.Syntax.PointerTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Nullable_Type(Microsoft.CodeAnalysis.CSharp.Syntax.NullableTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Tuple_Type(Microsoft.CodeAnalysis.CSharp.Syntax.TupleTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Omitted_Type_Argument(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedTypeArgumentSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Ref_Type(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type(Microsoft.CodeAnalysis.CSharp.Syntax.TypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Parenthesized_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Tuple_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.TupleExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Prefix_Unary_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Await_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.AwaitExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Postfix_Unary_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.PostfixUnaryExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Member_Access_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberAccessExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Conditional_Access_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalAccessExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Member_Binding_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.MemberBindingExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Element_Binding_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementBindingExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Range_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.RangeExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Implicit_Element_Access(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitElementAccessSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Binary_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Assignment_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.AssignmentExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Conditional_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_This_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ThisExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.BaseExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Instance_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.InstanceExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Literal_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Make_Ref_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.MakeRefExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Ref_Type_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.RefTypeExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Ref_Value_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.RefValueExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Checked_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Default_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Of_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.TypeOfExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Size_Of_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.SizeOfExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Invocation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Element_Access_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Declaration_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Cast_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.CastExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Anonymous_Method_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousMethodExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Simple_Lambda_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleLambdaExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Parenthesized_Lambda_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedLambdaExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Lambda_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.LambdaExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Anonymous_Function_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousFunctionExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Ref_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.RefExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Initializer_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.InitializerExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Object_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ObjectCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Anonymous_Object_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Array_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ArrayCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Implicit_Array_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitArrayCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Stack_Alloc_Array_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.StackAllocArrayCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Implicit_Stack_Alloc_Array_Creation_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ImplicitStackAllocArrayCreationExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Query_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.QueryExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Omitted_Array_Size_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.OmittedArraySizeExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolated_String_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Is_Pattern_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.IsPatternExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Throw_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Switch_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Expression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Argument_List(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Bracketed_Argument_List(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Argument_List(Microsoft.CodeAnalysis.CSharp.Syntax.BaseArgumentListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Argument(Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Name_Colon(Microsoft.CodeAnalysis.CSharp.Syntax.NameColonSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Anonymous_Object_Member_Declarator(Microsoft.CodeAnalysis.CSharp.Syntax.AnonymousObjectMemberDeclaratorSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_From_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.FromClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Let_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.LetClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Join_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Where_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.WhereClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Order_By_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.OrderByClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Query_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.QueryClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Select_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Group_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.GroupClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Select_Or_Group_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.SelectOrGroupClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Query_Body(Microsoft.CodeAnalysis.CSharp.Syntax.QueryBodySyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Join_Into_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.JoinIntoClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Ordering(Microsoft.CodeAnalysis.CSharp.Syntax.OrderingSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Query_Continuation(Microsoft.CodeAnalysis.CSharp.Syntax.QueryContinuationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_When_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.WhenClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Discard_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardPatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Declaration_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.DeclarationPatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Var_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.VarPatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Recursive_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.RecursivePatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Constant_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.ConstantPatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Pattern(Microsoft.CodeAnalysis.CSharp.Syntax.PatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Positional_Pattern_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.PositionalPatternClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Property_Pattern_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyPatternClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Subpattern(Microsoft.CodeAnalysis.CSharp.Syntax.SubpatternSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolated_String_Text(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringTextSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolation(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolated_String_Content(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolatedStringContentSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolation_Alignment_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationAlignmentClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interpolation_Format_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.InterpolationFormatClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Block(Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Local_Function_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalFunctionStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Local_Declaration_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Expression_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Empty_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.EmptyStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Labeled_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.LabeledStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Goto_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.GotoStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Break_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.BreakStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Continue_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ContinueStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Return_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ReturnStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Throw_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ThrowStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Yield_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.YieldStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_While_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.WhileStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Do_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.DoStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_For_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ForStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_For_Each_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_For_Each_Variable_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.ForEachVariableStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Common_For_Each_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.CommonForEachStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Using_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.UsingStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Fixed_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.FixedStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Checked_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.CheckedStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Unsafe_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.UnsafeStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Lock_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.LockStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_If_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Switch_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Try_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.TryStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Variable_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Variable_Declarator(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Equals_Value_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Single_Variable_Designation(Microsoft.CodeAnalysis.CSharp.Syntax.SingleVariableDesignationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Discard_Designation(Microsoft.CodeAnalysis.CSharp.Syntax.DiscardDesignationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Parenthesized_Variable_Designation(Microsoft.CodeAnalysis.CSharp.Syntax.ParenthesizedVariableDesignationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Variable_Designation(Microsoft.CodeAnalysis.CSharp.Syntax.VariableDesignationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Else_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.ElseClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Switch_Section(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchSectionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Case_Pattern_Switch_Label(Microsoft.CodeAnalysis.CSharp.Syntax.CasePatternSwitchLabelSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Case_Switch_Label(Microsoft.CodeAnalysis.CSharp.Syntax.CaseSwitchLabelSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Default_Switch_Label(Microsoft.CodeAnalysis.CSharp.Syntax.DefaultSwitchLabelSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Switch_Label(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchLabelSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Switch_Expression_Arm(Microsoft.CodeAnalysis.CSharp.Syntax.SwitchExpressionArmSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Catch_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Catch_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.CatchDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Catch_Filter_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.CatchFilterClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Finally_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.FinallyClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Compilation_Unit(Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Extern_Alias_Directive(Microsoft.CodeAnalysis.CSharp.Syntax.ExternAliasDirectiveSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Using_Directive(Microsoft.CodeAnalysis.CSharp.Syntax.UsingDirectiveSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Global_Statement(Microsoft.CodeAnalysis.CSharp.Syntax.GlobalStatementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Namespace_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Class_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Struct_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.StructDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Interface_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.InterfaceDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Enum_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Type_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Delegate_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.DelegateDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Enum_Member_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.EnumMemberDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Field_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Event_Field_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventFieldDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Field_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.BaseFieldDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Method_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Operator_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Conversion_Operator_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Constructor_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Destructor_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.DestructorDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Method_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.BaseMethodDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Property_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Event_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.EventDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Indexer_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Property_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.BasePropertyDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Incomplete_Member(Microsoft.CodeAnalysis.CSharp.Syntax.IncompleteMemberSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Member_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Attribute_List(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Attribute_Target_Specifier(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeTargetSpecifierSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Attribute_Argument_List(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Attribute_Argument(Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Name_Equals(Microsoft.CodeAnalysis.CSharp.Syntax.NameEqualsSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Parameter(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_List(Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Simple_Base_Type(Microsoft.CodeAnalysis.CSharp.Syntax.SimpleBaseTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Type(Microsoft.CodeAnalysis.CSharp.Syntax.BaseTypeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Parameter_Constraint_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Constructor_Constraint(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorConstraintSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Class_Or_Struct_Constraint(Microsoft.CodeAnalysis.CSharp.Syntax.ClassOrStructConstraintSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Constraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeConstraintSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Parameter_Constraint(Microsoft.CodeAnalysis.CSharp.Syntax.TypeParameterConstraintSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Explicit_Interface_Specifier(Microsoft.CodeAnalysis.CSharp.Syntax.ExplicitInterfaceSpecifierSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Constructor_Initializer(Microsoft.CodeAnalysis.CSharp.Syntax.ConstructorInitializerSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Arrow_Expression_Clause(Microsoft.CodeAnalysis.CSharp.Syntax.ArrowExpressionClauseSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Accessor_List(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Accessor_Declaration(Microsoft.CodeAnalysis.CSharp.Syntax.AccessorDeclarationSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Bracketed_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.BracketedParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.BaseParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Parameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Type_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.TypeCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Qualified_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.QualifiedCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Name_Member_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.NameMemberCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Indexer_Member_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.IndexerMemberCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Operator_Member_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.OperatorMemberCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Conversion_Operator_Member_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.ConversionOperatorMemberCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Member_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.MemberCrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Cref(Microsoft.CodeAnalysis.CSharp.Syntax.CrefSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Cref_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Cref_Bracketed_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.CrefBracketedParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Base_Cref_Parameter_List(Microsoft.CodeAnalysis.CSharp.Syntax.BaseCrefParameterListSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Cref_Parameter(Microsoft.CodeAnalysis.CSharp.Syntax.CrefParameterSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Element(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Empty_Element(Microsoft.CodeAnalysis.CSharp.Syntax.XmlEmptyElementSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Text(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_CData_Section(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCDataSectionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Processing_Instruction(Microsoft.CodeAnalysis.CSharp.Syntax.XmlProcessingInstructionSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Comment(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCommentSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Node(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNodeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Element_Start_Tag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementStartTagSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Element_End_Tag(Microsoft.CodeAnalysis.CSharp.Syntax.XmlElementEndTagSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Name(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Prefix(Microsoft.CodeAnalysis.CSharp.Syntax.XmlPrefixSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Text_Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlTextAttributeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Cref_Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlCrefAttributeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Name_Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlNameAttributeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Xml_Attribute(Microsoft.CodeAnalysis.CSharp.Syntax.XmlAttributeSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Skipped_Tokens_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.SkippedTokensTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Documentation_Comment_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.DocumentationCommentTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_If_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.IfDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Elif_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElifDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Conditional_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ConditionalDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Else_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ElseDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Branching_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.BranchingDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_End_If_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndIfDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Region_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.RegionDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_End_Region_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.EndRegionDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Error_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ErrorDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Warning_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.WarningDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Bad_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.BadDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Define_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.DefineDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Undef_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.UndefDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Line_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.LineDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Pragma_Warning_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaWarningDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Pragma_Checksum_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.PragmaChecksumDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Reference_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ReferenceDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Load_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.LoadDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Shebang_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.ShebangDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Nullable_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.NullableDirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Directive_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.DirectiveTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_Structured_Trivia(Microsoft.CodeAnalysis.CSharp.Syntax.StructuredTriviaSyntax)">
            <summary></summary>
        </member>
        <member name="M:GenTransforms.Transform_CSharp_Node(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)">
            <summary></summary>
        </member>
    </members>
</doc>
