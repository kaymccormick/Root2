<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KayMcCormick.Dev</name>
    </assembly>
    <members>
        <member name="T:KayMcCormick.Dev.IAppInfoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.IAppInfoService.GetAppInstanceInfo(KayMcCormick.Dev.AppInstanceInfoRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.AppInfoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfoService.#ctor(System.DateTime,KayMcCormick.Dev.Interfaces.IObjectIdProvider)">
            <summary>
            
            </summary>
            <param name="startupTime"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfoService.GetAppInstanceInfo(KayMcCormick.Dev.AppInstanceInfoRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.WireInstanceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.WireInstanceInfo.Desc">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.WireComponentInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.WireComponentInfo.Instances">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.WireComponentInfo.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AppInstanceInfoResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.AppInstanceInfoResponse.Info">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.LoggerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.LoggerInfo.TargetName">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AppInstanceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.AppInstanceInfo.StartupTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.AppInstanceInfo.LoggerInfos">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.AppInstanceInfo.ComponentInfos">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AppInstanceInfoRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AppInfraException">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfraException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfraException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfraException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.AppInfraException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KayMcCormick.Dev.ApplicationInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.ApplicationInstance.InstanceRunGuid">
            <summary>
            
            </summary>
        </member>
        <member name="E:KayMcCormick.Dev.ApplicationInstance.AppStartup">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            
            </summary>
            <param name="logMethod"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.AddModule(Autofac.Core.IModule)">
            <summary>
            
            </summary>
            <param name="appModule"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.GetLifetimeScope">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.OnAppStartup(KayMcCormick.Dev.AppStartupEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.Shutdown">
            <summary>
            
            </summary>
             todo call from wpf
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstance.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.ApplicationInstanceException">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KayMcCormick.Dev.ApplicationInstanceHost">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceHost.#ctor(Autofac.IContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceHost.HostOpen">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ApplicationInstanceHost.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AppStartupEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.ClearLoggingRulesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ClearLoggingRulesAttribute.Apply(KayMcCormick.Dev.LoggingAttributeContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.ComponentInfo">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ComponentInfo
        </member>
        <member name="P:KayMcCormick.Dev.ComponentInfo.Instances">
            <summary>Gets the instances.</summary>
            <value>The instances.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Instances
        </member>
        <member name="T:KayMcCormick.Dev.ConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSource.AppConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSource.EnvironmentVariable">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSource.Win32Registry">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSource.Compilation">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.ConfigurationSetting">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSetting.LogsRootDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.IConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.IConfiguration.LoadConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Win32RegistryConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Win32RegistryConfiguration.LoadConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.DataBindingTraceFilter.MyTraceFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.DataBindingTraceFilter.MyTraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="source"></param>
            <param name="eventType"></param>
            <param name="id"></param>
            <param name="formatOrMessage"></param>
            <param name="args"></param>
            <param name="data1"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.DebugUtils">
            <summary>Extension methods for debug output.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.DebugUtils.DebugFormat(Autofac.Core.IComponentRegistration)">
            <summary>Debugs the format.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebugFormat
        </member>
        <member name="M:KayMcCormick.Dev.DebugUtils.DebugFormat(Autofac.Core.Service)">
            <summary>Debugs the format.</summary>
            <param name="service">The service.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebugFormat
        </member>
        <member name="T:KayMcCormick.Dev.DefaultObjectIdProvider">
            <summary>Default implementation for object ID provider service.</summary>
            <seealso cref="T:KayMcCormick.Dev.Interfaces.IObjectIdProvider" />
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.#ctor(System.Runtime.Serialization.ObjectIDGenerator)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetInstanceByComponentRegistration(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance by component registration.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetInstanceByComponentRegistration
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetComponentInfo(System.Guid)">
            <summary>
            
            </summary>
            <param name="regId"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetInstanceCount(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance count.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetInstanceCount
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectInstances">
            <summary>Gets the object instances.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstances
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectInstanceIdentifier(System.Object)">
            <summary>Gets the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectById(System.Object)">
            <summary>
                <para>
                    Gets the object by identifier.
                </para>
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.ProvideObjectInstanceIdentifier(System.Object,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
                <para>
                    Provides the object instance identifier.
                </para>
            </summary>
            <param name="instance">The instance.</param>
            <param name="eComponent">The e component.</param>
            <param name="eParameters">The e parameters.</param>
            <returns></returns>
            <exception cref="T:KayMcCormick.Dev.UnableToRegisterObjectIdException"></exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ProvideObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetRootNodes">
            <summary>Gets the root nodes.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetRootNodes
        </member>
        <member name="T:KayMcCormick.Dev.ExitCode">
            <summary>Exit status of application.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.Success">
            <summary>Successful exit.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.GeneralError">
            <summary>General error.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.ArgumentsError">
            <summary>Invalid arguments to application.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.ExceptionalError">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.IdGeneratorModule">
            <summary></summary>
            <seealso cref="T:Autofac.Module" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for IdGeneratorModule
        </member>
        <member name="P:KayMcCormick.Dev.IdGeneratorModule.DefaultObject">
            <summary>Gets or sets the default object.</summary>
            <value>The default object.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DefaultObject
        </member>
        <member name="P:KayMcCormick.Dev.IdGeneratorModule.Generator">
            <summary>Gets or sets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="M:KayMcCormick.Dev.IdGeneratorModule.Load(Autofac.ContainerBuilder)">
            <summary>Override to add registrations to the container.</summary>
            <remarks>
                Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">
                The builder through which components can be
                registered.
            </param>
        </member>
        <member name="M:KayMcCormick.Dev.IdGeneratorModule.AttachToComponentRegistration(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
                Override to attach module-specific functionality to a
                component registration.
            </summary>
            <remarks>
                This method will be called for all existing <i>and future</i> component
                registrations - ordering is not important.
            </remarks>
            <param name="componentRegistry">The component registry.</param>
            <param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.ICentralService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.ICentralService.RegisterApplicationInstance(KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.CentralService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.CentralService.RegisterApplicationInstance(KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest.EndpointUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.IHaveObjectId">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IHaveObjectId
        </member>
        <member name="P:KayMcCormick.Dev.Interfaces.IHaveObjectId.InstanceObjectId">
            <summary>Sets the instance object identifier.</summary>
            <value>The instance object identifier.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for InstanceObjectId
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.IObjectIdProvider">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IObjectIdProvider
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetInstanceByComponentRegistration(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance by component registration.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetInstanceCount(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance count.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectInstances">
            <summary>Gets the object instances.</summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectInstanceIdentifier(System.Object)">
            <summary>Gets the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectById(System.Object)">
            <summary>
                <para>
                    Gets the object by identifier.
                </para>
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.ProvideObjectInstanceIdentifier(System.Object,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Provides the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <param name="eComponent">The e component.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ProvideObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetRootNodes">
            <summary>Gets the root nodes.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetRootNodes
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetComponentInfo(System.Guid)">
            <summary>
            
            </summary>
            <param name="regId"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.InfraModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.InfraModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:KayMcCormick.Dev.InstanceInfo">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for InstanceInfo
        </member>
        <member name="M:KayMcCormick.Dev.InstanceInfo.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.InstanceInfo.#ctor(System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.InstanceInfo.Instance">
            <summary>Gets or sets the instance.</summary>
            <value>The instance.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Instance
        </member>
        <member name="P:KayMcCormick.Dev.InstanceInfo.Parameters">
            <summary>Gets or sets the parameters.</summary>
            <value>The parameters.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Parameters
        </member>
        <member name="T:KayMcCormick.Dev.LoggingAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.LoggingAttribute.Apply(KayMcCormick.Dev.LoggingAttributeContext)">
            <summary>Applies the specified context.</summary>
            <param name="context">The context.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Apply
        </member>
        <member name="T:KayMcCormick.Dev.LoggingAttributeContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.LoggingAttributeContext.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.LoggingAttributeContext.RuleMatch(NLog.Config.LoggingRule)">
            <summary>
            
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.LoggingRuleAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.LoggingRuleAttribute.ClassLoggerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.LoggingRuleAttribute.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.LoggingRuleAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="classLoggerType"></param>
            <param name="logLevel"></param>
        </member>
        <member name="M:KayMcCormick.Dev.LoggingRuleAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="logLevel"></param>
        </member>
        <member name="P:KayMcCormick.Dev.LoggingRuleAttribute.LoggerNamePattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.LoggingRuleAttribute.Apply(KayMcCormick.Dev.LoggingAttributeContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.AppLoggingConfigHelper">
            <summary>Static class containing logging configuration methods</summary>
            <seealso cref="T:NLog.Config.LoggingConfiguration" />
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.Writer">
            <summary>The string writer</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for StringWriter
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ServiceTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DebuggerTargetEnabled">
            <summary>Gets or sets a value indicating whether [debugger target enabled].</summary>
            <value>
              <see language="true"/> if [debugger target enabled]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebuggerTargetEnabled
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.LoggingIsConfigured">
            <summary>Gets or sets a value indicating whether [logging is configured].</summary>
            <value>
              <see language="true"/> if [logging is configured]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggingIsConfigured
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DumpExistingConfig">
            <summary>Gets or sets a value indicating whether [dump existing configuration].</summary>
            <value>
              <see language="true"/> if [dump existing configuration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DumpExistingConfig
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ForceCodeConfig">
            <summary>Gets or sets a value indicating whether [force code configuration].</summary>
            <value>
              <see language="true"/> if [force code configuration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ForceCodeConfig
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.JsonFileTarget">
            <summary>JSON File Target</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for JsonFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.MyFileTarget">
            <summary>My File Target.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.RemoveTarget(NLog.Targets.Target)">
            <summary>Removes the target.</summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">target</exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for RemoveTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.EnsureLoggingConfigured(KayMcCormick.Dev.Logging.LogDelegates.LogMethod,KayMcCormick.Dev.Logging.ILoggingConfiguration,System.String)">
            <summary>Ensures the logging configured.</summary>
            <param name="logMethod">The log method.</param>
            <param name="config1"></param>
            <param name="callerFilePath">The caller file path.</param>
            <exception cref="T:System.Exception">no config loaded field found</exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for EnsureLoggingConfigured
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DoDumpConfig(System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="collect"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.AddTarget(NLog.Targets.Target,NLog.LogLevel)">
            <summary>Adds the supplied target to the current NLog configuration.</summary>
            <param name="target">The target.</param>
            <param name="minLevel"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.RemoveTarget(System.String)">
            <summary>Removes a target by name from the current NLog configuration.</summary>
            <param name="name">The name of the target to remove.</param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.SetupJsonLayout">
            <summary>Set up a <seealso cref="T:NLog.Layouts.JsonLayout"/> for json loggers.</summary>
            <returns>Configured JSON layout</returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.AddRule(NLog.Config.LoggingRule)">
            <summary>
            
            </summary>
            <param name="rule2"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyJsonLayout">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyJsonLayout.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyJsonLayout.Options">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyJsonLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.JsonTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.JsonTypeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.JsonTypeConverter.Write(System.Text.Json.Utf8JsonWriter,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogEventInfoConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogEventInfoConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogEventInfoConverter.Write(System.Text.Json.Utf8JsonWriter,NLog.LogEventInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.DictConverterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.DictConverterFactory.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.DictConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.DictConverterFactory.Inner">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.AppLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledConsoleTarget">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.CodeConfiguration">
            <summary></summary>
            <seealso cref="T:NLog.Config.LoggingConfiguration" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for CodeConfiguration
        </member>
        <member name="M:KayMcCormick.Dev.Logging.CodeConfiguration.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.CodeConfiguration.#ctor(NLog.LogFactory)">
            <summary>
                Initializes a new instance of the
                <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.ILoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledConsoleTarget">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogDelegates
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates.LogMethod">
            <summary></summary>
            <param name="message">The message.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogMethod
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates.LogMethod2">
            <summary></summary>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogMethod2
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogFactoryInterceptor">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFactoryInterceptor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogFactoryInterceptor.#ctor(Castle.DynamicProxy.ProxyGenerator,KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LogFactoryInterceptor"/> class.</summary>
            <param name="generator">The generator.</param>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogFactoryInterceptor.Generator">
            <summary>Gets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogFactoryInterceptor.UseLogMethod">
            <summary>Gets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogFactoryInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>Intercepts the specified invocation.</summary>
            <param name="invocation">The invocation.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Intercept
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerFactoryHook">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IProxyGenerationHook" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerFactoryHook
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LoggerFactoryHook"/> class.</summary>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.MethodsInspected">
            <summary>
                Invoked by the generation process to notify that the whole process has
                completed.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
                Invoked by the generation process to notify that a member was not marked
                as
                virtual.
            </summary>
            <param name="type">The type which declares the non-virtual member.</param>
            <param name="memberInfo">The non-virtual member.</param>
            <remarks>
                This method gives an opportunity to inspect any non-proxy able member of
                a
                type that has
                been requested to be proxied, and if appropriate - throw an exception to
                notify the caller.
            </remarks>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
                Invoked by the generation process to determine if the specified method
                should be proxied.
            </summary>
            <param name="type">The type which declares the given method.</param>
            <param name="methodInfo">The method to inspect.</param>
            <returns>True if the given method should be proxied; false otherwise.</returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerInterceptor">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerInterceptor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerInterceptor.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
                Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LoggerInterceptor" />
                class.
            </summary>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerInterceptor.UseLogMethod">
            <summary>Gets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>Intercepts the specified invocation.</summary>
            <param name="invocation">The invocation.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Intercept
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerProxyHelper">
            <summary>Attempt to hook into NLog and fix it up for my application.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerProxyHelper
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.#ctor(Castle.DynamicProxy.ProxyGenerator)">
            <summary>
                Initializes a new instance of the
                <see
                    cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.#ctor(Castle.DynamicProxy.ProxyGenerator,KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerProxyHelper.Generator">
            <summary>Gets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerProxyHelper.UseLogMethod">
            <summary>Gets or sets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.CreateLogFactory(NLog.LogFactory)">
            <summary>Creates the log factory.</summary>
            <param name="logFactory">The log factory.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for CreateLogFactory
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyLogFactory">
            <summary></summary>
            <seealso cref="T:NLog.LogFactory" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyLogFactory
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyLogFactory.DoLogMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogFactory.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NLog.LogFactory"/>
              class.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogFactory.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.MyLogFactory"/> class.</summary>
            <param name="doLogMessage">The do log message.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="T:KayMcCormick.Dev.MyCacheTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.Target" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyCacheTarget
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget.#ctor">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.MyCacheTarget"/> class.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget.GetInstance(System.Int32)">
            <summary>
                If there is no target in NLog.config defined a new one is registered
                with
                the default maxCount
            </summary>
            <param name="defaultMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget.Write(NLog.LogEventInfo)">
            <summary>Writes logging event to the log target. Must be overridden in inheriting
            classes.</summary>
            <param name="logEvent">Logging event to be written out.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Write
        </member>
        <member name="P:KayMcCormick.Dev.MyCacheTarget.MaxCount">
            <summary>
                The maximum amount of entries held
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.MyCacheTarget.Cache">
            <summary>Gets the cache.</summary>
            <value>The cache.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Cache
        </member>
        <member name="T:KayMcCormick.Dev.MyCacheTarget2">
            <summary></summary>
            <seealso cref="T:NLog.Targets.Target" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyCacheTarget
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.MyCacheTarget2"/> class.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget2.GetInstance(System.Int32)">
            <summary>
                If there is no target in NLog.config defined a new one is registered
                with
                the default maxCount
            </summary>
            <param name="defaultMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.MyCacheTarget2.Write(NLog.LogEventInfo)">
            <summary>Writes logging event to the log target. Must be overridden in inheriting
            classes.</summary>
            <param name="logEvent">Logging event to be written out.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Write
        </member>
        <member name="P:KayMcCormick.Dev.MyCacheTarget2.MaxCount">
            <summary>
                The maximum amount of entries held
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.MyCacheTarget2.Cache">
            <summary>Gets the cache.</summary>
            <value>The cache.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Cache
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute">
            <summary></summary>
            <seealso cref="T:Xunit.Sdk.BeforeAfterTestAttribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for BeforeAfterLoggerAttribute
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.TestLoggingRule">
            <summary>Gets or sets the test logging rule.</summary>
            <value>The test logging rule.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestLoggingRule
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.TestFileTarget">
            <summary>Gets or sets the test file target.</summary>
            <value>The test file target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.After(System.Reflection.MethodInfo)">
            <summary>
                This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
                This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.FixtureLogger">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for FixtureLogger
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureLifecycleEvent(System.Type,KayMcCormick.Dev.TestLib.Lifecycle)">
            <summary></summary>
            <param name="fixtureType"></param>
            <param name="lifecycle"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureLifecycleEvent
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureFinalizedLifecycleEvent(System.Type)">
            <summary>Logs the fixture finalized lifecycle event.</summary>
            <param name="fixtureType">Type of the fixture.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureFinalizedLifecycleEvent
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureCreatedLifecycleEvent(System.Type)">
            <summary>Logs the fixture created lifecycle event.</summary>
            <param name="fixtureType">Type of the fixture.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureCreatedLifecycleEvent
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture">
            <summary>Test fixture to supply logging through the IMessageSink available to infrastructure types in Xunit.</summary>
            <autogeneratedoc />
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.InitializeAsync">
            <summary>
            Called immediately after the class has been created, before it is used.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.DisposeAsync">
            <summary>
            Called when an object is no longer needed. Called just before <see cref="M:System.IDisposable.Dispose"/>
            if the class also implements that.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture">
            <summary>Test fixture to provide logging for the individual test case. In order to use, the individual test class must be tagged with the <seealso cref="T:Xunit.IClassFixture`1"/>. Method <seealso cref="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.SetOutputHelper(Xunit.Abstractions.ITestOutputHelper,System.Object,NLog.LogLevel)"/> must be invoked with the <seealso cref="T:Xunit.Abstractions.ITestOutputHelper"/> instance supplied by Xunit through the class constructor.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.SetOutputHelper(Xunit.Abstractions.ITestOutputHelper,System.Object,NLog.LogLevel)">
            <summary>Sets the output helper.</summary>
            <param name="value">The value.</param>
            <param name="testClass"></param>
            <param name="minLogLevel"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for SetOutputHelper
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.Layout">
            <summary>Gets or sets the layout used to format log messages.</summary>
            <remarks>
            The default value of the layout is: <v>${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}</v>
            </remarks>
            <docgen category="Layout Options" order="1" />
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Lifecycle">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Lifecycle
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.Lifecycle.Created">
            <summary>The created</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Created
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.Lifecycle.Finalized">
            <summary>The finalized</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Finalized
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.TargetWithLayout" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for XunitSinkTarget
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget.#ctor(System.String,Xunit.Abstractions.IMessageSink)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget"/> class.</summary>
            <param name="name">The name.</param>
            <param name="sink"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget.Write(NLog.LogEventInfo)">
            <summary>
                Writes logging event to the log target. Must be overridden in inheriting
                classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Logging.XunitTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.TargetWithLayout" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for XunitTarget
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.Logging.XunitTarget.OutputHelper">
            <summary>Gets or sets the output helper.</summary>
            <value>The output helper.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for OutputHelper
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitTarget.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.TestLib.Logging.XunitTarget"/> class.</summary>
            <param name="name">The name.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitTarget.Write(NLog.LogEventInfo)">
            <summary>
                Writes logging event to the log target. Must be overridden in inheriting
                classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.LogHelper">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogHelper
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogHelper.EnsureLoggingConfigured(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            
            </summary>
            <param name="param1"></param>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogHelper.TestMethodProperties(System.Reflection.MethodInfo,KayMcCormick.Dev.TestLib.TestMethodLifecycle)">
            <summary>Supplied structured logging properties for a particular test method indicated by method.. Supplied properties "TestMethodName", "TestClass",</summary>
            <param name="method">The method.</param>
            <param name="stage">The stage.</param>
            <returns></returns>
            Return a dictionary with keys
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestMethodProperties
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.LogTestMethodAttribute">
            <summary></summary>
            <seealso cref="T:Xunit.Sdk.BeforeAfterTestAttribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogTestMethodAttribute
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.After(System.Reflection.MethodInfo)">
            <summary>
                This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
                This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.TestMethodLifecycle">
            <summary>Indicates the lifecycle state for a test method.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestMethodLifecycle
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.TestMethodLifecycle.Before">
            <summary>The before</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Before
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.TestMethodLifecycle.After">
            <summary>The after</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for After
        </member>
        <member name="T:KayMcCormick.Dev.UnableToRegisterObjectIdException">
            <summary></summary>
            <seealso cref="T:System.Exception" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for UnableToRegisterObjectIdException
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:KayMcCormick.Dev.Utils">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.HandleInnerExceptions(System.Exception,NLog.LogLevel,NLog.Logger)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="level"></param>
            <param name="logger"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.PerformLogConfigDump(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="out"></param>
        </member>
        <member name="T:KayMcCormick.Logging.Common.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:KayMcCormick.Logging.Common.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Logging.Common.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Logging.Common.Properties.Resource.AppLoggingConfigHelper_ConfigureLogging_____Starting_logger_configuration_">
            <summary>
              Looks up a localized string similar to *** Starting logger configuration..
            </summary>
        </member>
    </members>
</doc>
