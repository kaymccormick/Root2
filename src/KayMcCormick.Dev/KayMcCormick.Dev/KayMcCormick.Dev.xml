<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KayMcCormick.Dev</name>
    </assembly>
    <members>
        <member name="T:KayMcCormick.Dev.Attributes.PushContextAttribute">
            <summary></summary>
            <seealso cref="T:System.Attribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for PushContextAttribute
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.PushContextAttribute.#ctor(System.Object)">
            <summary>
                Initializes a new instance of the
                <see cref="T:KayMcCormick.Dev.Attributes.PushContextAttribute" /> class.
            </summary>
            <param name="context">The context.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.PushContextAttribute.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the
                <see cref="T:KayMcCormick.Dev.Attributes.PushContextAttribute" /> class.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.Attributes.PushContextAttribute.Context">
            <summary>Gets the context.</summary>
            <value>The context.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Context
        </member>
        <member name="P:KayMcCormick.Dev.Attributes.PushContextAttribute.Instances">
            <summary>Gets or sets the instances.</summary>
            <value>The instances.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Instances
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.PushContextAttribute.After(System.Reflection.MethodInfo)">
            <summary>
                This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.PushContextAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
                This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:KayMcCormick.Dev.Attributes.TitleMetadataAttribute">
            <summary>
            Metadata atttribute to indicate the title of a component or command. Intended for user dusplay. Right now is transferred from views to menu commands.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Attributes.TitleMetadataAttribute.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.TitleMetadataAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="title"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Attributes.ClearLoggingRulesAttribute">
            <summary>
            Clear all logging rules attribute
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.ClearLoggingRulesAttribute.Apply(KayMcCormick.Dev.Logging.LoggingAttributeContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Attributes.ConfigTargetAttribute">
             <summary></summary>
             <seealso cref="T:System.Attribute" />
             <autogeneratedoc />
             TODO Edit XML Comment Template for ConfigTargetAttribute
            
        </member>
        <member name="M:KayMcCormick.Dev.Attributes.ConfigTargetAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Attributes.ConfigTargetAttribute"/> class.</summary>
            <param name="targetType"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Attributes.ConfigTargetAttribute.TargetType">
            <summary>Gets or sets the type of the target.</summary>
            <value>The type of the target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TargetType
        </member>
        <member name="T:KayMcCormick.Dev.Attributes.ContextStackInstanceAttribute">
            <summary></summary>
            <seealso cref="T:System.Attribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for ContextStackInstanceAttribute
        </member>
        <member name="T:KayMcCormick.Dev.Attributes.InfoContextFactoryAttribute">
            <summary></summary>
            <seealso cref="T:System.Attribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for InfoContextFactoryAttribute
        </member>
        <member name="T:KayMcCormick.Dev.Configuration.ConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.Configuration.ConfigurationSource.AppConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.Configuration.ConfigurationSource.EnvironmentVariable">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.Configuration.ConfigurationSource.Win32Registry">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.Configuration.ConfigurationSource.Compilation">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Configuration.ContainerHelperSection">
            <summary>Configuration section handler for container helper settings.</summary>
            <seealso cref="T:System.Configuration.ConfigurationSection" />
        </member>
        <member name="P:KayMcCormick.Dev.Configuration.ContainerHelperSection.DoInterception">
            <summary>Gets or sets a value indicating whether [do interception].</summary>
            <value>
              <see language="true"/> if [do interception]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DoInterception
        </member>
        <member name="P:KayMcCormick.Dev.Configuration.ContainerHelperSection.DoTraceConditionalRegistration">
            <summary>Gets or sets a value indicating whether [do trace conditional registration].</summary>
            <value>
              <see language="true"/> if [do trace conditional registration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DoTraceConditionalRegistration
        </member>
        <member name="T:KayMcCormick.Dev.Configuration.ContainerHelperSettings">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ContainerHelperSettings
        </member>
        <member name="P:KayMcCormick.Dev.Configuration.ContainerHelperSettings.DoInterception">
            <summary>Gets or sets a value indicating whether [do interception].</summary>
            <value>
              <see language="1"/> if [do interception]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DoInterception
        </member>
        <member name="P:KayMcCormick.Dev.Configuration.ContainerHelperSettings.DoTraceConditionalRegistration">
            <summary>Gets or sets a value indicating whether [do trace conditional registration].</summary>
            <value>
              <see language="1"/> if [do trace conditional registration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DoTraceConditionalRegistration
        </member>
        <member name="M:KayMcCormick.Dev.Configuration.ContainerHelperSettings.ApplySettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.ExecutionContextImpl">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.ExecutionContextImpl.#ctor(KayMcCormick.Dev.Logging.Application)">
            <summary>
            
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LegacyAppBuildModule">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ContainerHelper
        </member>
        <member name="F:KayMcCormick.Dev.Logging.LegacyAppBuildModule.AssembliesForScanningProperty">
            <summary>The assemblies for scanning property</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for AssembliesForScanningProperty
        </member>
        <member name="F:KayMcCormick.Dev.Logging.LegacyAppBuildModule.InterceptProperty">
            <summary>Property name used to propagate the value of <see cref="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.DoInterception"/>.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.DoInterception">
            <summary>Gets or sets a value indicating whether install interceptors for built objects.</summary>
            <value>
              <see language="true"/> to perform interception; otherwise, <see language="false"/>.</value>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.DoTraceConditionalRegistration">
            <summary>
                Gets or sets a value indicating whether to trace conditional
                registration.
            </summary>
            <value>
                <see language="true"/> to trace conditional registration; otherwise,
                <see language="false"/>.
            </value>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.DoProxyBuilder">
            <summary>Gets or sets a value indicating whether to proxy the ContainerBuilder.</summary>
            <value>
                <see language="true"/> to proxy builder; otherwise, <see language="false"/>.
            </value>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.GetAssembliesForScanning">
            <summary>Gets the assemblies for scanning.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetAssembliesForScanning
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.GetAssembliesViaReferences">
            <summary>Gets or sets a value indicating whether [get assemblies via references].</summary>
            <value>
              <see language="true"/> if [get assemblies via references]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetAssembliesViaReferences
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.GetAssembliesForScanningByReferences">
            <summary>Gets the assemblies for scanning.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetAssembliesForScanning
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.GetAssembliesForScanningViaTypes">
            <summary>Gets the assemblies for scanning via types.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetAssembliesForScanningViaTypes
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.Dump(Autofac.Core.IComponentRegistration,System.Collections.Generic.HashSet{System.Object},System.Action{System.String})">
            <summary>Dumps the specified component registry registration.</summary>
            <param name="componentRegistryRegistration">
                The component registry
                registration.
            </param>
            <param name="seenObjects">The seen objects.</param>
            <param name="outFunc">The out function.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Dump
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LegacyAppBuildModule.IdGeneratorModule">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.IdGeneratorModule.DefaultObject">
            <summary>Gets or sets the default object.</summary>
            <value>The default object.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DefaultObject
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LegacyAppBuildModule.IdGeneratorModule.Generator">
            <summary>Gets or sets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.IdGeneratorModule.Load(Autofac.ContainerBuilder)">
            <summary>Override to add registrations to the container.</summary>
            <remarks>
                Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
            <param name="builder">
                The builder through which components can be
                registered.
            </param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LegacyAppBuildModule.IdGeneratorModule.AttachToComponentRegistration(Autofac.Core.Registration.IComponentRegistryBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
                Override to attach module-specific functionality to a
                component registration.
            </summary>
            <remarks>
                This method will be called for all existing <i>and future</i> component
                registrations - ordering is not important.
            </remarks>
            <param name="componentRegistry">The component registry.</param>
            <param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogEventInstanceObservableCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.AppFileTarget">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppFileTarget.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.DictConverterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.DictConverterFactory.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.DictConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.DictConverterFactory.Inner">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyCacheTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.Target" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyCacheTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget.#ctor">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.MyCacheTarget"/> class.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget.GetInstance(System.Int32)">
            <summary>
                If there is no target in NLog.config defined a new one is registered
                with
                the default maxCount
            </summary>
            <param name="defaultMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget.Write(NLog.LogEventInfo)">
            <summary>Writes logging event to the log target. Must be overridden in inheriting
            classes.</summary>
            <param name="logEvent">Logging event to be written out.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Write
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyCacheTarget.MaxCount">
            <summary>
                The maximum amount of entries held
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyCacheTarget.Cache">
            <summary>Gets the cache.</summary>
            <value>The cache.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Cache
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogEventInstance">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.Level">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.LoggerName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.FormattedMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.CallerClassName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.UnknownFields">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.TimeStamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.SequenceID">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.SerializedForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.ProcessId">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.ManagedThreadId">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.ThreadName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.CurrentTaskId">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.GDC">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.MDLC">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.CallerLineNumber">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.CallerFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.CallerMemberName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInstance.ExceptionString">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogEventInstance.AddUnknown(System.String,System.Text.Json.JsonElement@)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="elem"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogEventInstance.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerEventArgs">
            <summary></summary>
            <seealso cref="T:System.EventArgs" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerEventArgs
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerEventArgs.#ctor(NLog.ILogger)">
            <summary>
                Initializes a new instance of the <see cref="T:System.EventArgs" />
                class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerEventArgs.Logger">
            <summary>Gets the logger.</summary>
            <value>The logger.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Logger
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerSettings">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerSettings
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.IsEnabledConsoleTarget">
            <summary>Gets or sets the is enabled console target.</summary>
            <value>The is enabled console target.</value>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.IsEnabledEventLogTarget">
            <summary>Gets or sets the is enabled event log target.</summary>
            <value>The is enabled event log target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IsEnabledEventLogTarget
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.IsEnabledCacheTarget">
            <summary>Gets or sets the is enabled cache target.</summary>
            <value>The is enabled cache target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IsEnabledCacheTarget
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.MinLogLevel">
            <summary>Gets or sets the minimum log level.</summary>
            <value>The minimum log level.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for MinLogLevel
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.IsEnabledDebuggerTarget">
            <summary>Gets or sets the is enabled debugger target.</summary>
            <value>The is enabled debugger target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IsEnabledDebuggerTarget
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.DebuggerTargetName">
            <summary>Gets or sets the name of the debugger target.</summary>
            <value>The name of the debugger target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebuggerTargetName
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.NLogViewerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.ChainsawPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.LogThrowExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerSettings.IsEnabledXmlFileTarget">
            <summary>
            Config variable to enavble the XML File target.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerTracker">
            <summary></summary>
            <seealso cref="T:KayMcCormick.Dev.AppBuild.ILoggerTracker" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerTracker
        </member>
        <member name="F:KayMcCormick.Dev.Logging.LoggerTracker._Logger">
            <summary>The logger</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for _Logger
        </member>
        <member name="F:KayMcCormick.Dev.Logging.LoggerTracker._loggers">
            <summary>The loggers</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for loggers
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerTracker.Logger">
            <summary>Gets the logger.</summary>
            <value>The logger.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Logger
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerTracker.TrackLogger(System.String,NLog.ILogger)">
            <summary>Tracks the logger.</summary>
            <param name="loggerName">Name of the logger.</param>
            <param name="logger">The logger.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TrackLogger
        </member>
        <member name="E:KayMcCormick.Dev.Logging.LoggerTracker.LoggerRegistered">
            <summary>Occurs when [logger registered].</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerRegistered
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerTracker.OnLoggerRegistered(KayMcCormick.Dev.Logging.LoggerEventArgs)">
            <summary>Raises the <see cref="E:KayMcCormick.Dev.Logging.LoggerTracker.LoggerRegistered"/> event.</summary>
            <param name="args">
                The <see cref="T:KayMcCormick.Dev.Logging.LoggerEventArgs" /> instance containing
                the event data.
            </param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for OnLoggerRegistered
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerRegisteredEventHandler">
            <summary></summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:KayMcCormick.Dev.Logging.LoggerEventArgs"/> instance containing the event data.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerRegisteredEventHandler
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggingInterceptor">
            <summary>DynamicProxy interceptor to inject a logger into classes. TODO refactor.</summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>Intercepts the specified invocation.</summary>
            <param name="invocation">The invocation.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Intercept
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggingAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingAttribute.Apply(KayMcCormick.Dev.Logging.LoggingAttributeContext)">
            <summary>Applies the specified context.</summary>
            <param name="context">The context.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Apply
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggingAttributeContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingAttributeContext.Target">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingAttributeContext.RuleMatch(NLog.Config.LoggingRule)">
            <summary>
            
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggingRuleAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingRuleAttribute.ClassLoggerType">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingRuleAttribute.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingRuleAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="classLoggerType"></param>
            <param name="logLevel"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingRuleAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <param name="logLevel"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingRuleAttribute.LoggerNamePattern">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggingRuleAttribute.Apply(KayMcCormick.Dev.Logging.LoggingAttributeContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggingSection">
            <summary>Configuration section handler for container helper settings.</summary>
            <seealso cref="T:System.Configuration.ConfigurationSection" />
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingSection.IsEnabledConsoleTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingSection.IsEnabledCacheTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingSection.LogThrowExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggingSection.MinLogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.AppLoggingConfigHelper">
            <summary>Static class containing logging configuration methods</summary>
            <seealso cref="T:NLog.Config.LoggingConfiguration" />
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.Writer">
            <summary>The string writer</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for StringWriter
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ServiceTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.LoggingIsConfigured">
            <summary>Gets or sets a value indicating whether [logging is configured].</summary>
            <value>
              <see language="true"/> if [logging is configured]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggingIsConfigured
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DumpExistingConfig">
            <summary>Gets or sets a value indicating whether [dump existing configuration].</summary>
            <value>
              <see language="true"/> if [dump existing configuration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DumpExistingConfig
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ForceCodeConfig">
            <summary>Gets or sets a value indicating whether [force code configuration].</summary>
            <value>
              <see language="true"/> if [force code configuration]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ForceCodeConfig
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ConsoleTargetName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.EventLogTargetName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.CacheTarget2">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.UdpClient">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.IpEndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.XmlEventLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.ProtoLogDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DisableLoggingEnvVar">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.Performant">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.JsonFileTarget">
            <summary>JSON File Target</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for JsonFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.MyFileTarget">
            <summary>My File Target.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.RemoveTarget(NLog.Targets.Target)">
            <summary>Removes the target.</summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">target</exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for RemoveTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.EnsureLoggingConfigured(KayMcCormick.Dev.Logging.LogDelegates.LogMethod,KayMcCormick.Dev.Logging.ILoggingConfiguration,System.String)">
            <summary>Ensures the logging configured.</summary>
            <param name="slogMethod"></param>
            <param name="config1"></param>
            <param name="callerFilePath">The caller file path.</param>
            <exception cref="T:System.Exception">no config loaded field found</exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for EnsureLoggingConfigured
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.DoDumpConfig(System.Action{System.String})">
            <summary>
            
            </summary>
            <param name="collect"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.AddTarget(NLog.Targets.Target,NLog.LogLevel,System.Boolean)">
            <summary>Adds the supplied target to the current NLog configuration.</summary>
            <param name="target">The target.</param>
            <param name="minLevel"></param>
            <param name="addRules"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.RemoveTarget(System.String)">
            <summary>Removes a target by name from the current NLog configuration.</summary>
            <param name="name">The name of the target to remove.</param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.SetupJsonLayout">
            <summary>Set up a <seealso cref="T:NLog.Layouts.JsonLayout"/> for json loggers.</summary>
            <returns>Configured JSON layout</returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.AddRule(NLog.Config.LoggingRule)">
            <summary>
            
            </summary>
            <param name="rule2"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfigHelper.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.AppLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledConsoleTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledEventLogTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledCacheTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledDebuggerTarget">
            <summary>Gets or sets the is enabled debugger target.</summary>
            <value>The is enabled debugger target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IsEnabledDebuggerTarget
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.DebuggerTargetName">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.NLogViewerPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.ChainsawPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.LogThrowExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.IsEnabledXmlFileTarget">
            <summary>
            Enavle the xml File target
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.MinLogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.AppLoggingConfiguration.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.AppLoggingConfiguration.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.CodeConfiguration">
            <summary></summary>
            <seealso cref="T:NLog.Config.LoggingConfiguration" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for CodeConfiguration
        </member>
        <member name="M:KayMcCormick.Dev.Logging.CodeConfiguration.#ctor">
            <summary>
                Initializes a new instance of the
                <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.CodeConfiguration.#ctor(NLog.LogFactory)">
            <summary>
                Initializes a new instance of the
                <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.ExecutionContext">
            <summary>
            Execution context of application.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ExecutionContext.Application">
            <summary>
            Application execution context.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.ILoggingConfiguration">
            <summary>
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledConsoleTarget">
            <summary>
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledEventLogTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledCacheTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.MinLogLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledDebuggerTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.DebuggerTargetName">
            <summary>
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.NLogViewerPort">
            <summary>
            NLog viewer port
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.ChainsawPort">
            <summary>
            Chainsaw port
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.LogThrowExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.ILoggingConfiguration.IsEnabledXmlFileTarget">
            <summary>
            Enable XML File target
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogConfigurationException">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogConfigurationException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogConfigurationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogDelegates
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates.LogMethod">
            <summary></summary>
            <param name="message">The message.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogMethod
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogDelegates.LogMethod2">
            <summary></summary>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogMethod2
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogEventInfo2">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogEventInfo2.SequenceID">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.JsonConverterLogEventInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.JsonConverterLogEventInfo.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.JsonConverterLogEventInfo.Write(System.Text.Json.Utf8JsonWriter,NLog.LogEventInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogFactoryInterceptor">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFactoryInterceptor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogFactoryInterceptor.#ctor(Castle.DynamicProxy.ProxyGenerator,KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LogFactoryInterceptor"/> class.</summary>
            <param name="generator">The generator.</param>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogFactoryInterceptor.Generator">
            <summary>Gets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LogFactoryInterceptor.UseLogMethod">
            <summary>Gets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogFactoryInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>Intercepts the specified invocation.</summary>
            <param name="invocation">The invocation.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Intercept
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerFactoryHook">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IProxyGenerationHook" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerFactoryHook
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LoggerFactoryHook"/> class.</summary>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.MethodsInspected">
            <summary>
                Invoked by the generation process to notify that the whole process has
                completed.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
                Invoked by the generation process to notify that a member was not marked
                as
                virtual.
            </summary>
            <param name="type">The type which declares the non-virtual member.</param>
            <param name="memberInfo">The non-virtual member.</param>
            <remarks>
                This method gives an opportunity to inspect any non-proxy able member of
                a
                type that has
                been requested to be proxied, and if appropriate - throw an exception to
                notify the caller.
            </remarks>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerFactoryHook.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
                Invoked by the generation process to determine if the specified method
                should be proxied.
            </summary>
            <param name="type">The type which declares the given method.</param>
            <param name="methodInfo">The method to inspect.</param>
            <returns>True if the given method should be proxied; false otherwise.</returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerInterceptor">
            <summary></summary>
            <seealso cref="T:Castle.DynamicProxy.IInterceptor" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerInterceptor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerInterceptor.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
                Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.LoggerInterceptor" />
                class.
            </summary>
            <param name="useLogMethod">The use log method.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerInterceptor.UseLogMethod">
            <summary>Gets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>Intercepts the specified invocation.</summary>
            <param name="invocation">The invocation.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Intercept
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LoggerProxyHelper">
            <summary>Attempt to hook into NLog and fix it up for my application.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerProxyHelper
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.#ctor(Castle.DynamicProxy.ProxyGenerator)">
            <summary>
                Initializes a new instance of the
                <see
                    cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.#ctor(Castle.DynamicProxy.ProxyGenerator,KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerProxyHelper.Generator">
            <summary>Gets the generator.</summary>
            <value>The generator.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Generator
        </member>
        <member name="P:KayMcCormick.Dev.Logging.LoggerProxyHelper.UseLogMethod">
            <summary>Gets or sets the use log method.</summary>
            <value>The use log method.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for UseLogMethod
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LoggerProxyHelper.CreateLogFactory(NLog.LogFactory)">
            <summary>Creates the log factory.</summary>
            <param name="logFactory">The log factory.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for CreateLogFactory
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyJsonLayout">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyJsonLayout.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyJsonLayout.CreateJsonSerializerOptions">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyJsonLayout.Options">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyJsonLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            
            </summary>
            <param name="logEvent"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyLogFactory">
            <summary></summary>
            <seealso cref="T:NLog.LogFactory" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyLogFactory
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyLogFactory.DoLogMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogFactory.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NLog.LogFactory"/>
              class.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogFactory.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.MyLogFactory"/> class.</summary>
            <param name="doLogMessage">The do log message.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogger.OnLoggerReconfigured(System.EventArgs)">
            <summary>Raises the event when the logger is reconfigured.</summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyLogger.#ctor">
            <summary>
            Random test constructor.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.Application">
            <summary>
            Enumeration
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.Logging.Application.MainApplication">
            <summary>
            Application 
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.LogLevelConverter">
            <summary>
            NLog.LogLevel converter for  System.Text.JSON.
            Converts the log level to a string and for writing and vicee versa for reading.
            Current format used orginal log levels output.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogLevelConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read implementation
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.LogLevelConverter.Write(System.Text.Json.Utf8JsonWriter,NLog.LogLevel,System.Text.Json.JsonSerializerOptions)">
            <summary>
            WRite implementation
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:KayMcCormick.Dev.Logging.MyCacheTarget2">
            <summary></summary>
            <seealso cref="T:NLog.Targets.Target" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for MyCacheTarget
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.Logging.MyCacheTarget2"/> class.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget2.GetInstance(System.Int32)">
            <summary>
                If there is no target in NLog.config defined a new one is registered
                with
                the default maxCount
            </summary>
            <param name="defaultMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Logging.MyCacheTarget2.Write(NLog.LogEventInfo)">
            <summary>Writes logging event to the log target. Must be overridden in inheriting
            classes.</summary>
            <param name="logEvent">Logging event to be written out.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Write
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyCacheTarget2.MaxCount">
            <summary>
                The maximum amount of entries held
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Logging.MyCacheTarget2.Cache">
            <summary>Gets the cache.</summary>
            <value>The cache.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Cache
        </member>
        <member name="T:KayMcCormick.Dev.AppBuild.ILoggerTracker">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ILoggerTracker
        </member>
        <member name="M:KayMcCormick.Dev.AppBuild.ILoggerTracker.TrackLogger(System.String,NLog.ILogger)">
            <summary>Tracks the logger.</summary>
            <param name="loggerName">Name of the logger.</param>
            <param name="logger">The logger.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TrackLogger
        </member>
        <member name="E:KayMcCormick.Dev.AppBuild.ILoggerTracker.LoggerRegistered">
            <summary>Occurs when [logger registered].</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LoggerRegistered
        </member>
        <member name="T:KayMcCormick.Dev.Application.ApplicationInstance">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.#ctor(KayMcCormick.Dev.Application.ApplicationInstanceConfiguration)">
            <summary>
            </summary>
            <param name="logMethod"></param>
            <param name="configs"></param>
            <param name="disableLogging"></param>
            <param name="disableRuntimeConfiguration"></param>
            <param name="disableServiceHost"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstance.Logger">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="E:KayMcCormick.Dev.Application.ApplicationInstance.AppStartup">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.AddModule(Autofac.Core.IModule)">
            <summary>
            
            </summary>
            <param name="appModule"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.GetLifetimeScope">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.BuildContainer">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.Startup">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.Shutdown">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstance.LoadConfiguration(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            </summary>
            <param name="logMethod2"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ContainerBuildException">
            <summary>
            Fatal error building container. Wraps any autofac exceptions.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ContainerBuildException.#ctor">
            <summary>
            PArameterless constructor.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ContainerBuildException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ContainerBuildException.#ctor(System.String,System.Exception)">
            <summary>
            Constructr
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ContainerBuildException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Application.NouveauAppModule">
            <summary>
            New app module to replace crussty old app module. Work in progress.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.NouveauAppModule.DoLoad(Autofac.ContainerBuilder)">
            <summary>
            Our fun custom load method that is public.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ParsedExceptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ParsedExceptions.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ParsedExceptions.ParsedList">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ParsedStackInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ParsedStackInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ParsedStackInfo.#ctor(System.Collections.Generic.IEnumerable{KayMcCormick.Dev.StackTrace.StackTraceEntry},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="parsed"></param>
            <param name="typeName"></param>
            <param name="exMessage"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ParsedStackInfo.StackTraceEntries">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ParsedStackInfo.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ParsedStackInfo.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ApplicationInstanceBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            </summary>
            <param name="logMethod"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceBase.InstanceRunGuid">
            <summary>
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceBase.ConfigSettings">
            <summary>
            </summary>
        </member>
        <member name="E:KayMcCormick.Dev.Application.ApplicationInstanceBase.AppStartup">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.AddModule(Autofac.Core.IModule)">
            <summary>
            </summary>
            <param name="appModule"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.GetLifetimeScope">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.BuildContainer">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.Startup">
            <summary>
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.OnAppStartup(KayMcCormick.Dev.Application.AppStartupEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.Shutdown">
            <summary>
            </summary>
            todo call from wpf
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.LoadConfiguration(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            </summary>
            <param name="logMethod2"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceBase.Dispose">
            <summary>
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod,System.Collections.IEnumerable,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="logMethod"></param>
            <param name="configs"></param>
            <param name="disableLogging"></param>
            <param name="disableRuntimeConfiguration"></param>
            <param name="disableServiceHost"></param>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.LogMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.Configs">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.DisableLogging">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.DisableRuntimeConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Application.ApplicationInstanceConfiguration.DisableServiceHost">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Application.ApplicationInstanceHost">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceHost.#ctor(Autofac.IContainer)">
            <summary>
            
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceHost.HostOpen">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Application.ApplicationInstanceHost.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Application.AppStartupEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.AttributeNotFoundException">
            <summary></summary>
            <seealso cref="T:System.Exception" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for AttributeNotFoundException
        </member>
        <member name="M:KayMcCormick.Dev.AttributeNotFoundException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.AttributeNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:KayMcCormick.Dev.AttributeNotFoundException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:KayMcCormick.Dev.AttributeNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="P:KayMcCormick.Dev.AttributeNotFoundException.AttributeName">
            <summary>Gets the name of the attribute.</summary>
            <value>The name of the attribute.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for AttributeName
        </member>
        <member name="T:KayMcCormick.Dev.IViewWithTitle">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.IViewWithTitle.ViewTitle">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.IView1">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.ComponentInfo">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ComponentInfo
        </member>
        <member name="P:KayMcCormick.Dev.ComponentInfo.Instances">
            <summary>Gets the instances.</summary>
            <value>The instances.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Instances
        </member>
        <member name="T:KayMcCormick.Dev.ConfigurationSetting">
            <summary>
            
            </summary>
        </member>
        <member name="F:KayMcCormick.Dev.ConfigurationSetting.LogsRootDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.IConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.IConfiguration.LoadConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.ContextStack`1">
            <summary></summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Collections.Generic.Stack`1" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for ContextStack`1
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.#ctor">
            <summary>
                Initializes a new instance of the
                System.Collections.Generic.Stack`1 class that is empty
                and
                has the default initial capacity.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the
                System.Collections.Generic.Stack`1 class that is empty
                and
                has the default initial capacity.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the
                System.Collections.Generic.Stack`1 class that is empty
                and
                has the specified initial capacity or the default initial capacity,
                whichever is greater.
            </summary>
            <param name="capacity">
                The initial number of elements that the
                System.Collections.Generic.Stack`1 can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="capacity" /> is less than zero.
            </exception>
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the
                System.Collections.Generic.Stack`1 class that contains
                elements copied from the specified collection and has sufficient
                capacity
                to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection to copy elements from.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="collection" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:KayMcCormick.Dev.ContextStack`1.AllowDuplicateNames">
            <summary>Gets a value indicating whether [allow duplicate names].</summary>
            <value>
              <see language="true"/> if [allow duplicate names]; otherwise, <see language="false"/>.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for AllowDuplicateNames
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.Push(`0)">
            <summary>Inserts an object at the top of the System.Collections.Generic.Stack`1.</summary>
            <param name="item">
            The object to push onto the System.Collections.Generic.Stack`1. The value can be <span class="keyword"><span class="languageSpecificText"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span></span><span class="nu">a null reference (<span class="keyword">Nothing</span> in Visual Basic)</span> for reference types.
            </param>
            <exception cref="T:KayMcCormick.Dev.DuplicateKeyException"></exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Push
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.ToOrderedDictionary">
            <summary>Converts to ordered-dictionary.</summary>
            <returns></returns>
            <exception cref="T:KayMcCormick.Dev.DuplicateKeyException"></exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ToOrderedDictionary
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.Add(`0)">
            <summary>Adds an item to the System.Collections.Generic.ICollection`1.</summary>
            <param name="item">The object to add to the System.Collections.Generic.ICollection`1.</param>
            <exception cref="T:System.NotSupportedException">The System.Collections.Generic.ICollection`1 is read-only.</exception>
        </member>
        <member name="M:KayMcCormick.Dev.ContextStack`1.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection`1.</summary>
            <param name="item">The object to remove from the System.Collections.Generic.ICollection`1.</param>
            <returns>
            <see langword="true" /> if <paramref name="item" /> was successfully removed from the System.Collections.Generic.ICollection`1; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original System.Collections.Generic.ICollection`1.</returns>
            <exception cref="T:System.NotSupportedException">The System.Collections.Generic.ICollection`1 is read-only.</exception>
        </member>
        <member name="P:KayMcCormick.Dev.ContextStack`1.IsReadOnly">
            <summary>Gets a value indicating whether the System.Collections.Generic.ICollection`1 is read-only.</summary>
            <returns>
            <see langword="true" /> if the System.Collections.Generic.ICollection`1 is read-only; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:KayMcCormick.Dev.DataBindingTraceFilter.WpfBindingFIlter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.DataBindingTraceFilter.WpfBindingFIlter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="source"></param>
            <param name="eventType"></param>
            <param name="id"></param>
            <param name="formatOrMessage"></param>
            <param name="args"></param>
            <param name="data1"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.DebugUtils">
            <summary>Extension methods for debug output.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.DebugUtils.DebugFormat(Autofac.Core.IComponentRegistration)">
            <summary>Debugs the format.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebugFormat
        </member>
        <member name="M:KayMcCormick.Dev.DebugUtils.DebugFormat(Autofac.Core.Service)">
            <summary>Debugs the format.</summary>
            <param name="service">The service.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for DebugFormat
        </member>
        <member name="T:KayMcCormick.Dev.DefaultObjectIdProvider">
            <summary>Default implementation for object ID provider service.</summary>
            <seealso cref="T:KayMcCormick.Dev.Interfaces.IObjectIdProvider" />
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.#ctor(System.Runtime.Serialization.ObjectIDGenerator)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetInstanceByComponentRegistration(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance by component registration.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetInstanceByComponentRegistration
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetComponentInfo(System.Guid)">
            <summary>
            
            </summary>
            <param name="regId"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetInstanceCount(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance count.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetInstanceCount
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectInstances">
            <summary>Gets the object instances.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstances
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectInstanceIdentifier(System.Object)">
            <summary>Gets the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetObjectById(System.Object)">
            <summary>
                <para>
                    Gets the object by identifier.
                </para>
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.ProvideObjectInstanceIdentifier(System.Object,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
                <para>
                    Provides the object instance identifier.
                </para>
            </summary>
            <param name="instance">The instance.</param>
            <param name="eComponent">The e component.</param>
            <param name="eParameters">The e parameters.</param>
            <returns></returns>
            <exception cref="T:KayMcCormick.Dev.UnableToRegisterObjectIdException"></exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ProvideObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.DefaultObjectIdProvider.GetRootNodes">
            <summary>Gets the root nodes.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetRootNodes
        </member>
        <member name="T:KayMcCormick.Dev.DuplicateKeyException">
            <summary></summary>
            <seealso cref="T:System.Exception" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for DuplicateKeyException
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" />
                class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor(System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" />
                class with a specified error message and a reference to the inner
                exception
                that is the cause of this exception.
            </summary>
            <param name="innerException">
                The exception that is the cause of the current
                exception, or a null reference 
                if no inner exception is specified.
            </param>
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Exception" />
                class with serialized data.
            </summary>
            <param name="info">
                The
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that
                holds
                the serialized object data about the exception being thrown.
            </param>
            <param name="context">
                The
                <see cref="T:System.Runtime.Serialization.StreamingContext" /> that
                contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="info" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
                The
                class name is <see langword="null" /> or
                <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:KayMcCormick.Dev.DuplicateKeyException.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.DuplicateKeyException"/> class.</summary>
            <param name="key">The key.</param>
            <exception cref="T:System.ArgumentNullException">key</exception>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.DuplicateKeyException.Key">
            <summary>Gets the key.</summary>
            <value>The key.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Key
        </member>
        <member name="T:KayMcCormick.Dev.ExitCode">
            <summary>Exit status of application.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.Success">
            <summary>Successful exit.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.GeneralError">
            <summary>General error.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.ArgumentsError">
            <summary>Invalid arguments to application.</summary>
        </member>
        <member name="F:KayMcCormick.Dev.ExitCode.ExceptionalError">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.IHaveLogger">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IHaveLogger
        </member>
        <member name="P:KayMcCormick.Dev.IHaveLogger.Logger">
            <summary>Gets or sets the logger.</summary>
            <value>The logger.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Logger
        </member>
        <member name="T:KayMcCormick.Dev.InfoContext">
            <summary></summary>
            <seealso cref="T:System.Object" />
            <seealso cref="T:System.Object" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for InfoContext
        </member>
        <member name="T:KayMcCormick.Dev.InfoContext.Factory">
            <summary>Factory delegate for producing InfoContext objects.</summary>
            <param name="name">The name.</param>
            <param name="objectContext">The object context.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Factory
        </member>
        <member name="M:KayMcCormick.Dev.InfoContext.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.InfoContext" /> class.</summary>
            <param name="name">The name.</param>
            <param name="objectContext">The object context.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="P:KayMcCormick.Dev.InfoContext.Name">
            <summary>Gets the name.</summary>
            <value>The name.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Name
        </member>
        <member name="P:KayMcCormick.Dev.InfoContext.ObjectContext">
            <summary>Gets the object context.</summary>
            <value>The object context.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ObjectContext
        </member>
        <member name="M:KayMcCormick.Dev.InfoContext.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:KayMcCormick.Dev.InfoContext.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be
                used to iterate through the collection.
            </returns>
        </member>
        <member name="M:KayMcCormick.Dev.InfoContext.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:KayMcCormick.Dev.IocModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.IocModule.DoLoad(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:KayMcCormick.Dev.IocModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:KayMcCormick.Dev.IocModule.LogRegistration(System.Object[])">
            <summary>
            
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Serialization.EventTimeConverter">
            <summary>
            Basic DAteTime converter that supports broken time parsing.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.EventTimeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            REad method
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.EventTimeConverter.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write method
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Serialization.HashtableConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.HashtableConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.HashtableConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Hashtable,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Serialization.JsonTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeConverter.Write(System.Text.Json.Utf8JsonWriter,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.Serialization.JsonTypeConverterFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeConverterFactory.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Serialization.JsonTypeInfoConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeInfoConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="typeToConvert"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Serialization.JsonTypeInfoConverter.Write(System.Text.Json.Utf8JsonWriter,System.Reflection.TypeInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="options"></param>
        </member>
        <member name="T:KayMcCormick.Dev.ServiceImplementation.AppInfoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ServiceImplementation.AppInfoService.#ctor(System.DateTime,KayMcCormick.Dev.Interfaces.IObjectIdProvider)">
            <summary>
            
            </summary>
            <param name="startupTime"></param>
            <param name="objectId"></param>
        </member>
        <member name="M:KayMcCormick.Dev.ServiceImplementation.AppInfoService.GetAppInstanceInfo(KayMcCormick.Dev.Service.AppInstanceInfoRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.ServiceImpl.CentralService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.ServiceImpl.CentralService.RegisterApplicationInstance(KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.ServiceImpl.CentralService.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.ICentralService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.ICentralService.RegisterApplicationInstance(KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceRequest.EndpointUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.IHaveObjectId">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IHaveObjectId
        </member>
        <member name="P:KayMcCormick.Dev.Interfaces.IHaveObjectId.InstanceObjectId">
            <summary>Sets the instance object identifier.</summary>
            <value>The instance object identifier.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for InstanceObjectId
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.IObjectIdProvider">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for IObjectIdProvider
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetInstanceByComponentRegistration(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance by component registration.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetInstanceCount(Autofac.Core.IComponentRegistration)">
            <summary>Gets the instance count.</summary>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectInstances">
            <summary>Gets the object instances.</summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectInstanceIdentifier(System.Object)">
            <summary>Gets the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetObjectById(System.Object)">
            <summary>
                <para>
                    Gets the object by identifier.
                </para>
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.ProvideObjectInstanceIdentifier(System.Object,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>Provides the object instance identifier.</summary>
            <param name="instance">The instance.</param>
            <param name="eComponent">The e component.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for ProvideObjectInstanceIdentifier
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetRootNodes">
            <summary>Gets the root nodes.</summary>
            <returns></returns>
            <autogeneratedoc />
            TODO Edit XML Comment Template for GetRootNodes
        </member>
        <member name="M:KayMcCormick.Dev.Interfaces.IObjectIdProvider.GetComponentInfo(System.Guid)">
            <summary>
            
            </summary>
            <param name="regId"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Interfaces.RegisterApplicationInstanceResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.InfraModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.InfraModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:KayMcCormick.Dev.InstanceInfo">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for InstanceInfo
        </member>
        <member name="M:KayMcCormick.Dev.InstanceInfo.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.InstanceInfo.#ctor(System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.InstanceInfo.Instance">
            <summary>Gets or sets the instance.</summary>
            <value>The instance.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Instance
        </member>
        <member name="P:KayMcCormick.Dev.InstanceInfo.Parameters">
            <summary>Gets or sets the parameters.</summary>
            <value>The parameters.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Parameters
        </member>
        <member name="T:KayMcCormick.Dev.IView`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:KayMcCormick.Dev.IView`1.ViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.AppInstanceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.AppInstanceInfo.StartupTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.AppInstanceInfo.LoggerInfos">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.AppInstanceInfo.ComponentInfos">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.AppInstanceInfoRequest">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.AppInstanceInfoResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.AppInstanceInfoResponse.Info">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.IAppInfoService">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Service.IAppInfoService.GetAppInstanceInfo(KayMcCormick.Dev.Service.AppInstanceInfoRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.Service.LoggerInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.LoggerInfo.TargetName">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.WireComponentInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.WireComponentInfo.Instances">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.WireComponentInfo.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.Service.WireInstanceInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.Service.WireInstanceInfo.Desc">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.Frame">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.ParameterList">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.File">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceEntry.Line">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceEntry.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceMethod">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceMethod.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceMethod.Method">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceMethod.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceParameter">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceParameter.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceParameter.Name">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceParameter.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceParams.List">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceParams.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceParams.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceParser.Parse``1(System.String,System.Func{System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,``0})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceParser.Parse``6(System.String,System.Func{System.Int32,System.Int32,System.String,``0},System.Func{``0,``0,``1},System.Func{``0,``0,``3},System.Func{``0,System.Collections.Generic.IEnumerable{``3},``2},System.Func{``0,``0,``4},System.Func{``0,``1,``2,``4,``5})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="tokenSelector"></param>
            <param name="methodSelector"></param>
            <param name="parameterSelector"></param>
            <param name="parametersSelector"></param>
            <param name="sourceLocationSelector"></param>
            <param name="selector"></param>
            <typeparam name="TToken"></typeparam>
            <typeparam name="TMethod"></typeparam>
            <typeparam name="TParameters"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TSourceLocation"></typeparam>
            <typeparam name="TFrame"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceSourceLocation">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceSourceLocation.File">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceSourceLocation.Line">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceSourceLocation.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.StackTrace.StackTraceToken">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceToken.Index">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceToken.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.StackTrace.StackTraceToken.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.StackTrace.StackTraceToken.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:KayMcCormick.Dev.TestApplicationInstance">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestApplicationInstance.#ctor(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            
            </summary>
            <param name="logMethod"></param>
        </member>
        <member name="M:KayMcCormick.Dev.TestApplicationInstance.AddModule(Autofac.Core.IModule)">
            <summary>
            
            </summary>
            <param name="appModule"></param>
        </member>
        <member name="M:KayMcCormick.Dev.TestApplicationInstance.BuildContainer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.TestApplicationInstance.LoadConfiguration(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            
            </summary>
            <param name="logMethod2"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.TestApplicationInstance.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute">
            <summary></summary>
            <seealso cref="T:Xunit.Sdk.BeforeAfterTestAttribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for BeforeAfterLoggerAttribute
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.TestLoggingRule">
            <summary>Gets or sets the test logging rule.</summary>
            <value>The test logging rule.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestLoggingRule
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.TestFileTarget">
            <summary>Gets or sets the test file target.</summary>
            <value>The test file target.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestFileTarget
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.After(System.Reflection.MethodInfo)">
            <summary>
                This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.BeforeAfterLoggerAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
                This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.FixtureLogger">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for FixtureLogger
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureLifecycleEvent(System.Type,KayMcCormick.Dev.TestLib.Lifecycle)">
            <summary></summary>
            <param name="fixtureType"></param>
            <param name="lifecycle"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureLifecycleEvent
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureFinalizedLifecycleEvent(System.Type)">
            <summary>Logs the fixture finalized lifecycle event.</summary>
            <param name="fixtureType">Type of the fixture.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureFinalizedLifecycleEvent
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.FixtureLogger.LogFixtureCreatedLifecycleEvent(System.Type)">
            <summary>Logs the fixture created lifecycle event.</summary>
            <param name="fixtureType">Type of the fixture.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogFixtureCreatedLifecycleEvent
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture">
            <summary>Test fixture to supply logging through the IMessageSink available to infrastructure types in Xunit.</summary>
            <autogeneratedoc />
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.InitializeAsync">
            <summary>
            Called immediately after the class has been created, before it is used.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.GlobalLoggingFixture.DisposeAsync">
            <summary>
            Called when an object is no longer needed. Called just before <see cref="M:System.IDisposable.Dispose"/>
            if the class also implements that.
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture">
            <summary>Test fixture to provide logging for the individual test case. In order to use, the individual test class must be tagged with the <seealso cref="T:Xunit.IClassFixture`1"/>. Method <seealso cref="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.SetOutputHelper(Xunit.Abstractions.ITestOutputHelper,System.Object,NLog.LogLevel)"/> must be invoked with the <seealso cref="T:Xunit.Abstractions.ITestOutputHelper"/> instance supplied by Xunit through the class constructor.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.SetOutputHelper(Xunit.Abstractions.ITestOutputHelper,System.Object,NLog.LogLevel)">
            <summary>Sets the output helper.</summary>
            <param name="value">The value.</param>
            <param name="testClass"></param>
            <param name="minLogLevel"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for SetOutputHelper
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.Layout">
            <summary>Gets or sets the layout used to format log messages.</summary>
            <remarks>
            The default value of the layout is: <v>${longdate}|${level:uppercase=true}|${logger}|${message:withexception=true}</v>
            </remarks>
            <docgen category="Layout Options" order="1" />
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Object" />
                class.
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Fixtures.LoggingFixture.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Lifecycle">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Lifecycle
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.Lifecycle.Created">
            <summary>The created</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Created
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.Lifecycle.Finalized">
            <summary>The finalized</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Finalized
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.TargetWithLayout" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for XunitSinkTarget
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget.#ctor(System.String,Xunit.Abstractions.IMessageSink)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget"/> class.</summary>
            <param name="name">The name.</param>
            <param name="sink"></param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitSinkTarget.Write(NLog.LogEventInfo)">
            <summary>
                Writes logging event to the log target. Must be overridden in inheriting
                classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.Logging.XunitTarget">
            <summary></summary>
            <seealso cref="T:NLog.Targets.TargetWithLayout" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for XunitTarget
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.Logging.XunitTarget.OutputHelper">
            <summary>Gets or sets the output helper.</summary>
            <value>The output helper.</value>
            <autogeneratedoc />
            TODO Edit XML Comment Template for OutputHelper
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitTarget.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:KayMcCormick.Dev.TestLib.Logging.XunitTarget"/> class.</summary>
            <param name="name">The name.</param>
            <autogeneratedoc />
            TODO Edit XML Comment Template for #ctor
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.Logging.XunitTarget.Write(NLog.LogEventInfo)">
            <summary>
                Writes logging event to the log target. Must be overridden in inheriting
                classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.LogHelper">
            <summary></summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogHelper
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogHelper.DisableLoggingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogHelper.EnsureLoggingConfigured(KayMcCormick.Dev.Logging.LogDelegates.LogMethod)">
            <summary>
            
            </summary>
            <param name="param1"></param>
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.LogHelper.Executed">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.LogHelper.DisableLogging">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogHelper.TestMethodProperties(System.Reflection.MethodInfo,KayMcCormick.Dev.TestLib.TestMethodLifecycle)">
            <summary>Supplied structured logging properties for a particular test method indicated by method.. Supplied properties "TestMethodName", "TestClass",</summary>
            <param name="method">The method.</param>
            <param name="stage">The stage.</param>
            <returns></returns>
            Return a dictionary with keys
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestMethodProperties
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.LogTestMethodAttribute">
            <summary></summary>
            <seealso cref="T:Xunit.Sdk.BeforeAfterTestAttribute" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for LogTestMethodAttribute
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.After(System.Reflection.MethodInfo)">
            <summary>
                This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:KayMcCormick.Dev.TestLib.LogTestMethodAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
                This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="T:KayMcCormick.Dev.TestLib.TestMethodLifecycle">
            <summary>Indicates the lifecycle state for a test method.</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for TestMethodLifecycle
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.TestMethodLifecycle.Before">
            <summary>The before</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for Before
        </member>
        <member name="F:KayMcCormick.Dev.TestLib.TestMethodLifecycle.After">
            <summary>The after</summary>
            <autogeneratedoc />
            TODO Edit XML Comment Template for After
        </member>
        <member name="T:KayMcCormick.Dev.Tracing.NLogTraceTarget">
            <summary>
            
            </summary>
        </member>
        <member name="T:KayMcCormick.Dev.UnableToDeserializeLogEventInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToDeserializeLogEventInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToDeserializeLogEventInfo.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToDeserializeLogEventInfo.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToDeserializeLogEventInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:KayMcCormick.Dev.UnableToRegisterObjectIdException">
            <summary></summary>
            <seealso cref="T:System.Exception" />
            <autogeneratedoc />
            TODO Edit XML Comment Template for UnableToRegisterObjectIdException
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:KayMcCormick.Dev.UnableToRegisterObjectIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:KayMcCormick.Dev.Utils">
            <summary>
            
            </summary>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.HandleInnerExceptions(System.Exception,NLog.LogLevel,NLog.ILogger)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="level"></param>
            <param name="logger"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.PerformLogConfigDump(System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="out"></param>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.ParseStackTrace(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:KayMcCormick.Dev.Utils.LogParsedExceptions(System.Exception)">
            <summary>
            
            </summary>
            <param name="eException"></param>
        </member>
    </members>
</doc>
