#region header
// Kay McCormick (mccor)
// 
// FileFinder3
// WpfApp1
// InstanceInfo.cs
// 
// 2020-01-25-7:05 PM
// 
// ---
#endregion
using System ;
using System.Collections.Generic ;
using System.ComponentModel ;
using System.Globalization ;
using Autofac.Core ;

namespace KayMcCormick.Dev
{
    /// <summary></summary>
    /// <autogeneratedoc />
    [TypeConverter(typeof(InstanceInfoTypeConverter))]
    public sealed class InstanceInfo
    {
        /// <summary>Gets or sets the instance.</summary>
        /// <value>The instance.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Instance
        public object Instance { get ; set ; }

        /// <summary>Gets or sets the parameters.</summary>
        /// <value>The parameters.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Parameters
        public IEnumerable < Parameter > Parameters { get ; set ; }

        /// <summary>
        /// </summary>
        /// <returns></returns>
        public override string ToString ( ) { return $"InstanceInfo({Instance})" ; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class InstanceInfoTypeConverter : TypeConverter
    {
        #region Overrides of TypeConverter
        /// <inheritdoc />
        public override bool CanConvertTo ( ITypeDescriptorContext context , Type destinationType )
        {
            if ( destinationType == typeof ( string ) )
            {
                return true ;
            }
            return base.CanConvertTo ( context , destinationType ) ;
        }

        /// <inheritdoc />
        public override object ConvertTo (
            ITypeDescriptorContext context
          , CultureInfo            culture
          , object                 value
          , Type                   destinationType
        )
        {
            if ( destinationType == typeof ( string ) )
            {
                InstanceInfo v = ( InstanceInfo ) value ;
                return $"{v.Instance.GetType ( ).FullName}[{v.Instance}]" ;
            }
            return base.ConvertTo ( context , culture , value , destinationType ) ;
        }
        #endregion
    }
}