#region header
// Kay McCormick (mccor)
// 
// Proj
// KayMcCormick.Dev
// MyCacheTarget2.cs
// 
// 2020-03-06-1:40 AM
// 
// ---
#endregion
using System ;
using System.Linq ;
using System.Reactive.Linq ;
using System.Reactive.Subjects ;
using JetBrains.Annotations ;
using NLog ;
using NLog.Config ;
using NLog.Targets ;

namespace KayMcCormick.Dev
{
    /// <summary></summary>
    /// <seealso cref="NLog.Targets.Target" />
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for MyCacheTarget
    [Target ( nameof ( MyCacheTarget2 ) ) ]
    public class MyCacheTarget2 : TargetWithLayout
    {
        // ##############################################################################################################################
        // Constructor
        // ##############################################################################################################################

        #region Constructor
        /// <summary>Initializes a new instance of the <see cref="MyCacheTarget2"/> class.</summary>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for #ctor
        public MyCacheTarget2 ( )
        {
            _cacheSubject = new ReplaySubject < string > ( MaxCount ) ;
        }
        #endregion

        /// <summary>
        ///     If there is no target in NLog.config defined a new one is registered
        ///     with
        ///     the default maxCount
        /// </summary>
        /// <param name="defaultMaxCount"></param>
        /// <returns></returns>
        [ UsedImplicitly ]
        public static MyCacheTarget2 GetInstance ( int defaultMaxCount )
        {
            var target =
                ( MyCacheTarget2 ) LogManager.Configuration.AllTargets.FirstOrDefault (
                                                                                      t => t is
                                                                                               MyCacheTarget2
                                                                                     ) ;
            if ( target == null )
            {
                target = new MyCacheTarget2
                         {
                             MaxCount = defaultMaxCount , Name = nameof ( MyCacheTarget2 )
                         } ;
                LogManager.Configuration.AddTarget ( target.Name , target ) ;
                LogManager.Configuration.LoggingRules.Insert (
                                                              0
                                                            , new LoggingRule (
                                                                               "*"
                                                                             , LogLevel.FromString (
                                                                                                    "Trace"
                                                                                                   )
                                                                             , target
                                                                              )
                                                             ) ;
                LogManager.ReconfigExistingLoggers ( ) ;
            }

            return target ;
        }

        // ##############################################################################################################################
        // override
        // ##############################################################################################################################

        #region override
        /// <summary>Writes logging event to the log target. Must be overridden in inheriting
        /// classes.</summary>
        /// <param name="logEvent">Logging event to be written out.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Write
        protected override void Write ( LogEventInfo logEvent )
        {
            var rendered  = this.RenderLogEvent ( Layout , logEvent ) ;
            _cacheSubject.OnNext ( rendered ) ;
        }
        #endregion

        // ##############################################################################################################################
        // Properties
        // ##############################################################################################################################

        #region Properties
        // ##########################################################################################
        // Public Properties
        // ##########################################################################################

        /// <summary>
        ///     The maximum amount of entries held
        /// </summary>
        [ RequiredParameter ]
        public int MaxCount { get ; set ; } = 1000 ;

        /// <summary>Gets the cache.</summary>
        /// <value>The cache.</value>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Cache
        // ReSharper disable once UnusedMember.Global
        public IObservable < string > Cache => _cacheSubject.AsObservable ( ) ;

        private readonly ReplaySubject < string > _cacheSubject ;

        // ##########################################################################################
        // Private Properties
        // ##########################################################################################
        #endregion
    }
}