#region header
// Kay McCormick (mccor)
// 
// KayMcCormick.Dev
// ProjTests
// ProjTests.cs
// 
// 2020-02-21-12:38 AM
// 
// ---
#endregion
using System ;
using System.IO ;
using System.Threading.Tasks ;
using KayMcCormick.Dev.TestLib.Fixtures ;
using Microsoft.Build.Locator ;
using NLog ;
using NLog.Layouts ;
using ProjLib ;
using ProjTests ;
using Xunit ;
using Xunit.Abstractions ;

namespace Tests.Main
{
    /// <summary>Tests for primary application class <see cref="App"/>.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for AppTests
    [Collection( "GeneralPurpose")]
    public class ProjTests : IClassFixture<LoggingFixture>, IClassFixture <ProjectFixture>, IDisposable
    {
        // ReSharper disable once UnusedMember.Local
        // ReSharper disable once InconsistentNaming
        private static   Logger         Logger = LogManager.GetCurrentClassLogger();
        private readonly LoggingFixture _loggingFixture;

        /// <summary>Initializes a new instance of the <see cref="System.Object" /> class.</summary>
        public ProjTests(ITestOutputHelper output, LoggingFixture loggingFixture, ProjectFixture projectFixture)
        {
            _loggingFixture = loggingFixture;
            VSI             = projectFixture.I ;
            loggingFixture.SetOutputHelper(output);
            _loggingFixture.Layout = Layout.FromString("${message}");
        }

        public VisualStudioInstance VSI { get ; set ; }

        /// <summary>Tests application of configuration in the app.config file.</summary>
        /// <autogeneratedoc />d ndfajdsad
        /// TODO Edit XML Comment Template for TestApplyConfiguration
        #if false
        [Fact]
        public async Task TestProject( )
        {
            Assert.NotNull(VSI);
            var root = @"C:\Users\mccor.LAPTOP-T6T0BN1K\source\repos";
            var p = Path.Combine(root, @"V2\LogTest\LogTest.sln");
            Assert.True(File.Exists(p));
            ProjLib.ProjectHandler v =
                new ProjectHandler(p, VSI);
            await v.LoadAsync ( );
            v.ProcessProject += ( workspace , project ) => {
                Logger.Debug ( "project is {project}" , project.Name ) ;
            } ;
            v.ProcessDocument += document => {
                Logger.Debug (
                              "Document: {doc} {sourcecode}"
                            , document.Name
                            , document.SourceCodeKind
                             ) ;
            } ;
            await v.ProcessAsync ( ) ;

        }
#endif
        [Theory]
        [InlineData( @"V2\WpfApp\WpfApp.sln")]
        [InlineData(@"V2\LogTest\LogTest.sln")]
        public async Task TestProject2(string p1)
        {
            Assert.NotNull(VSI);
            var root = @"C:\Users\mccor.LAPTOP-T6T0BN1K\source\repos";
            var solution = @"V2\WpfApp\WpfApp.sln" ;
            solution = @"V2\LogTest\LogTest.sln" ;
            var p = Path.Combine ( root , p1) ;
            Assert.True(File.Exists(p));
            var projectHandlerImpl =
                new ProjectHandlerImpl(p, VSI);
            await projectHandlerImpl.LoadAsync();
            projectHandlerImpl.ProcessProject += (workspace, project) => {
                Logger.Debug("project is {project}", project.Name);
            };
            projectHandlerImpl.ProcessDocument += document => {
                Logger.Trace(
                             "Document: {doc} {sourcecode}"
                           , document.Name
                           , document.SourceCodeKind
                            );
            };
            await projectHandlerImpl.ProcessAsync();

        }
        /// <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        public void Dispose()
        {
            // _loggingFixture?.Dispose ( ) ;
            _loggingFixture.SetOutputHelper(null);
        }
    }
}