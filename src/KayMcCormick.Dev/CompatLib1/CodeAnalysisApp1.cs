//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------

namespace KayMcCormick.Dev.Tracing
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Diagnostics;
    using System.Diagnostics.Eventing;
    using Microsoft.Win32;
    using System.Runtime.InteropServices;
    using System.Security.Principal;

    public static class PROVIDER_GUID
    {
        //
        // Provider "KayMcCormick-Roslyn-Analyzer-Provider" event count = 1
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("4572dcf8-26a3-4eb0-bb9e-6773aec7c4e4"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        private static EventDescriptor SETUP_LOGGING_EVENT;

        static PROVIDER_GUID()
        {
            unchecked
            {
                SETUP_LOGGING_EVENT = new EventDescriptor(0x1, 0x0, 0x10, 0x4, 0xa, 0x1, (long)0x8000000000000001);
            }
        }

        //
        // Event method for SETUP_LOGGING_EVENT
        //
        public static bool EventWriteSETUP_LOGGING_EVENT(string MessageValue)
        {
            return m_provider.WriteEvent(ref SETUP_LOGGING_EVENT, MessageValue);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}

        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }
    }
}
